From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lumine1909 <133463833+Lumine1909@users.noreply.github.com>
Date: Tue, 22 Apr 2025 23:32:41 +0800
Subject: [PATCH] Leaves Utils


diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index fe4128c66b70672b4aa29c85c7d033f55b1e794c..c1e9c647c9115d1a21d665a90d5ddb0831e64c2b 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -374,6 +374,8 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
     public boolean isTemporarilyActive;
     public long activatedImmunityTick = Integer.MIN_VALUE;
 
+    private net.minecraft.nbt.CompoundTag leavesData = new net.minecraft.nbt.CompoundTag(); // Leaves - Leaves ex data
+
     public void inactiveTick() {
     }
     // Paper end - EAR 2
@@ -2642,6 +2644,7 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
                 output.putBoolean("Paper.FreezeLock", true);
             }
             // Paper end
+            output.store("Leaves.Data", net.minecraft.nbt.CompoundTag.CODEC, leavesData); // Leaves - leaves ex data
         } catch (Throwable var7) {
             CrashReport crashReport = CrashReport.forThrowable(var7, "Saving entity NBT");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Entity being saved");
@@ -2762,6 +2765,7 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
             }
             freezeLocked = input.getBooleanOr("Paper.FreezeLock", false);
             // Paper end
+            leavesData = input.read("Leaves.Data", net.minecraft.nbt.CompoundTag.CODEC).orElse(new net.minecraft.nbt.CompoundTag());
         } catch (Throwable var7) {
             CrashReport crashReport = CrashReport.forThrowable(var7, "Loading entity NBT");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Entity being loaded");
@@ -4546,7 +4550,7 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
         return this.getType().is(EntityTypeTags.DEFLECTS_PROJECTILES) ? ProjectileDeflection.REVERSE : ProjectileDeflection.NONE;
     }
 
-    @Nullable
+    @org.jetbrains.annotations.NotNull // Leaves - notnull
     public net.minecraft.world.entity.LivingEntity getControllingPassenger() {
         return null;
     }
@@ -5436,4 +5440,9 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
         return ((ServerLevel) this.level()).isPositionEntityTicking(this.blockPosition());
     }
     // Paper end - Expose entity id counter
+    // Leaves start - leaves ex data
+    public net.minecraft.nbt.CompoundTag getLeavesData() {
+        return leavesData;
+    }
+    // Leaves end - leaves ex data
 }
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index a0cc94561c77b5e20b9dcee3190fe26cdaf55036..b6ec576ecc6f7924ee5f039ddacaf7195f02fef7 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -915,7 +915,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         return this.isClientSide;
     }
 
-    @Nullable
+    @org.jetbrains.annotations.NotNull // Leaves - notnull
     @Override
     public MinecraftServer getServer() {
         return null;
diff --git a/net/minecraft/world/level/LevelAccessor.java b/net/minecraft/world/level/LevelAccessor.java
index 1c769bb3de2c3271db574e9cd81ccdfdb669e5f9..881d0b5dc336b15177fdad30af6584ee9feec4b1 100644
--- a/net/minecraft/world/level/LevelAccessor.java
+++ b/net/minecraft/world/level/LevelAccessor.java
@@ -46,7 +46,7 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess, Sch
 
     DifficultyInstance getCurrentDifficultyAt(BlockPos pos);
 
-    @Nullable
+    @org.jetbrains.annotations.NotNull // Leaves - notnull
     MinecraftServer getServer();
 
     default Difficulty getDifficulty() {
diff --git a/net/minecraft/world/level/block/Block.java b/net/minecraft/world/level/block/Block.java
index 4fd746ccfd0018f5e551490e24aa68265d609295..57574f93763ab98a4bc109f56cfc3af08962a878 100644
--- a/net/minecraft/world/level/block/Block.java
+++ b/net/minecraft/world/level/block/Block.java
@@ -649,6 +649,13 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
     // CraftBukkit end
 
+    // Leaves start - reset push reaction
+    @org.jetbrains.annotations.Nullable
+    public net.minecraft.world.level.material.PushReaction getResetPushReaction() {
+        return null;
+    }
+    // Leaves end - reset push reaction
+
     record ShapePairKey(VoxelShape first, VoxelShape second) {
         @Override
         public boolean equals(Object other) {
diff --git a/net/minecraft/world/level/block/state/BlockBehaviour.java b/net/minecraft/world/level/block/state/BlockBehaviour.java
index 07777e331251b7e2c4fdcb63fee41f733e775004..23a7c045b07b9b30b2c8fb99e254a65b390e6245 100644
--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -766,7 +766,7 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public PushReaction getPistonPushReaction() {
-            return !this.isDestroyable() ? PushReaction.BLOCK : this.pushReaction; // Paper - Protect Bedrock and End Portal/Frames from being destroyed
+            return !this.isDestroyable() ? PushReaction.BLOCK : this.getBlock().getResetPushReaction() == null ? this.pushReaction : this.getBlock().getResetPushReaction(); // Paper - Protect Bedrock and End Portal/Frames from being destroyed // Leaves - reset push reaction
         }
 
         public boolean isSolidRender() {
