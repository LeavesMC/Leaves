From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sun, 2 Feb 2025 13:08:32 +0800
Subject: [PATCH] Leaves Protocol Core


diff --git a/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java b/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java
index fb263fa1f30a7dfcb7ec2656abfb38e5fe88eac9..56fd1ed7ccaf96e7eedea60fbdbf7f934939d563 100644
--- a/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java
+++ b/net/minecraft/network/protocol/common/custom/CustomPacketPayload.java
@@ -40,13 +40,22 @@ public interface CustomPacketPayload {
 
             @Override
             public void encode(B buffer, CustomPacketPayload value) {
+                // Leaves start - protocol core
+                if (value instanceof org.leavesmc.leaves.protocol.core.LeavesCustomPayload payload) {
+                    org.leavesmc.leaves.protocol.core.LeavesProtocolManager.encode(buffer, payload);
+                    return;
+                }
+                // Leaves end - protocol core
                 this.writeCap(buffer, value.type(), value);
             }
 
             @Override
             public CustomPacketPayload decode(B buffer) {
                 ResourceLocation resourceLocation = buffer.readResourceLocation();
-                return (CustomPacketPayload)this.findCodec(resourceLocation).decode(buffer);
+                // Leaves start - protocol core
+                var payload = org.leavesmc.leaves.protocol.core.LeavesProtocolManager.decode(resourceLocation, buffer);
+                return java.util.Objects.requireNonNullElseGet(payload, () -> this.findCodec(resourceLocation).decode(buffer));
+                // Leaves end - protocol core
             }
         };
     }
diff --git a/net/minecraft/network/protocol/common/custom/DiscardedPayload.java b/net/minecraft/network/protocol/common/custom/DiscardedPayload.java
index 62b9d9486c15a1ec6527f786df4e9fc483390bcb..5384bbc6bb3dbe5481f9d8cb10282551a0f78ec1 100644
--- a/net/minecraft/network/protocol/common/custom/DiscardedPayload.java
+++ b/net/minecraft/network/protocol/common/custom/DiscardedPayload.java
@@ -4,12 +4,12 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.resources.ResourceLocation;
 
-public record DiscardedPayload(ResourceLocation id, byte[] data) implements CustomPacketPayload { // Paper - store data
+public record DiscardedPayload(ResourceLocation id, byte @org.jetbrains.annotations.Nullable [] data) implements CustomPacketPayload { // Paper - store data // Leaves - nullable
     public static <T extends FriendlyByteBuf> StreamCodec<T, DiscardedPayload> codec(ResourceLocation id, int maxSize) {
         return CustomPacketPayload.codec((value, output) -> {
             // Paper start
             // Always write data
-            output.writeBytes(value.data);
+            if (value.data != null) output.writeBytes(value.data); // Leaves - nullable
         }, buffer -> {
             int i = buffer.readableBytes();
             if (i >= 0 && i <= maxSize) {
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 52ddb0025d45a7e03c6502623841fc4fb65cca83..e27335d61c57696b904672060250280aef85e4b6 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1744,6 +1744,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         profilerFiller.popPush("server gui refresh");
 
+        org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleTick(tickCount); // Leaves - protocol
+
         for (int i = 0; i < this.tickables.size(); i++) {
             this.tickables.get(i).run();
         }
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 53f038e1b5e7a13a08a0c925c8bd3f8a40868195..6f5b5a614557bd762eaecd26e2f7973ac3c897ff 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -436,6 +436,8 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     private ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
     private final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder viewDistanceHolder = new ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder();
 
+    public net.minecraft.network.Connection internalConnection; // Leaves - protocol core
+
     @Override
     public final boolean moonrise$isRealPlayer() {
         return this.isRealPlayer;
diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index aa6313df41c1d4011c6b3750b14fc9db115ef090..b064b777a5cfc0f893cb162c97cc00159d69e8cf 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -138,6 +138,18 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket packet) {
+        // Leaves start - protocol
+        if (packet.payload() instanceof org.leavesmc.leaves.protocol.core.LeavesCustomPayload leavesPayload) {
+            org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePayload(player, leavesPayload);
+            return;
+        }
+        if (packet.payload() instanceof net.minecraft.network.protocol.common.custom.DiscardedPayload(net.minecraft.resources.ResourceLocation id, byte[] data)) {
+            if (org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleBytebuf(player, id, io.netty.buffer.Unpooled.wrappedBuffer(data))) {
+                return;
+            }
+        }
+        // Leaves end - protocol
+
         // Paper start
         if (packet.payload() instanceof net.minecraft.network.protocol.common.custom.BrandPayload(String brand)) {
             this.player.clientBrandName = brand;
@@ -191,6 +203,7 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         final String channel = new String(data, from, length, java.nio.charset.StandardCharsets.US_ASCII);
         if (register) {
             this.getCraftPlayer().addChannel(channel);
+            org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleMinecraftRegister(channel, player); // Leaves - protocol
         } else {
             this.getCraftPlayer().removeChannel(channel);
         }
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index b1524279c02cd3be82338a6bd0320cb125a134d5..b743078b6b3014538f1f2fea4f7fd89291a7dfb4 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -335,6 +335,11 @@ public abstract class PlayerList {
                 return;
             }
 
+            // Leaves start - protocol core
+            if (player.internalConnection == null) player.internalConnection = connection;
+            org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerJoin(player);
+            // Leaves end - protocol core
+
             final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
             if (jm != null && !jm.equals(net.kyori.adventure.text.Component.empty())) { // Paper - Adventure
@@ -507,6 +512,7 @@ public abstract class PlayerList {
         return this.remove(player, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? player.getBukkitEntity().displayName() : io.papermc.paper.adventure.PaperAdventure.asAdventure(player.getDisplayName())));
     }
     public @Nullable net.kyori.adventure.text.Component remove(ServerPlayer player, net.kyori.adventure.text.Component leaveMessage) {
+        org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerLeave(player); // Leaves - protocol
         // Paper end - Fix kick event leave message not being sent
         ServerLevel serverLevel = player.level();
         player.awardStat(Stats.LEAVE_GAME);
@@ -631,6 +637,7 @@ public abstract class PlayerList {
         SocketAddress socketAddress = loginlistener.connection.getRemoteAddress();
 
         ServerPlayer entity = new ServerPlayer(this.server, this.server.getLevel(Level.OVERWORLD), gameProfile, net.minecraft.server.level.ClientInformation.createDefault());
+        entity.internalConnection = loginlistener.connection; // Leaves - protocol core
         entity.transferCookieConnection = loginlistener;
         org.bukkit.entity.Player player = entity.getBukkitEntity();
         org.bukkit.event.player.PlayerLoginEvent event = new org.bukkit.event.player.PlayerLoginEvent(player, loginlistener.connection.hostname, ((java.net.InetSocketAddress) socketAddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.connection.channel.remoteAddress()).getAddress());
@@ -1414,6 +1421,7 @@ public abstract class PlayerList {
             serverPlayer.connection.send(clientboundUpdateRecipesPacket);
             serverPlayer.getRecipeBook().sendInitialRecipeBook(serverPlayer);
         }
+        org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleDataPackReload(); // Leaves - protocol core
     }
 
     public boolean isAllowCommandsForAllPlayers() {
