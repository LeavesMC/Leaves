From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sun, 2 Feb 2025 15:28:11 +0800
Subject: [PATCH] Leaves Fakeplayer


diff --git a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
index a82d84283632342bd30bc3449983431ba43583e0..f59526f6bfa1b4af5b474f0b438513c96afb491c 100644
--- a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -39,6 +39,7 @@ public abstract class SimpleCriterionTrigger<T extends SimpleCriterionTrigger.Si
     }
 
     protected void trigger(ServerPlayer player, Predicate<T> testTrigger) {
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot) return; // Leaves - bot skip
         PlayerAdvancements advancements = player.getAdvancements();
         Set<CriterionTrigger.Listener<T>> set = (Set) advancements.criterionData.get(this); // Paper - fix PlayerAdvancements leak
         if (set != null && !set.isEmpty()) {
diff --git a/net/minecraft/network/Connection.java b/net/minecraft/network/Connection.java
index c5b3f7544a968f835b13819cc61cfacf06af53a2..d36a33a9ea2cc262f746314eda9770e19e328ddd 100644
--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -95,7 +95,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     @Nullable
     private volatile PacketListener disconnectListener;
     @Nullable
-    private volatile PacketListener packetListener;
+    protected volatile PacketListener packetListener; // Leaves - private -> protected
     @Nullable
     private DisconnectionDetails disconnectionDetails;
     private boolean encrypted;
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 8ecf53977841396693ab01d7897c24b67fe9b5cb..d78c566d282e3be1f793c3d8dbec56f6e3d92c4b 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -311,6 +311,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private final Set<String> pluginsBlockingSleep = new java.util.HashSet<>(); // Paper - API to allow/disallow tick sleeping
     public static final long SERVER_INIT = System.nanoTime(); // Paper - Lag compensation
 
+    private org.leavesmc.leaves.bot.BotList botList; // Leaves - fakeplayer
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> threadFunction) {
         ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.init(); // Paper - rewrite data converter system
         AtomicReference<S> atomicReference = new AtomicReference<>();
@@ -928,6 +930,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Perf: Async command map building; Shutdown and don't bother finishing
+        this.getBotList().removeAll(); // Leaves - save or remove bot
         // CraftBukkit start
         if (this.server != null) {
             this.server.spark.disable(); // Paper - spark
@@ -1429,7 +1432,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         int i = this.pauseWhenEmptySeconds() * 20;
         this.removeDisabledPluginsBlockingSleep(); // Paper - API to allow/disallow tick sleeping
         if (i > 0) {
-            if (this.playerList.getPlayerCount() == 0 && !this.tickRateManager.isSprinting() && this.pluginsBlockingSleep.isEmpty()) { // Paper - API to allow/disallow tick sleeping
+            if (this.playerList.getPlayerCount() == 0 && this.botList.bots.isEmpty() && !this.tickRateManager.isSprinting() && this.pluginsBlockingSleep.isEmpty()) { // Paper - API to allow/disallow tick sleeping // Leaves - fakeplayer
                 this.emptyTicks++;
             } else {
                 this.emptyTicks = 0;
@@ -1712,6 +1715,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public void tickConnection() {
         this.getConnection().tick();
+        this.botList.networkTick(); // Leaves - fakeplayer
     }
 
     private void synchronizeTime(ServerLevel level) {
@@ -2826,6 +2830,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.debugSubscribers;
     }
 
+    // Leaves start - fakeplayer
+    protected void setBotList(org.leavesmc.leaves.bot.BotList botList) {
+        this.botList = botList;
+    }
+
+    public org.leavesmc.leaves.bot.BotList getBotList() {
+        return botList;
+    }
+    // Leaves end - fakeplayer
+
     public record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         @Override
         public void close() {
diff --git a/net/minecraft/server/PlayerAdvancements.java b/net/minecraft/server/PlayerAdvancements.java
index fdeca41d40705f28864ce4443d01cd872c9d51b0..5c0e338dc1b0eb5724d10a73d6fc7975f9d2e5e5 100644
--- a/net/minecraft/server/PlayerAdvancements.java
+++ b/net/minecraft/server/PlayerAdvancements.java
@@ -167,6 +167,11 @@ public class PlayerAdvancements {
     }
 
     public boolean award(AdvancementHolder advancement, String criterionKey) {
+        // Leaves start - bot can't get advancement
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot) {
+            return false;
+        }
+        // Leaves end - bot can't get advancement
         boolean flag = false;
         AdvancementProgress orStartProgress = this.getOrStartProgress(advancement);
         boolean isDone = orStartProgress.isDone();
diff --git a/net/minecraft/server/commands/BanIpCommands.java b/net/minecraft/server/commands/BanIpCommands.java
index 79910948d3d835ac0eaec5785efbf87440dc5489..ad29caa0cd6e8b84760f9a19252d6d4f52f4227e 100644
--- a/net/minecraft/server/commands/BanIpCommands.java
+++ b/net/minecraft/server/commands/BanIpCommands.java
@@ -44,6 +44,12 @@ public class BanIpCommands {
             return banIp(source, username, reason);
         } else {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayerByName(username);
+            // Leaves start - disable ban
+            if (playerByName instanceof org.leavesmc.leaves.bot.ServerBot) {
+                source.sendFailure(Component.literal("Permission denied"));
+                return 0;
+            }
+            // Leaves end - disable ban
             if (playerByName != null) {
                 return banIp(source, playerByName.getIpAddress(), reason);
             } else {
diff --git a/net/minecraft/server/commands/BanPlayerCommands.java b/net/minecraft/server/commands/BanPlayerCommands.java
index ac88de89b4a66e17f25ed4d36d911dc5e84dc892..ba44f6e7ada2903d217a6b327435f1f777d4c626 100644
--- a/net/minecraft/server/commands/BanPlayerCommands.java
+++ b/net/minecraft/server/commands/BanPlayerCommands.java
@@ -44,8 +44,15 @@ public class BanPlayerCommands {
     private static int banPlayers(CommandSourceStack source, Collection<NameAndId> gameProfiles, @Nullable Component reason) throws CommandSyntaxException {
         UserBanList bans = source.getServer().getPlayerList().getBans();
         int i = 0;
-
+        boolean hasBot = false; // Leaves - disable kick
         for (NameAndId nameAndId : gameProfiles) {
+            // Leaves start - disable ban
+            if (nameAndId.isBot()) {
+                source.sendFailure(Component.literal("Permission denied"));
+                hasBot = true;
+                continue;
+            }
+            // Leaves end - disable ban
             if (!bans.isBanned(nameAndId)) {
                 UserBanListEntry userBanListEntry = new UserBanListEntry(
                     nameAndId, null, source.getTextName(), null, reason == null ? null : reason.getString()
@@ -63,7 +70,13 @@ public class BanPlayerCommands {
         }
 
         if (i == 0) {
-            throw ERROR_ALREADY_BANNED.create();
+            // Leaves start - disable kick
+            if (hasBot) {
+                return i;
+            } else {
+                throw ERROR_ALREADY_BANNED.create();
+            }
+            // Leaves end - disable kick
         } else {
             return i;
         }
diff --git a/net/minecraft/server/commands/KickCommand.java b/net/minecraft/server/commands/KickCommand.java
index a5e5b0e0cd67a65b9fe3f69416070429196c5fa8..1a756a09cd281e60e8802a4111f71b0be1c70dcf 100644
--- a/net/minecraft/server/commands/KickCommand.java
+++ b/net/minecraft/server/commands/KickCommand.java
@@ -46,9 +46,17 @@ public class KickCommand {
         if (!source.getServer().isPublished()) {
             throw ERROR_SINGLEPLAYER.create();
         } else {
+            boolean hasBot = false; // Leaves - disable kick
             int i = 0;
 
             for (ServerPlayer serverPlayer : players) {
+                // Leaves start - disable kick
+                if (serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot) {
+                    source.sendFailure(Component.literal("Permission denied"));
+                    hasBot = true;
+                    continue;
+                }
+                // Leaves end - disable kick
                 if (!source.getServer().isSingleplayerOwner(serverPlayer.nameAndId())) {
                     serverPlayer.connection.disconnect(reason, org.bukkit.event.player.PlayerKickEvent.Cause.KICK_COMMAND); // Paper - kick event cause
                     source.sendSuccess(() -> Component.translatable("commands.kick.success", serverPlayer.getDisplayName(), reason), true);
@@ -57,7 +65,13 @@ public class KickCommand {
             }
 
             if (i == 0) {
-                throw ERROR_KICKING_OWNER.create();
+                // Leaves start - disable kick
+                if (hasBot) {
+                    return i;
+                } else {
+                    throw ERROR_KICKING_OWNER.create();
+                }
+                // Leaves end - disable kick
             } else {
                 return i;
             }
diff --git a/net/minecraft/server/commands/OpCommand.java b/net/minecraft/server/commands/OpCommand.java
index 72e593966e66e27064030f5486f68a905885da1f..2682f6debf14ed3040a78b02d820e949ca3832c5 100644
--- a/net/minecraft/server/commands/OpCommand.java
+++ b/net/minecraft/server/commands/OpCommand.java
@@ -43,6 +43,7 @@ public class OpCommand {
         int i = 0;
 
         for (NameAndId nameAndId : gameProfiles) {
+            if (nameAndId.isBot()) continue; // Leaves - disable op
             if (!playerList.isOp(nameAndId)) {
                 playerList.op(nameAndId);
                 i++;
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index ecdb937f08a437a1d2398e49ca835071015844f2..fdda4acec6186c5a0290f3d9895cbcec782b8629 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -255,6 +255,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
 
         // Spigot start
+        this.setBotList(new org.leavesmc.leaves.bot.BotList(this)); // Leaves - fakeplayer
         this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
         org.spigotmc.SpigotConfig.init((java.io.File) this.options.valueOf("spigot-settings"));
         org.spigotmc.SpigotConfig.registerCommands();
@@ -278,6 +279,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
 
         org.leavesmc.leaves.LeavesConfig.init((java.io.File) options.valueOf("leaves-settings")); // Leaves - Server Config
+        this.getBotList().loadBotInfo(); // Leaves - load resident bot info
 
         com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics(); // Paper - start metrics // Leaves - down
 
diff --git a/net/minecraft/server/level/ChunkMap.java b/net/minecraft/server/level/ChunkMap.java
index 48027c1869d851e47e3a39f228e4ce063bd0454d..9f315d6b20562e35b226ea3420b75db5a30b36e4 100644
--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -1362,6 +1362,13 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                     }
                 } else {
                     this.removePlayer(player);
+                    // Leaves start - render bot
+                    if (entity instanceof org.leavesmc.leaves.bot.ServerBot bot) {
+                        if (bot.needSendFakeData(player)) {
+                            bot.sendFakeData(player.connection, false);
+                        }
+                    }
+                    // Leaves end - render bot
                 }
             }
         }
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index d34f60bea2a607714e601c2718e8028ae7cf02d5..5ecbbd9174dae94e0a1964ad29566099f2f8a7e8 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -222,6 +222,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     public boolean hasPhysicsEvent = true; // Paper - BlockPhysicsEvent
     public boolean hasEntityMoveEvent; // Paper - Add EntityMoveEvent
     private final alternate.current.wire.WireHandler wireHandler = new alternate.current.wire.WireHandler(this); // Paper - optimize redstone (Alternate Current)
+    final List<ServerPlayer> realPlayers; // Leaves - skip
 
     @Override
     public @Nullable LevelChunk getChunkIfLoaded(int x, int z) {
@@ -692,6 +693,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         this.chunkDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.ChunkDataController((ServerLevel)(Object)this, this.chunkTaskScheduler);
         // Paper end - rewrite chunk system
         this.getCraftServer().addWorld(this.getWorld()); // CraftBukkit
+        this.realPlayers = Lists.newArrayList(); // Leaves - skip
     }
 
     // Paper start
@@ -2282,6 +2284,12 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         return this.players;
     }
 
+    // Leaves start - fakeplayer skip
+    public List<ServerPlayer> realPlayers() {
+        return this.realPlayers;
+    }
+    // Leaves end - fakeplayer skip
+
     @Override
     public void updatePOIOnBlockStateChange(BlockPos pos, BlockState oldState, BlockState newState) {
         Optional<Holder<PoiType>> optional = PoiTypes.forState(oldState);
@@ -2727,6 +2735,11 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             // ServerLevel.this.getChunkSource().addEntity(entity); // Paper - ignore and warn about illegal addEntity calls instead of crashing server; moved down below valid=true
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.add(serverPlayer);
+                // Leaves start - skip
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                    ServerLevel.this.realPlayers.add(serverPlayer);
+                }
+                // Leaves end - skip
                 if (serverPlayer.isReceivingWaypoints()) {
                     ServerLevel.this.getWaypointManager().addPlayer(serverPlayer);
                 }
@@ -2805,6 +2818,11 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             ServerLevel.this.getChunkSource().removeEntity(entity);
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.remove(serverPlayer);
+                // Leaves start - skip
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                    ServerLevel.this.realPlayers.remove(serverPlayer);
+                }
+                // Leaves end - skip
                 ServerLevel.this.getWaypointManager().removePlayer(serverPlayer);
                 ServerLevel.this.updateSleepingPlayerList();
             }
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 2a10190f00d406b4fc747ef207a399f6d3fa4c08..87181a351a1494038c391682781e4c9e0d46a795 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -227,7 +227,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     private static final boolean DEFAULT_SPAWN_EXTRA_PARTICLES_ON_FALL = false;
     public ServerGamePacketListenerImpl connection;
     private final MinecraftServer server;
-    public final ServerPlayerGameMode gameMode;
+    public ServerPlayerGameMode gameMode; // Leaves - not final
     private final PlayerAdvancements advancements;
     private final ServerStatsCounter stats;
     private float lastRecordedHealthAndAbsorption = Float.MIN_VALUE;
@@ -248,7 +248,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     private Entity camera;
     public boolean isChangingDimension;
     public boolean seenCredits = false;
-    private final ServerRecipeBook recipeBook;
+    protected ServerRecipeBook recipeBook; // Leaves - not final and private -> protected
     @Nullable
     private Vec3 levitationStartPos;
     private int levitationStartTime;
@@ -1565,6 +1565,11 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
                 this.teleportSpectators(teleportTransition, serverLevel);
+                // Leaves start - bot support
+                if (org.leavesmc.leaves.LeavesConfig.modify.fakeplayer.enable) {
+                    this.server.getBotList().bots.forEach(bot -> bot.sendFakeDataIfNeed(this, true)); // Leaves - render bot
+                }
+                // Leaves end - bot support
                 // CraftBukkit start
                 org.bukkit.event.player.PlayerChangedWorldEvent changeEvent = new org.bukkit.event.player.PlayerChangedWorldEvent(this.getBukkitEntity(), serverLevel.getWorld());
                 this.level().getCraftServer().getPluginManager().callEvent(changeEvent);
diff --git a/net/minecraft/server/players/CachedUserNameToIdResolver.java b/net/minecraft/server/players/CachedUserNameToIdResolver.java
index c4c1274481cf2353c8af5c1feb697a1bcf0ce5f4..a358e6727c6952e902689d3521393eeb9686b425 100644
--- a/net/minecraft/server/players/CachedUserNameToIdResolver.java
+++ b/net/minecraft/server/players/CachedUserNameToIdResolver.java
@@ -121,6 +121,12 @@ public class CachedUserNameToIdResolver implements UserNameToIdResolver {
 
     @Override
     public Optional<NameAndId> get(String username) {
+        // Leaves start - fix bot
+        org.leavesmc.leaves.bot.ServerBot bot = org.leavesmc.leaves.bot.BotList.INSTANCE.getBotByName(username);
+        if (bot != null) {
+            return Optional.of(bot.nameAndId());
+        }
+        // Leaves end - fix bot
         String string = username.toLowerCase(Locale.ROOT);
         boolean stateLocked = true; try { this.stateLock.lock(); // Paper - Fix GameProfileCache concurrency
         CachedUserNameToIdResolver.GameProfileInfo gameProfileInfo = this.profilesByName.get(string);
diff --git a/net/minecraft/server/players/NameAndId.java b/net/minecraft/server/players/NameAndId.java
index 4888e84144c76edddee1a51dab3b05bc0f484c83..bba9101149c1b582fe261280fe4f6613ab4193b9 100644
--- a/net/minecraft/server/players/NameAndId.java
+++ b/net/minecraft/server/players/NameAndId.java
@@ -8,18 +8,22 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.core.UUIDUtil;
 
-public record NameAndId(UUID id, String name) {
+public record NameAndId(UUID id, String name, boolean isBot) { // Leaves - fakeplayer
     public static final Codec<NameAndId> CODEC = RecordCodecBuilder.create(
         instance -> instance.group(UUIDUtil.STRING_CODEC.fieldOf("id").forGetter(NameAndId::id), Codec.STRING.fieldOf("name").forGetter(NameAndId::name))
             .apply(instance, NameAndId::new)
     );
 
     public NameAndId(GameProfile profile) {
-        this(profile.id(), profile.name());
+        this(profile.id(), profile.name(), com.google.common.collect.Iterables.getFirst(profile.properties().get("is_bot"), "false").equals("true")); // Leaves - fakeplayer
     }
 
     public NameAndId(com.mojang.authlib.yggdrasil.response.NameAndId nameAndId) {
-        this(nameAndId.id(), nameAndId.name());
+        this(nameAndId.id(), nameAndId.name(), false); // Leaves - fakeplayer
+    }
+
+    public NameAndId(UUID uuid, String name) {
+        this(uuid, name, false); // Leaves - fakeplayer
     }
 
     @Nullable
@@ -34,7 +38,7 @@ public record NameAndId(UUID id, String name) {
                 return null;
             }
 
-            return new NameAndId(uuid, json.get("name").getAsString());
+            return new NameAndId(uuid, json.get("name").getAsString(), false); // Leaves - fakeplayer
         } else {
             return null;
         }
@@ -47,7 +51,7 @@ public record NameAndId(UUID id, String name) {
 
     public static NameAndId createOffline(String username) {
         UUID uuid = UUIDUtil.createOfflinePlayerUUID(username);
-        return new NameAndId(uuid, username);
+        return new NameAndId(uuid, username, false); // Leaves - fakeplayer
     }
 
     // Paper start - utility method for common conversion back to the game profile
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index 03ae88e05414a2e46d096e52039faabaf14d2b7f..cf362c3c8b3018378173c7bf25e29fcb398a517a 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -240,6 +240,19 @@ public abstract class PlayerList {
 
             org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerJoin(player);
 
+        // Leaves start - bot support
+        if (org.leavesmc.leaves.LeavesConfig.modify.fakeplayer.enable) {
+            org.leavesmc.leaves.bot.ServerBot bot = this.server.getBotList().getBotByName(player.getScoreboardName());
+            if (bot != null) {
+                this.server.getBotList().removeBot(bot, org.leavesmc.leaves.event.bot.BotRemoveEvent.RemoveReason.INTERNAL, player.getBukkitEntity(), false);
+            }
+            this.server.getBotList().bots.forEach(bot1 -> {
+                bot1.sendPlayerInfo(player);
+                bot1.sendFakeDataIfNeed(player, true);
+            }); // Leaves - render bot
+        }
+        // Leaves end - bot support
+
         final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
         if (jm != null && !jm.equals(net.kyori.adventure.text.Component.empty())) { // Paper - Adventure
@@ -745,6 +758,12 @@ public abstract class PlayerList {
         }
         // Paper end - Add PlayerPostRespawnEvent
 
+        // Leaves start - bot support
+        if (org.leavesmc.leaves.LeavesConfig.modify.fakeplayer.enable) {
+            this.server.getBotList().bots.forEach(bot -> bot.sendFakeDataIfNeed(serverPlayer, true)); // Leaves - render bot
+        }
+        // Leaves end - bot support
+
         // CraftBukkit end
 
         return serverPlayer;
@@ -848,11 +867,16 @@ public abstract class PlayerList {
     }
 
     public String[] getPlayerNamesArray() {
-        String[] strings = new String[this.players.size()];
+        String[] strings = new String[this.players.size() + this.server.getBotList().bots.size()]; // Leaves - fakeplayer support
 
         for (int i = 0; i < this.players.size(); i++) {
             strings[i] = this.players.get(i).getGameProfile().name();
         }
+        // Leaves start - fakeplayer support
+        for (int i = this.players.size(); i < strings.length; ++i) {
+            strings[i] = this.server.getBotList().bots.get(i - this.players.size()).getGameProfile().getName();
+        }
+        // Leaves end - fakeplayer support
 
         return strings;
     }
@@ -967,7 +991,14 @@ public abstract class PlayerList {
 
     @Nullable
     public ServerPlayer getPlayerByName(String username) {
-        return this.playersByName.get(username.toLowerCase(java.util.Locale.ROOT)); // Spigot
+        // Leaves start - fakeplayer support
+        username = username.toLowerCase(java.util.Locale.ROOT);
+        ServerPlayer player = this.playersByName.get(username);
+        if (player == null) {
+            player = this.server.getBotList().getBotByName(username);
+        }
+        return player; // Spigot
+        // Leaves end - fakeplayer support
     }
 
     public void broadcast(@Nullable Player except, double x, double y, double z, double radius, ResourceKey<Level> dimension, Packet<?> packet) {
@@ -1278,7 +1309,13 @@ public abstract class PlayerList {
 
     @Nullable
     public ServerPlayer getPlayer(UUID playerUUID) {
-        return this.playersByUUID.get(playerUUID);
+        // Leaves start - fakeplayer support
+        ServerPlayer player = this.playersByUUID.get(playerUUID);
+        if (player == null) {
+            player = this.server.getBotList().getBot(playerUUID);
+        }
+        return player;
+        // Leaves start - fakeplayer support
     }
 
     @Nullable
diff --git a/net/minecraft/server/waypoints/ServerWaypointManager.java b/net/minecraft/server/waypoints/ServerWaypointManager.java
index f9e7532f86122a379692561a639a209a126e8bba..2412f46837e967694222730e68e7d25ac32225cf 100644
--- a/net/minecraft/server/waypoints/ServerWaypointManager.java
+++ b/net/minecraft/server/waypoints/ServerWaypointManager.java
@@ -22,6 +22,11 @@ public class ServerWaypointManager implements WaypointManager<WaypointTransmitte
 
     @Override
     public void trackWaypoint(WaypointTransmitter waypoint) {
+        // Leaves start - fakeplayer
+        if (waypoint instanceof org.leavesmc.leaves.bot.ServerBot bot && !bot.getConfigValue(org.leavesmc.leaves.bot.agent.Configs.ENABLE_LOCATOR_BAR)) {
+            return;
+        }
+        // Leaves end - fakeplayer
         this.waypoints.add(waypoint);
 
         for (ServerPlayer serverPlayer : this.players) {
@@ -53,6 +58,11 @@ public class ServerWaypointManager implements WaypointManager<WaypointTransmitte
     }
 
     public void addPlayer(ServerPlayer player) {
+        // Leaves start - fakeplayer
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot) {
+            return;
+        }
+        // Leaves end - fakeplayer
         this.players.add(player);
 
         for (WaypointTransmitter waypointTransmitter : this.waypoints) {
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index fd9621f05aca61a92cb7d2859acef73ed3ef8861..6b380737fa5faa510b6c816fb0d8cba6563b7457 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1183,7 +1183,7 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
 
             BlockPos onPosLegacy = this.getOnPosLegacy();
             BlockState blockState = this.level().getBlockState(onPosLegacy);
-            if (this.isLocalInstanceAuthoritative()) {
+            if (this.isLocalInstanceAuthoritative() || this instanceof org.leavesmc.leaves.bot.ServerBot) {  // Leaves - ServerBot needs check fall damage
                 this.checkFallDamage(vec3.y, this.onGround(), blockState, onPosLegacy);
             }
 
@@ -1504,7 +1504,7 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
     }
 
     // Paper start - optimise collisions
-    private Vec3 collide(Vec3 movement) {
+    public Vec3 collide(Vec3 movement) { // Leaves - private -> public
         final boolean xZero = movement.x == 0.0;
         final boolean yZero = movement.y == 0.0;
         final boolean zZero = movement.z == 0.0;
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index 659657a489abeb2ded277cb26dbad5b3278f74e1..7d7b93cc9806c7a347df0dc557766b04612f3954 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -3149,7 +3149,7 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
     private void travelRidden(Player player, Vec3 travelVector) {
         Vec3 riddenInput = this.getRiddenInput(player, travelVector);
         this.tickRidden(player, riddenInput);
-        if (this.canSimulateMovement()) {
+        if (this.canSimulateMovement() || this.getControllingPassenger() instanceof org.leavesmc.leaves.bot.ServerBot) { // Leaves - Fakeplayer
             this.setSpeed(this.getRiddenSpeed(player));
             this.travel(riddenInput);
         } else {
@@ -3998,7 +3998,7 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
         // Paper start - lag compensate eating
         // we add 1 to the expected time to avoid lag compensating when we should not
         final boolean shouldLagCompensate = this.useItem.has(DataComponents.FOOD) && this.eatStartTime != -1 && (System.nanoTime() - this.eatStartTime) > ((1L + this.totalEatTimeTicks) * 50L * (1000L * 1000L));
-        if ((--this.useItemRemaining == 0 || shouldLagCompensate) && !this.level().isClientSide() && !usingItem.useOnRelease()) {
+        if ((--this.useItemRemaining == 0 || shouldLagCompensate) && !(this instanceof org.leavesmc.leaves.bot.ServerBot) && !this.level().isClientSide() && !usingItem.useOnRelease()) {
             this.useItemRemaining = 0;
             // Paper end - lag compensate eating
             this.completeUsingItem();
@@ -4175,6 +4175,23 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
         this.stopUsingItem();
     }
 
+    // Leaves start - Fakeplayer
+    public boolean releaseUsingItemWithResult() {
+        ItemStack itemInHand = this.getItemInHand(this.getUsedItemHand());
+        boolean result = false;
+        if (!this.useItem.isEmpty() && ItemStack.isSameItem(itemInHand, this.useItem)) {
+            this.useItem = itemInHand;
+            result = this.useItem.releaseUsingWithResult(this.level(), this, this.getUseItemRemainingTicks());
+            if (this.useItem.useOnRelease()) {
+                this.updatingUsingItem();
+            }
+        }
+
+        this.stopUsingItem();
+        return result;
+    }
+    // Leaves end - Fakeplayer
+
     public void stopUsingItem() {
         if (!this.level().isClientSide()) {
             boolean isUsingItem = this.isUsingItem();
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index 14e8332cd07ebbd474015ad50abb191f4ad43b18..468097eafe73b45924697d36acc962b7bf9ca17b 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -166,7 +166,7 @@ public abstract class Player extends Avatar implements ContainerUser {
     private int lastLevelUpTime;
     public GameProfile gameProfile;
     private boolean reducedDebugInfo;
-    private ItemStack lastItemInMainHand = ItemStack.EMPTY;
+    protected ItemStack lastItemInMainHand = ItemStack.EMPTY;
     private final ItemCooldowns cooldowns = this.createItemCooldowns();
     private Optional<GlobalPos> lastDeathLocation = Optional.empty();
     @Nullable
@@ -308,6 +308,12 @@ public abstract class Player extends Avatar implements ContainerUser {
         }
     }
 
+    // Leaves start - fakeplayer
+    protected void livingEntityTick() {
+        super.tick();
+    }
+    // Leaves end - fakeplayer
+
     @Override
     protected float getMaxHeadRotationRelativeToBody() {
         return this.isBlocking() ? 15.0F : super.getMaxHeadRotationRelativeToBody();
@@ -536,7 +542,7 @@ public abstract class Player extends Avatar implements ContainerUser {
     public void removeEntitiesOnShoulder() {
     }
 
-    private void touch(Entity entity) {
+    public void touch(Entity entity) { // Leaves - private -> public
         entity.playerTouch(this);
     }
 
@@ -1147,7 +1153,7 @@ public abstract class Player extends Avatar implements ContainerUser {
                                 this.sweepAttack();
                             }
 
-                            if (target instanceof ServerPlayer && target.hurtMarked) {
+                            if ((target instanceof ServerPlayer && !(target instanceof org.leavesmc.leaves.bot.ServerBot)) && target.hurtMarked) { // Leaves - bot knockback
                                 // CraftBukkit start - Add Velocity Event
                                 boolean cancelled = false;
                                 org.bukkit.entity.Player player = (org.bukkit.entity.Player) target.getBukkitEntity();
diff --git a/net/minecraft/world/entity/projectile/FishingHook.java b/net/minecraft/world/entity/projectile/FishingHook.java
index 89767d2e8b2438db0f9bfe3504e637934725e995..0d761284b7d7bb8f4cb3919e1e8f216fb7c55f96 100644
--- a/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/net/minecraft/world/entity/projectile/FishingHook.java
@@ -58,7 +58,7 @@ public class FishingHook extends Projectile {
     public static final EntityDataAccessor<Integer> DATA_HOOKED_ENTITY = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_BITING = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.BOOLEAN);
     private int life;
-    private int nibble;
+    public int nibble; // Leaves - private -> public
     public int timeUntilLured;
     public int timeUntilHooked;
     public float fishAngle;
diff --git a/net/minecraft/world/entity/vehicle/AbstractBoat.java b/net/minecraft/world/entity/vehicle/AbstractBoat.java
index 4e3cd5974a872212eab8df8671da12df749a40a6..62f3c73818673ca294499480a45c8d0f5d4e0943 100644
--- a/net/minecraft/world/entity/vehicle/AbstractBoat.java
+++ b/net/minecraft/world/entity/vehicle/AbstractBoat.java
@@ -269,6 +269,11 @@ public abstract class AbstractBoat extends VehicleEntity implements Leashable {
             }
 
             this.move(MoverType.SELF, this.getDeltaMovement());
+        } else if (this.getControllingPassenger() instanceof org.leavesmc.leaves.bot.ServerBot) { // Leaves start - Fakeplayer
+            this.floatBoat();
+            this.controlBoat();
+            this.move(MoverType.SELF, this.getDeltaMovement());
+            // Leaves end - Fakeplayer
         } else {
             this.setDeltaMovement(Vec3.ZERO);
         }
@@ -377,6 +382,13 @@ public abstract class AbstractBoat extends VehicleEntity implements Leashable {
         }
     }
 
+    // Leaves start - Fakeplayer
+    @Override
+    public boolean canSimulateMovement() {
+        return super.canSimulateMovement() || this.getControllingPassenger() instanceof org.leavesmc.leaves.bot.ServerBot;
+    }
+    // Leaves end - Fakeplayer
+
     @Nullable
     protected SoundEvent getPaddleSound() {
         return switch (this.getStatus()) {
diff --git a/net/minecraft/world/inventory/AbstractContainerMenu.java b/net/minecraft/world/inventory/AbstractContainerMenu.java
index 06846950348954328c07f64cd9b3359e79a1a468..e1783ad0adbb791b2ff7441243c9f0aeaf37c7f6 100644
--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -400,6 +400,7 @@ public abstract class AbstractContainerMenu {
 
     private void doClick(int slotId, int button, ClickType clickType, Player player) {
         Inventory inventory = player.getInventory();
+        if (!doClickCheck(slotId, button, clickType, player)) return; // Leaves - doClick check
         if (clickType == ClickType.QUICK_CRAFT) {
             int i = this.quickcraftStatus;
             this.quickcraftStatus = getQuickcraftHeader(button);
@@ -674,6 +675,22 @@ public abstract class AbstractContainerMenu {
         }
     }
 
+    // Leaves start - doClick check
+    private boolean doClickCheck(int slotIndex, int button, ClickType actionType, Player player) {
+        if (slotIndex < 0) {
+            return true;
+        }
+
+        Slot slot = getSlot(slotIndex);
+        ItemStack itemStack = slot.getItem();
+        net.minecraft.world.item.component.CustomData customData = itemStack.get(net.minecraft.core.component.DataComponents.CUSTOM_DATA);
+        if (customData != null && customData.contains("Leaves.Gui.Placeholder")) {
+            return !customData.copyTag().getBoolean("Leaves.Gui.Placeholder").orElse(false);
+        }
+        return true;
+    }
+    // Leaves end - doClick check
+
     private boolean tryItemClickBehaviourOverride(Player player, ClickAction action, Slot slot, ItemStack clickedItem, ItemStack carriedItem) {
         FeatureFlagSet featureFlagSet = player.level().enabledFeatures();
         return carriedItem.isItemEnabled(featureFlagSet) && carriedItem.overrideStackedOnOther(slot, action, player)
diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index 25bc90eb527547487fb5191dc135f2c6030f3a19..671216613df044fb47e728070490beabb008fb04 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -443,7 +443,7 @@ public final class ItemStack implements DataComponentHolder {
                     placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(serverLevel, player, hand, blocks.getFirst(), clickedPos);
                 }
 
-                if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild()) && (!(player instanceof org.leavesmc.leaves.bot.ServerBot))) { // Leaves - Fakeplayer skip this check
                     interactionResult = InteractionResult.FAIL; // cancel placement
                     // PAIL: Remove this when MC-99075 fixed
                     player.containerMenu.forceHeldSlot(hand);
@@ -939,6 +939,20 @@ public final class ItemStack implements DataComponentHolder {
         }
     }
 
+    // Leaves start - Fakeplayer
+    public boolean releaseUsingWithResult(Level level, LivingEntity livingEntity, int timeLeft) {
+        ItemStack itemStack = this.copy();
+        if (this.getItem().releaseUsing(this, level, livingEntity, timeLeft)) {
+            ItemStack itemStack1 = this.applyAfterUseComponentSideEffects(livingEntity, itemStack);
+            if (itemStack1 != this) {
+                livingEntity.setItemInHand(livingEntity.getUsedItemHand(), itemStack1);
+            }
+            return true;
+        }
+        return false;
+    }
+    // Leaves end - Fakeplayer
+
     public boolean useOnRelease() {
         return this.getItem().useOnRelease(this);
     }
diff --git a/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index 564a8f9465c5768a6e9bbace4cc5ed580403cac2..e8f556f175bb9192445b9c464c6b587296ce8e1b 100644
--- a/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -135,7 +135,7 @@ public class PistonMovingBlockEntity extends BlockEntity {
                                 break;
                             }
 
-                            if (!(entity instanceof ServerPlayer)) {
+                            if (!(entity instanceof ServerPlayer) || (entity instanceof org.leavesmc.leaves.bot.ServerBot)) { // Leaves - bot slime block
                                 Vec3 deltaMovement = entity.getDeltaMovement();
                                 double d1 = deltaMovement.x;
                                 double d2 = deltaMovement.y;
diff --git a/net/minecraft/world/level/levelgen/PhantomSpawner.java b/net/minecraft/world/level/levelgen/PhantomSpawner.java
index 801a50ba4d202df0289339f26968e7f6bb9ca767..196f5dd260701d520cc8a037a896f34c87f74934 100644
--- a/net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ b/net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -48,6 +48,11 @@ public class PhantomSpawner implements CustomSpawner {
                                         ServerStatsCounter stats = serverPlayer.getStats();
                                         int i = Mth.clamp(stats.getValue(Stats.CUSTOM.get(Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE);
                                         int i1 = 24000;
+                                        // Leaves start - fakeplayer spawn
+                                        if (serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot bot && bot.getConfigValue(org.leavesmc.leaves.bot.agent.Configs.SPAWN_PHANTOM)) {
+                                            i1 = Math.max(bot.notSleepTicks, 1);
+                                        }
+                                        // Leaves end - fakeplayer spawn
                                         if (randomSource.nextInt(i) >= 72000) {
                                             BlockPos blockPos1 = blockPos.above(20 + randomSource.nextInt(15))
                                                 .east(-10 + randomSource.nextInt(21))
diff --git a/net/minecraft/world/level/storage/LevelResource.java b/net/minecraft/world/level/storage/LevelResource.java
index bef794c3f58c41d910aa0bcc63fbdeea7225fddf..a601da588e6973cc5b87d3e3eeba49b53f6d9a6d 100644
--- a/net/minecraft/world/level/storage/LevelResource.java
+++ b/net/minecraft/world/level/storage/LevelResource.java
@@ -15,7 +15,7 @@ public class LevelResource {
     public static final LevelResource ROOT = new LevelResource(".");
     private final String id;
 
-    private LevelResource(String id) {
+    public LevelResource(String id) { // Leaves - private -> public
         this.id = id;
     }
 
diff --git a/net/minecraft/world/level/storage/PlayerDataStorage.java b/net/minecraft/world/level/storage/PlayerDataStorage.java
index 02f72bf880e2c162e94a9ebea32890cb25738758..1d660873c11f7e50ffe16d90e45bd86708ab3880 100644
--- a/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -20,7 +20,7 @@ import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.entity.player.Player;
 import org.slf4j.Logger;
 
-public class PlayerDataStorage {
+public class PlayerDataStorage implements org.leavesmc.leaves.bot.IPlayerDataStorage {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final File playerDir;
     protected final DataFixer fixerUpper;
