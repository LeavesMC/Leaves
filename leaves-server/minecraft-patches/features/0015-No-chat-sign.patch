From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Wed, 3 Aug 2022 11:20:51 +0800
Subject: [PATCH] No chat sign


diff --git a/net/minecraft/commands/arguments/ArgumentSignatures.java b/net/minecraft/commands/arguments/ArgumentSignatures.java
index 47cb25aa9c37bd84d156288c397321009f1d9ae2..a94981882ac37ea215df3a71117d4a9b1ab79fcd 100644
--- a/net/minecraft/commands/arguments/ArgumentSignatures.java
+++ b/net/minecraft/commands/arguments/ArgumentSignatures.java
@@ -13,10 +13,17 @@ public record ArgumentSignatures(List<ArgumentSignatures.Entry> entries) {
     private static final int MAX_ARGUMENT_COUNT = 8;
     private static final int MAX_ARGUMENT_NAME_LENGTH = 16;
 
+    // Leaves start - no chat sign
     public ArgumentSignatures(FriendlyByteBuf buffer) {
-        this(buffer.readCollection(FriendlyByteBuf.<List<ArgumentSignatures.Entry>>limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new));
+        this(readSign(buffer));
     }
 
+    private static List<ArgumentSignatures.Entry> readSign(FriendlyByteBuf buf) {
+        var entries = buf.readCollection(FriendlyByteBuf.<List<ArgumentSignatures.Entry>>limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new);
+        return org.leavesmc.leaves.LeavesConfig.mics.noChatSign ? List.of() : entries;
+    }
+    // Leaves end - no chat sign
+
     public void write(FriendlyByteBuf buffer) {
         buffer.writeCollection(this.entries, (buffer1, entry) -> entry.write(buffer1));
     }
diff --git a/net/minecraft/network/FriendlyByteBuf.java b/net/minecraft/network/FriendlyByteBuf.java
index bef92cfa7eb86fbc6bc1b7d862eaca575eeeadec..32db9ef03b07b2cd88407d72621776b473e37411 100644
--- a/net/minecraft/network/FriendlyByteBuf.java
+++ b/net/minecraft/network/FriendlyByteBuf.java
@@ -119,6 +119,14 @@ public class FriendlyByteBuf extends ByteBuf {
     public <T> void writeJsonWithCodec(Codec<T> codec, T value, int maxLength) {
         // Paper end - Adventure; add max length parameter
         DataResult<JsonElement> dataResult = codec.encodeStart(JsonOps.INSTANCE, value);
+        // Leaves start - no chat sign
+        if (codec == net.minecraft.network.protocol.status.ServerStatus.CODEC) {
+            JsonElement element = dataResult.getOrThrow(string -> new EncoderException("Failed to encode: " + string + " " + value));
+            element.getAsJsonObject().addProperty("preventsChatReports", org.leavesmc.leaves.LeavesConfig.mics.noChatSign);
+            this.writeUtf(GSON.toJson(element));
+            return;
+        }
+        // Leaves end - no chat sign
         this.writeUtf(GSON.toJson(dataResult.getOrThrow(exception -> new EncoderException("Failed to encode: " + exception + " " + value))), maxLength); // Paper - Adventure; add max length parameter
     }
 
diff --git a/net/minecraft/network/protocol/game/ServerboundChatPacket.java b/net/minecraft/network/protocol/game/ServerboundChatPacket.java
index b5afc05924ae899e020c303c8b86398e1d4ab8a0..4479634e577913372faf87138b5ba26ba02ea4f7 100644
--- a/net/minecraft/network/protocol/game/ServerboundChatPacket.java
+++ b/net/minecraft/network/protocol/game/ServerboundChatPacket.java
@@ -16,7 +16,7 @@ public record ServerboundChatPacket(String message, Instant timeStamp, long salt
     );
 
     private ServerboundChatPacket(FriendlyByteBuf buffer) {
-        this(buffer.readUtf(256), buffer.readInstant(), buffer.readLong(), buffer.readNullable(MessageSignature::read), new LastSeenMessages.Update(buffer));
+        this(buffer.readUtf(256), buffer.readInstant(), buffer.readLong(), buffer.readNullable(ServerboundChatPacket::readSign), new LastSeenMessages.Update(buffer)); // Leaves - no chat sign
     }
 
     private void write(FriendlyByteBuf buffer) {
@@ -27,6 +27,14 @@ public record ServerboundChatPacket(String message, Instant timeStamp, long salt
         this.lastSeenMessages.write(buffer);
     }
 
+    // Leaves start - no chat sign
+    private static MessageSignature readSign(FriendlyByteBuf buf) {
+        byte[] bs = new byte[256];
+        buf.readBytes(bs);
+        return org.leavesmc.leaves.LeavesConfig.mics.noChatSign ? null : new MessageSignature(bs);
+    }
+    // Leaves end - no chat sign
+
     @Override
     public PacketType<ServerboundChatPacket> type() {
         return GamePacketTypes.SERVERBOUND_CHAT;
diff --git a/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java b/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
index 1df628ac0b414511aaed6e09d78f884c4170f730..b92081d70ffeec47c304e553ce1aea0a8980752d 100644
--- a/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
+++ b/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
@@ -26,6 +26,11 @@ public record ServerboundChatSessionUpdatePacket(RemoteChatSession.Data chatSess
 
     @Override
     public void handle(ServerGamePacketListener handler) {
+        // Leaves start - no chat report
+        if (org.leavesmc.leaves.LeavesConfig.mics.noChatSign) {
+            return;
+        }
+        // Leaves end - no chat report
         handler.handleChatSessionUpdate(this);
     }
 }
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index d0971352de582c3d3bda544f08578d0c4c3618eb..9112c203c7cf31b2ce1789ea97ab17ceaaba24b4 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -572,7 +572,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper start - Add setting for proxy online mode status
         return properties.enforceSecureProfile
             && io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode()
-            && this.services.canValidateProfileKeys();
+            && this.services.canValidateProfileKeys() && !org.leavesmc.leaves.LeavesConfig.mics.noChatSign; // Leaves - no chat sign
         // Paper end - Add setting for proxy online mode status
     }
 
diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index dd377f2f85da6c3b86dad7c577887c128b63004b..8786c9436c5acc59221fa713a00314a48cda9603 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -310,10 +310,24 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     }
 
     public void send(Packet<?> packet) {
+        // Leaves start - rebuild ClientboundPlayerChatPacket
+        if (org.leavesmc.leaves.LeavesConfig.mics.noChatSign) {
+            if (this instanceof ServerGamePacketListenerImpl && packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerChatPacket chat) {
+                packet = new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(chat.chatType().decorate(chat.unsignedContent() != null ? chat.unsignedContent() : Component.literal(chat.body().content())), false);
+            }
+        }
+        // Leaves end - rebuild ClientboundPlayerChatPacket
         this.send(packet, null);
     }
 
     public void send(Packet<?> packet, @Nullable ChannelFutureListener channelFutureListener) {
+        // Leaves start - no ClientboundPlayerChatHeaderPacket and rebuild ClientboundPlayerChatPacket
+        if (org.leavesmc.leaves.LeavesConfig.mics.noChatSign) {
+            if (packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerChatPacket && channelFutureListener != null) {
+                channelFutureListener = null;
+            }
+        }
+        // Leaves end - no ClientboundPlayerChatHeaderPacket and rebuild ClientboundPlayerChatPacket
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
             return;
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index 580ab889bce7d0dff64e5e1ae92a646ac96e3168..11aa0c3379ec13d91770ba1e7dfb63e83eacadcd 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -1315,7 +1315,7 @@ public abstract class PlayerList {
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) {
-        return message.hasSignature() && !message.hasExpiredServer(Instant.now());
+        return org.leavesmc.leaves.LeavesConfig.mics.noChatSign || (message.hasSignature() && !message.hasExpiredServer(Instant.now())); // Leaves - No Not Secure
     }
 
     // CraftBukkit start
