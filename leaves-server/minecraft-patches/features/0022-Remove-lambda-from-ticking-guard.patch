From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Wed, 17 Aug 2022 10:56:49 +0800
Subject: [PATCH] Remove lambda from ticking guard

This patch is Powered by Pufferfish(https://github.com/pufferfish-gg/Pufferfish)

diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 5ecbbd9174dae94e0a1964ad29566099f2f8a7e8..99153cbb1de2d6de7289955b24d0e5fe633453d6 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -831,7 +831,24 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                                     }
 
                                     profilerFiller.push("tick");
-                                    this.guardEntityTick(this::tickNonPassenger, entity);
+                                    // Leaves start - copied from this.guardEntityTick
+                                    if (org.leavesmc.leaves.LeavesConfig.performance.remove.tickGuardLambda) {
+                                        try {
+                                            this.tickNonPassenger(entity); // Leaves - changed
+                                        } catch (Throwable throwable) {
+                                            if (throwable instanceof ThreadDeath) throw throwable; // Paper
+                                            // Paper start - Prevent block entity and entity crashes
+                                            final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level().getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
+                                            MinecraftServer.LOGGER.error(msg, throwable);
+                                            getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, throwable))); // Paper - ServerExceptionEvent
+                                            entity.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DISCARD);
+                                            // Paper end - Prevent block entity and entity crashes
+                                        }
+                                        this.moonrise$midTickTasks(); // Paper - rewrite chunk system
+                                    } else {
+                                        this.guardEntityTick(this::tickNonPassenger, entity);
+                                    }
+                                    // Leaves end - copied from this.guardEntityTick
                                     profilerFiller.pop();
                                 }
                             }
