From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Wed, 14 Dec 2022 14:47:06 +0800
Subject: [PATCH] Stackable ShulkerBoxes

This patch is Powered by fabric-carpet(https://github.com/gnembon/fabric-carpet) and plusls-carpet-addition(https://github.com/plusls/plusls-carpet-addition)

diff --git a/net/minecraft/commands/arguments/item/ItemInput.java b/net/minecraft/commands/arguments/item/ItemInput.java
index 643797124fe5a4489d0b7419b7e600c04f283ef2..1edd039eea817c2fca9e0330502384b2507673ba 100644
--- a/net/minecraft/commands/arguments/item/ItemInput.java
+++ b/net/minecraft/commands/arguments/item/ItemInput.java
@@ -39,8 +39,8 @@ public class ItemInput {
     public ItemStack createItemStack(int count, boolean allowOversizedStacks) throws CommandSyntaxException {
         ItemStack itemStack = new ItemStack(this.item, count);
         itemStack.applyComponents(this.components);
-        if (allowOversizedStacks && count > itemStack.getMaxStackSize()) {
-            throw ERROR_STACK_TOO_BIG.create(this.getItemName(), itemStack.getMaxStackSize());
+        if (allowOversizedStacks && count > org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack)) {
+            throw ERROR_STACK_TOO_BIG.create(this.getItemName(), org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack));
         } else {
             return itemStack;
         }
diff --git a/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java b/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
index 828fbe03e7beb860cd0816c7ac8adbffe196533b..42b9ed4d0af45a285ba530514e24c43c23aad8dc 100644
--- a/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
+++ b/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
@@ -23,7 +23,7 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
         this.items = NonNullList.withSize(items.size(), ItemStack.EMPTY);
 
         for (int i = 0; i < items.size(); i++) {
-            this.items.set(i, items.get(i).copy());
+            this.items.set(i, items.get(i)); // Leaves - stackable shulker boxes
         }
 
         this.carriedItem = carriedItem.copy();
diff --git a/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java b/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
index c1130f596cf3443eeb62eb1b12587172fe0859ee..a1850d2c1b334c14677edd468e2be5368ce3dc23 100644
--- a/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
+++ b/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
@@ -19,7 +19,7 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
         this.containerId = containerId;
         this.stateId = stateId;
         this.slot = slot;
-        this.itemStack = itemStack.copy();
+        this.itemStack = itemStack.copy(); // Leaves - stackable shulker boxes
     }
 
     private ClientboundContainerSetSlotPacket(RegistryFriendlyByteBuf buffer) {
diff --git a/net/minecraft/server/commands/GiveCommand.java b/net/minecraft/server/commands/GiveCommand.java
index 8b7af734ca4ed3cafa810460b2cea6c1e6342a69..82605229df3e75071df419cc8b7dcac14834b3ff 100644
--- a/net/minecraft/server/commands/GiveCommand.java
+++ b/net/minecraft/server/commands/GiveCommand.java
@@ -52,7 +52,7 @@ public class GiveCommand {
     private static int giveItem(CommandSourceStack source, ItemInput item, Collection<ServerPlayer> targets, int count) throws CommandSyntaxException {
         ItemStack itemStack = item.createItemStack(1, false);
         final Component displayName = itemStack.getDisplayName(); // Paper - get display name early
-        int maxStackSize = itemStack.getMaxStackSize();
+        int maxStackSize = org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack);
         int i = maxStackSize * 100;
         if (count > i) {
             source.sendFailure(Component.translatable("commands.give.failed.toomanyitems", i, itemStack.getDisplayName()));
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 876d207996724727ca26b139af759eab2e6f4131..ff2caee25f783f44f3acd3d723e033aacafd56de 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2987,7 +2987,7 @@ public class ServerGamePacketListenerImpl
                                             } else if (slot.mayPlace(cursor)) {
                                                 if (ItemStack.isSameItemSameComponents(clickedItem, cursor)) {
                                                     int toPlace = packet.getButtonNum() == 0 ? cursor.getCount() : 1;
-                                                    toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
+                                                    toPlace = Math.min(toPlace, org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(clickedItem) - clickedItem.getCount());
                                                     toPlace = Math.min(toPlace, slot.container.getMaxStackSize() - clickedItem.getCount());
                                                     if (toPlace == 1) {
                                                         action = InventoryAction.PLACE_ONE;
@@ -3023,7 +3023,7 @@ public class ServerGamePacketListenerImpl
                                                 }
                                             } else if (ItemStack.isSameItemSameComponents(cursor, clickedItem)) {
                                                 if (clickedItem.getCount() >= 0) {
-                                                    if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
+                                                    if (clickedItem.getCount() + cursor.getCount() <= org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(cursor)) {
                                                         // As of 1.5, this is result slots only
                                                         action = InventoryAction.PICKUP_ALL;
                                                     }
@@ -3395,7 +3395,7 @@ public class ServerGamePacketListenerImpl
             }
 
             boolean flag1 = packet.slotNum() >= 1 && packet.slotNum() <= 45;
-            boolean flag2 = itemStack.isEmpty() || itemStack.getCount() <= itemStack.getMaxStackSize();
+            boolean flag2 = itemStack.isEmpty() || itemStack.getCount() <= org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack); // Leaves - stackable shulker boxes
             if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(packet.slotNum()).getItem(), packet.itemStack()))) { // Insist on valid slot
                 // CraftBukkit start - Call click event
                 InventoryView inventory = this.player.inventoryMenu.getBukkitView();
diff --git a/net/minecraft/world/Container.java b/net/minecraft/world/Container.java
index 2d3721e311851c1801b090e99d4f9d0daf4e5f99..f779d27603e6d81435c061214a2db3a14a31c11e 100644
--- a/net/minecraft/world/Container.java
+++ b/net/minecraft/world/Container.java
@@ -30,6 +30,12 @@ public interface Container extends Clearable {
         return Math.min(this.getMaxStackSize(), stack.getMaxStackSize());
     }
 
+    // Leaves start - stackable shulker boxes
+    default int getMaxStackLeaves(ItemStack stack) {
+        return Math.min(this.getMaxStackSize(), org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack));
+    }
+    // Leaves end - stackable shulker boxes
+
     void setChanged();
 
     boolean stillValid(Player player);
diff --git a/net/minecraft/world/SimpleContainer.java b/net/minecraft/world/SimpleContainer.java
index 190190463086f2fcbe28f00fa2f23795bf11f279..6ee5ecc89e360ca30ed5f7f355ae943c5a6337ca 100644
--- a/net/minecraft/world/SimpleContainer.java
+++ b/net/minecraft/world/SimpleContainer.java
@@ -205,7 +205,7 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
     @Override
     public void setItem(int index, ItemStack stack) {
         this.items.set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack));
         this.setChanged();
     }
 
@@ -280,7 +280,7 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
     }
 
     private void moveItemsBetweenStacks(ItemStack stack, ItemStack other) {
-        int maxStackSize = this.getMaxStackSize(other);
+        int maxStackSize = this.getMaxStackLeaves(other); // Leaves - stackable shulker boxes
         int min = Math.min(stack.getCount(), maxStackSize - other.getCount());
         if (min > 0) {
             other.grow(min);
diff --git a/net/minecraft/world/entity/item/ItemEntity.java b/net/minecraft/world/entity/item/ItemEntity.java
index 52a7ed0d991758bad0dcedcb7f97fb15ac6c6d04..d2d258246e7f7332c0420077e33c05e222bda46d 100644
--- a/net/minecraft/world/entity/item/ItemEntity.java
+++ b/net/minecraft/world/entity/item/ItemEntity.java
@@ -274,10 +274,52 @@ public class ItemEntity extends Entity implements TraceableEntity {
 
     private boolean isMergable() {
         ItemStack item = this.getItem();
-        return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.despawnRate && item.getCount() < item.getMaxStackSize(); // Paper - Alternative item-despawn-rate
+        return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.despawnRate && item.getCount() < org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(item); // Paper - Alternative item-despawn-rate // Leaves - stackable shulker boxes
     }
 
+    // Leaves end - stackable shulker boxes
+    private boolean tryStackShulkerBoxes(ItemEntity other) {
+        ItemStack selfStack = this.getItem();
+        if (org.leavesmc.leaves.LeavesConfig.modify.shulkerBoxStackSize == 1 ||
+                !(selfStack.getItem() instanceof net.minecraft.world.item.BlockItem blockItem) ||
+                !(blockItem.getBlock() instanceof net.minecraft.world.level.block.ShulkerBoxBlock)
+        ) {
+            return false;
+        }
+
+        ItemStack otherStack = other.getItem();
+        if (selfStack.getItem() == otherStack.getItem()
+                && org.leavesmc.leaves.util.ShulkerBoxUtils.shulkerBoxNoItem(selfStack)
+                && org.leavesmc.leaves.util.ShulkerBoxUtils.shulkerBoxNoItem(otherStack)
+                && Objects.equals(selfStack.getComponents(), otherStack.getComponents()) // empty block entity tags are cleaned up when spawning
+                && selfStack.getCount() != org.leavesmc.leaves.LeavesConfig.modify.shulkerBoxStackSize) {
+            int amount = Math.min(otherStack.getCount(), org.leavesmc.leaves.LeavesConfig.modify.shulkerBoxStackSize - selfStack.getCount());
+
+            selfStack.grow(amount);
+            this.setItem(selfStack);
+
+            this.pickupDelay = Math.max(other.pickupDelay, this.pickupDelay);
+            this.age = Math.min(other.getAge(), this.age);
+
+            otherStack.shrink(amount);
+            if (otherStack.isEmpty()) {
+                other.discard();
+            }
+            else {
+                other.setItem(otherStack);
+            }
+            return true;
+        }
+        return false;
+    }
+    // Leaves end - stackable shulker boxes
+
     private void tryToMerge(ItemEntity itemEntity) {
+        // Leaves start - stackable shulker boxes
+        if (tryStackShulkerBoxes(itemEntity)) {
+            return;
+        }
+        // Leaves end - stackable shulker boxes
         ItemStack item = this.getItem();
         ItemStack item1 = itemEntity.getItem();
         if (Objects.equals(this.target, itemEntity.target) && areMergable(item, item1)) {
diff --git a/net/minecraft/world/entity/player/Inventory.java b/net/minecraft/world/entity/player/Inventory.java
index 839cbb67d3d38960d9114a4db5bab911b66a573c..9b628d553d3206a4881ed5e07fa6d2552b710cea 100644
--- a/net/minecraft/world/entity/player/Inventory.java
+++ b/net/minecraft/world/entity/player/Inventory.java
@@ -97,10 +97,12 @@ public class Inventory implements Container, Nameable {
     }
 
     private boolean hasRemainingSpaceForItem(ItemStack destination, ItemStack origin) {
+        // Leaves start - stackable shulker boxes
         return !destination.isEmpty()
-            && destination.isStackable()
-            && destination.getCount() < this.getMaxStackSize(destination)
+            && org.leavesmc.leaves.util.ShulkerBoxUtils.isStackable(destination)
+            && destination.getCount() < org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(destination)
             && ItemStack.isSameItemSameComponents(destination, origin); // Paper - check if itemstack is stackable first
+        // Leaves end - stackable shulker boxes
     }
 
     // CraftBukkit start - Watch method above! :D
@@ -113,7 +115,7 @@ public class Inventory implements Container, Nameable {
             }
 
             if (this.hasRemainingSpaceForItem(itemInSlot, itemStack)) {
-                remains -= (itemInSlot.getMaxStackSize() < this.getMaxStackSize() ? itemInSlot.getMaxStackSize() : this.getMaxStackSize()) - itemInSlot.getCount();
+                remains -= (org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemInSlot) < this.getMaxStackSize() ? org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemInSlot) : this.getMaxStackSize()) - itemInSlot.getCount(); // Leaves - stackable shulker boxes
             }
             if (remains <= 0) {
                 return itemStack.getCount();
@@ -122,7 +124,7 @@ public class Inventory implements Container, Nameable {
 
         ItemStack itemInOffhand = this.getItem(this.items.size() + this.armor.size());
         if (this.hasRemainingSpaceForItem(itemInOffhand, itemStack)) {
-            remains -= (itemInOffhand.getMaxStackSize() < this.getMaxStackSize() ? itemInOffhand.getMaxStackSize() : this.getMaxStackSize()) - itemInOffhand.getCount();
+            remains -= (org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemInOffhand) < this.getMaxStackSize() ? org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemInOffhand) : this.getMaxStackSize()) - itemInOffhand.getCount(); // Leaves - stackable shulker boxes
         }
         if (remains <= 0) {
             return itemStack.getCount();
@@ -252,7 +254,7 @@ public class Inventory implements Container, Nameable {
             this.setItem(slot, item);
         }
 
-        int i = this.getMaxStackSize(item) - item.getCount();
+        int i = this.getMaxStackLeaves(item) - item.getCount(); // Leaves - stackable shulker boxes
         int min = Math.min(count, i);
         if (min == 0) {
             return count;
@@ -359,7 +361,7 @@ public class Inventory implements Container, Nameable {
                 break;
             }
 
-            int i = stack.getMaxStackSize() - this.getItem(slotWithRemainingSpace).getCount();
+            int i = org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack) - this.getItem(slotWithRemainingSpace).getCount(); // Leaves - stackable shulker boxes
             if (this.add(slotWithRemainingSpace, stack.split(i)) && sendPacket && this.player instanceof ServerPlayer serverPlayer) {
                 serverPlayer.connection.send(this.createInventoryUpdatePacket(slotWithRemainingSpace));
             }
diff --git a/net/minecraft/world/entity/player/StackedItemContents.java b/net/minecraft/world/entity/player/StackedItemContents.java
index 83ccde54c625d40dc595e000c533f60aa929bd5a..69732e22bb8e90bfda83cd0a8c5f3d6d9cf24bd6 100644
--- a/net/minecraft/world/entity/player/StackedItemContents.java
+++ b/net/minecraft/world/entity/player/StackedItemContents.java
@@ -23,7 +23,7 @@ public class StackedItemContents {
     }
 
     public void accountStack(ItemStack stack) {
-        this.accountStack(stack, stack.getMaxStackSize());
+        this.accountStack(stack, org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack));
     }
 
     public void accountStack(ItemStack stack, int maxStackSize) {
diff --git a/net/minecraft/world/entity/vehicle/ContainerEntity.java b/net/minecraft/world/entity/vehicle/ContainerEntity.java
index c18aea2bb5ddddadbc858b253ff4c08d82178a18..6a24b442a21298ef3bdbcb76de9bdcf006890c5d 100644
--- a/net/minecraft/world/entity/vehicle/ContainerEntity.java
+++ b/net/minecraft/world/entity/vehicle/ContainerEntity.java
@@ -164,7 +164,7 @@ public interface ContainerEntity extends Container, MenuProvider {
     default void setChestVehicleItem(int slot, ItemStack stack) {
         this.unpackChestVehicleLootTable(null);
         this.getItemStacks().set(slot, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - stackable shulker boxes
     }
 
     default SlotAccess getChestVehicleSlot(final int index) {
diff --git a/net/minecraft/world/inventory/AbstractContainerMenu.java b/net/minecraft/world/inventory/AbstractContainerMenu.java
index b4721c4e81cc2ae989765d86bd51ebf0be41758c..a3cc05b929d9add6d076483a841db683dc78a8a5 100644
--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -427,7 +427,7 @@ public abstract class AbstractContainerMenu {
                             && (this.quickcraftType == 2 || carried1.getCount() >= this.quickcraftSlots.size())
                             && this.canDragTo(slot1)) {
                             int i2 = slot1.hasItem() ? slot1.getItem().getCount() : 0;
-                            int min = Math.min(itemStack.getMaxStackSize(), slot1.getMaxStackSize(itemStack));
+                            int min = Math.min(org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack), slot1.getMaxStackSize(itemStack)); // Leaves - stackable shulker boxes
                             int min1 = Math.min(getQuickCraftPlaceCount(this.quickcraftSlots, this.quickcraftType, itemStack) + i2, min);
                             count -= min1 - i2;
                             // slot1.setByPlayer(itemStack.copyWithCount(min1));
@@ -541,7 +541,7 @@ public abstract class AbstractContainerMenu {
                                 slot.setByPlayer(carried2);
                             }
                         } else if (ItemStack.isSameItemSameComponents(carried, carried2)) {
-                            Optional<ItemStack> optional1 = slot.tryRemove(carried.getCount(), carried2.getMaxStackSize() - carried2.getCount(), player);
+                            Optional<ItemStack> optional1 = slot.tryRemove(carried.getCount(), org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(carried2) - carried2.getCount(), player); // Leaves - stackable shulker boxes
                             optional1.ifPresent(stack -> {
                                 carried2.grow(stack.getCount());
                                 slot.onTake(player, stack);
@@ -603,7 +603,7 @@ public abstract class AbstractContainerMenu {
             Slot slot2 = this.slots.get(slotId);
             if (slot2.hasItem()) {
                 ItemStack itemStack = slot2.getItem();
-                this.setCarried(itemStack.copyWithCount(itemStack.getMaxStackSize()));
+                this.setCarried(itemStack.copyWithCount(org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack))); // Leaves - stackable shulker boxes
             }
         } else if (clickType == ClickType.THROW && this.getCarried().isEmpty() && slotId >= 0) {
             Slot slot2 = this.slots.get(slotId);
@@ -634,15 +634,15 @@ public abstract class AbstractContainerMenu {
                 int maxStackSize = button == 0 ? 1 : -1;
 
                 for (int i3 = 0; i3 < 2; i3++) {
-                    for (int i4 = count; i4 >= 0 && i4 < this.slots.size() && itemStack.getCount() < itemStack.getMaxStackSize(); i4 += maxStackSize) {
+                    for (int i4 = count; i4 >= 0 && i4 < this.slots.size() && itemStack.getCount() < org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack); i4 += maxStackSize) { // Leaves - stackable shulker boxes
                         Slot slot3 = this.slots.get(i4);
                         if (slot3.hasItem()
                             && canItemQuickReplace(slot3, itemStack, true)
                             && slot3.mayPickup(player)
                             && this.canTakeItemForPickAll(itemStack, slot3)) {
                             ItemStack item1 = slot3.getItem();
-                            if (i3 != 0 || item1.getCount() != item1.getMaxStackSize()) {
-                                ItemStack itemStack1 = slot3.safeTake(item1.getCount(), itemStack.getMaxStackSize() - itemStack.getCount(), player);
+                            if (i3 != 0 || item1.getCount() != org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(item1)) { // Leaves - stackable shulker boxes
+                                ItemStack itemStack1 = slot3.safeTake(item1.getCount(), org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack) - itemStack.getCount(), player); // Leaves - stackable shulker boxes
                                 itemStack.grow(itemStack1.getCount());
                             }
                         }
@@ -760,7 +760,7 @@ public abstract class AbstractContainerMenu {
             i = endIndex - 1;
         }
 
-        if (stack.isStackable()) {
+        if (org.leavesmc.leaves.util.ShulkerBoxUtils.isStackable(stack)) { // Leaves - stackable shulker boxes
             while (!stack.isEmpty() && (reverseDirection ? i >= startIndex : i < endIndex)) {
                 Slot slot = this.slots.get(i);
                 ItemStack item = slot.getItem();
@@ -861,7 +861,7 @@ public abstract class AbstractContainerMenu {
     public static boolean canItemQuickReplace(@Nullable Slot slot, ItemStack stack, boolean stackSizeMatters) {
         boolean flag = slot == null || !slot.hasItem();
         return !flag && ItemStack.isSameItemSameComponents(stack, slot.getItem())
-            ? slot.getItem().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= stack.getMaxStackSize()
+            ? slot.getItem().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack)
             : flag;
     }
 
@@ -869,7 +869,7 @@ public abstract class AbstractContainerMenu {
         return switch (type) {
             case 0 -> Mth.floor((float)stack.getCount() / slots.size());
             case 1 -> 1;
-            case 2 -> stack.getMaxStackSize();
+            case 2 -> org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack);
             default -> stack.getCount();
         };
     }
@@ -891,7 +891,7 @@ public abstract class AbstractContainerMenu {
             for (int i = 0; i < container.getContainerSize(); i++) {
                 ItemStack item = container.getItem(i);
                 if (!item.isEmpty()) {
-                    f += (float)item.getCount() / container.getMaxStackSize(item);
+                    f += (float)item.getCount() / container.getMaxStackLeaves(item);
                 }
             }
 
diff --git a/net/minecraft/world/inventory/MerchantContainer.java b/net/minecraft/world/inventory/MerchantContainer.java
index a1576c3be00bdb19d02d52658c4b1818ea5c32db..be2f047bf1daab82473105865cd95955d4661a2a 100644
--- a/net/minecraft/world/inventory/MerchantContainer.java
+++ b/net/minecraft/world/inventory/MerchantContainer.java
@@ -109,7 +109,7 @@ public class MerchantContainer implements Container {
     @Override
     public void setItem(int index, ItemStack stack) {
         this.itemStacks.set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - stackable shulker boxes
         if (this.isPaymentSlot(index)) {
             this.updateSellItem();
         }
diff --git a/net/minecraft/world/inventory/Slot.java b/net/minecraft/world/inventory/Slot.java
index 5ceb8964476b40db4511bec91ff13c4f522a1357..371bad86218971d6e031c6d74307b2ab0d460997 100644
--- a/net/minecraft/world/inventory/Slot.java
+++ b/net/minecraft/world/inventory/Slot.java
@@ -75,7 +75,7 @@ public class Slot {
     }
 
     public int getMaxStackSize(ItemStack stack) {
-        return Math.min(this.getMaxStackSize(), stack.getMaxStackSize());
+        return Math.min(this.getMaxStackSize(), org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack)); // Leaves - stackable shulker boxes
     }
 
     @Nullable
diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index 76f50437396f8f856381d0fbef52953ef7c263f6..1f9bf42ac798a820a23c236ae2ca9ec0af2e0638 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -151,16 +151,17 @@ public final class ItemStack implements DataComponentHolder {
             if (value.isEmpty() || value.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
                 buffer.writeVarInt(0);
             } else {
-                buffer.writeVarInt(io.papermc.paper.util.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.ItemObfuscationSession.currentSession(), value, value.getCount())); // Paper - potentially sanitize count
-                ITEM_STREAM_CODEC.encode(buffer, value.getItemHolder());
+                final ItemStack itemStack = org.leavesmc.leaves.util.ShulkerBoxUtils.correctItemStackMaxStackSize(value.copy());
+                buffer.writeVarInt(io.papermc.paper.util.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.ItemObfuscationSession.currentSession(), itemStack, itemStack.getCount())); // Paper - potentially sanitize count
+                ITEM_STREAM_CODEC.encode(buffer, itemStack.getItemHolder());
                 // Spigot start - filter
                 // value = value.copy();
                 // CraftItemStack.setItemMeta(value, CraftItemStack.getItemMeta(value)); // Paper - This is no longer with raw NBT being handled in metadata
                 // Paper start - adventure; conditionally render translatable components
                 boolean prev = net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
-                try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.ItemObfuscationSession.withContext(c -> c.itemStack(itemStack))) { // pass the itemstack as context to the obfuscation session
                     net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
-                DataComponentPatch.STREAM_CODEC.encode(buffer, value.components.asPatch());
+                DataComponentPatch.STREAM_CODEC.encode(buffer, itemStack.components.asPatch());
                 } finally {
                     net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prev);
                 }
@@ -199,7 +200,7 @@ public final class ItemStack implements DataComponentHolder {
     @Deprecated
     @Nullable
     private Item item;
-    PatchedDataComponentMap components;
+    public PatchedDataComponentMap components; // Leaves - stackable shulker boxes
     @Nullable
     private Entity entityRepresentation;
 
@@ -299,7 +300,7 @@ public final class ItemStack implements DataComponentHolder {
 
             for (ItemStack itemStack : itemContainerContents.nonEmptyItems()) {
                 int count = itemStack.getCount();
-                int maxStackSize = itemStack.getMaxStackSize();
+                int maxStackSize = org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack);
                 if (count > maxStackSize) {
                     return DataResult.error(() -> "Item stack with count of " + count + " was larger than maximum: " + maxStackSize);
                 }
diff --git a/net/minecraft/world/level/block/AbstractCauldronBlock.java b/net/minecraft/world/level/block/AbstractCauldronBlock.java
index 648d22cdfcf261494038d589f5a5e32704083076..47e480515715376f568b7cb7468edf2bff3d4307 100644
--- a/net/minecraft/world/level/block/AbstractCauldronBlock.java
+++ b/net/minecraft/world/level/block/AbstractCauldronBlock.java
@@ -58,9 +58,27 @@ public abstract class AbstractCauldronBlock extends Block {
         ItemStack stack, BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hitResult
     ) {
         CauldronInteraction cauldronInteraction = this.interactions.map().get(stack.getItem());
-        return cauldronInteraction.interact(state, level, pos, player, hand, stack, hitResult.getDirection()); // Paper - pass hit direction
+        return wrapInteractor(cauldronInteraction, state, level, pos, player, hand, stack, hitResult.getDirection()); // Paper - pass hit direction // Leaves - stackable shulker boxes
     }
 
+    // Leaves start - stackable shulker boxes
+    private InteractionResult wrapInteractor(CauldronInteraction cauldronBehavior, BlockState blockState, Level world, BlockPos blockPos, Player playerEntity, InteractionHand hand, ItemStack itemStack, net.minecraft.core.Direction hitDirection) {
+        int count = -1;
+        if (org.leavesmc.leaves.LeavesConfig.modify.shulkerBoxStackSize > 1 && itemStack.getItem() instanceof net.minecraft.world.item.BlockItem bi &&
+            bi.getBlock() instanceof ShulkerBoxBlock) {
+            count = itemStack.getCount();
+        }
+        InteractionResult result = cauldronBehavior.interact(blockState, world, blockPos, playerEntity, hand, itemStack, hitDirection);
+        if (count > 0 && result.consumesAction()) {
+            ItemStack current = playerEntity.getItemInHand(hand);
+            if (current.getItem() instanceof net.minecraft.world.item.BlockItem bi && bi.getBlock() instanceof ShulkerBoxBlock) {
+                current.setCount(count);
+            }
+        }
+        return result;
+    }
+    // Leaves end - stackable shulker boxes
+
     @Override
     protected VoxelShape getShape(BlockState state, BlockGetter level, BlockPos pos, CollisionContext context) {
         return SHAPE;
diff --git a/net/minecraft/world/level/block/CrafterBlock.java b/net/minecraft/world/level/block/CrafterBlock.java
index 5f5966278faf86ed9b28955c80ba845c0cb75595..1871962fbcdbb50ab6b3b552231ea469fd1f5471 100644
--- a/net/minecraft/world/level/block/CrafterBlock.java
+++ b/net/minecraft/world/level/block/CrafterBlock.java
@@ -200,7 +200,7 @@ public class CrafterBlock extends BaseEntityBlock {
         Direction direction = state.getValue(ORIENTATION).front();
         Container containerAt = HopperBlockEntity.getContainerAt(level, pos.relative(direction));
         ItemStack itemStack = stack.copy();
-        if (containerAt != null && (containerAt instanceof CrafterBlockEntity || stack.getCount() > containerAt.getMaxStackSize(stack))) {
+        if (containerAt != null && (containerAt instanceof CrafterBlockEntity || stack.getCount() > containerAt.getMaxStackLeaves(stack))) {
             // CraftBukkit start - InventoryMoveItemEvent
             org.bukkit.craftbukkit.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemStack);
 
diff --git a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 77e7188180cce9ef881de64b263c704b219b610a..2f5fa4310f475ecbb29e69c0461c7d3276f8536d 100644
--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -414,7 +414,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         ItemStack itemStack = this.items.get(index);
         boolean flag = !stack.isEmpty() && ItemStack.isSameItemSameComponents(itemStack, stack);
         this.items.set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - stackable shulker boxes
         if (index == 0 && !flag && this.level instanceof ServerLevel serverLevel) {
             this.cookingTotalTime = getTotalCookTime(serverLevel, this, this.recipeType, this.cookSpeedMultiplier); // Paper - cook speed multiplier API
             this.cookingTimer = 0;
diff --git a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
index 26db603ed681a6c302596627d4dd5bf8a9bafc4e..9fcb70b5bf1912a5499aa7daeaa089adbe60cc55 100644
--- a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -146,7 +146,7 @@ public abstract class BaseContainerBlockEntity extends BlockEntity implements Co
     @Override
     public void setItem(int slot, ItemStack stack) {
         this.getItems().set(slot, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - stackable shulker boxes
         this.setChanged();
     }
 
diff --git a/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java b/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
index 094682151cc2b79a6875cacf448f9cedd43c61e8..e080d99d87aebfe41f23cc2627b5cce39fcacd15 100644
--- a/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
@@ -154,7 +154,7 @@ public class ChiseledBookShelfBlockEntity extends BlockEntity implements Contain
     public boolean canTakeItem(Container target, int slot, ItemStack stack) {
         return target.hasAnyMatching(
             itemStack -> itemStack.isEmpty()
-                || ItemStack.isSameItemSameComponents(stack, itemStack) && itemStack.getCount() + stack.getCount() <= target.getMaxStackSize(itemStack)
+                || ItemStack.isSameItemSameComponents(stack, itemStack) && itemStack.getCount() + stack.getCount() <= target.getMaxStackLeaves(itemStack)
         );
     }
 
diff --git a/net/minecraft/world/level/block/entity/DispenserBlockEntity.java b/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
index 3c62662e626d3f0e309d2a973c73e6ac1055cae3..9698eda0083866c5886fa7c8e20c4d96a78400ba 100644
--- a/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -75,7 +75,7 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
     }
 
     public ItemStack insertItem(ItemStack stack) {
-        int maxStackSize = this.getMaxStackSize(stack);
+        int maxStackSize = this.getMaxStackLeaves(stack);
 
         for (int i = 0; i < this.items.size(); i++) {
             ItemStack itemStack = this.items.get(i);
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 42a29e700d2549de7cd905c373212e9757bcfcf1..2db26e4e60703f581d2e274f6e3e843705ce88fe 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -109,7 +109,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public void setItem(int index, ItemStack stack) {
         this.unpackLootTable(null);
         this.getItems().set(index, stack);
-        stack.limitSize(this.getMaxStackSize(stack));
+        stack.limitSize(this.getMaxStackLeaves(stack)); // Leaves - stackable shulker boxes
     }
 
     @Override
@@ -176,7 +176,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
             empty = false;
 
-            if (stack.getCount() != stack.getMaxStackSize()) {
+            if (stack.getCount() != org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack)) {
                 // can't be full or empty
                 return HOPPER_HAS_ITEMS;
             }
@@ -219,7 +219,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     private boolean inventoryFull() {
         for (ItemStack itemStack : this.items) {
-            if (itemStack.isEmpty() || itemStack.getCount() != itemStack.getMaxStackSize()) {
+            if (itemStack.isEmpty() || itemStack.getCount() != org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack)) {
                 return false;
             }
         }
@@ -423,7 +423,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         }
         return true;
     }
-    private static final java.util.function.BiPredicate<ItemStack, Integer> STACK_SIZE_TEST = (itemStack, i) -> itemStack.getCount() >= itemStack.getMaxStackSize();
+    private static final java.util.function.BiPredicate<ItemStack, Integer> STACK_SIZE_TEST = (itemStack, i) -> itemStack.getCount() >= org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(itemStack);
     private static final java.util.function.BiPredicate<ItemStack, Integer> IS_EMPTY_TEST = (itemStack, i) -> itemStack.isEmpty();
     // Paper end - Perf: Optimize Hoppers
 
@@ -530,7 +530,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
         for (int i : slots) {
             ItemStack item = container.getItem(i);
-            if (item.getCount() < item.getMaxStackSize()) {
+            if (item.getCount() < org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(item)) {
                 return false;
             }
         }
@@ -688,9 +688,9 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             if (item.isEmpty()) {
                 // Spigot start - SPIGOT-6693, SimpleContainer#setItem
                 ItemStack leftover = ItemStack.EMPTY; // Paper - Make hoppers respect inventory max stack size
-                if (!stack.isEmpty() && stack.getCount() > destination.getMaxStackSize()) {
+                if (!stack.isEmpty() && (stack.getCount() > destination.getMaxStackSize() || stack.getCount() > org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack))) { // Leaves - stackable shulker boxes
                     leftover = stack; // Paper - Make hoppers respect inventory max stack size
-                    stack = stack.split(destination.getMaxStackSize());
+                    stack = stack.split(Math.min(destination.getMaxStackSize(), org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack))); // Leaves - stackable shulker boxes
                 }
                 // Spigot end
                 ignoreBlockEntityUpdates = true; // Paper - Perf: Optimize Hoppers
@@ -699,7 +699,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                 stack = leftover; // Paper - Make hoppers respect inventory max stack size
                 flag = true;
             } else if (canMergeItems(item, stack)) {
-                int i = Math.min(stack.getMaxStackSize(), destination.getMaxStackSize()) - item.getCount(); // Paper - Make hoppers respect inventory max stack size
+                int i = Math.min(org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack), destination.getMaxStackSize()) - item.getCount(); // Paper - Make hoppers respect inventory max stack size
                 int min = Math.min(stack.getCount(), i);
                 stack.shrink(min);
                 item.grow(min);
@@ -828,7 +828,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean canMergeItems(ItemStack stack1, ItemStack stack2) {
-        return stack1.getCount() < stack1.getMaxStackSize() && ItemStack.isSameItemSameComponents(stack1, stack2); // Paper - Perf: Optimize Hoppers; used to return true for full itemstacks?!
+        return stack1.getCount() < org.leavesmc.leaves.util.ShulkerBoxUtils.getItemStackMaxCount(stack1) && ItemStack.isSameItemSameComponents(stack1, stack2); // Paper - Perf: Optimize Hoppers; used to return true for full itemstacks?!
     }
 
     @Override
