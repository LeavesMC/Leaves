From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Fri, 17 Mar 2023 15:57:08 +0800
Subject: [PATCH] Catch update suppression crash


diff --git a/net/minecraft/network/PacketProcessor.java b/net/minecraft/network/PacketProcessor.java
index 3e4241976fdfe65bc0aae90a9097770745c0ddf1..8e3e9a8aaee8fd4fbe986f9f079945179017c4f3 100644
--- a/net/minecraft/network/PacketProcessor.java
+++ b/net/minecraft/network/PacketProcessor.java
@@ -97,7 +97,20 @@ public class PacketProcessor implements AutoCloseable {
             if (this.listener.shouldHandleMessage(this.packet)) {
                 try {
                     this.packet.handle(this.listener);
+                    // Leaves start - update suppression crash fix
+                } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                    if (this.listener instanceof net.minecraft.server.network.ServerGamePacketListenerImpl gamePacketListener) {
+                        exception.providePlayer(gamePacketListener.player);
+                    }
+                    exception.consume();
                 } catch (Exception var3) {
+                    if (var3.getCause() instanceof org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                        if (this.listener instanceof net.minecraft.server.network.ServerGamePacketListenerImpl gamePacketListener) {
+                            exception.providePlayer(gamePacketListener.player);
+                        }
+                        exception.consume();
+                    }
+                    // Leaves end - update suppression crash fix
                     if (var3 instanceof ReportedException reportedException && reportedException.getCause() instanceof OutOfMemoryError) {
                         throw PacketUtils.makeReportedException(var3, this.packet, this.listener);
                     }
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 9c90374a34b749fd69a8e82cae8109e65222e1b3..0dbff3296d56822fd94912d1ac5c05e3d6558299 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1789,7 +1789,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             try {
                 serverLevel.tick(hasTimeLeft);
+            // Leaves start - update suppression crash fix
+            } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                exception.provideLevel(serverLevel);
+                exception.consume();
             } catch (Throwable var7) {
+                if (var7.getCause() instanceof org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                    exception.provideLevel(serverLevel);
+                    exception.consume();
+                }
+                // Leaves end - update suppression crash fix
                 CrashReport crashReport = CrashReport.forThrowable(var7, "Exception ticking world");
                 serverLevel.fillReportDetails(crashReport);
                 throw new ReportedException(crashReport);
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 2b7e9b5836d717bfcb34816ef70a6e67c8e3a1f1..90822a9976a6829fbd4159aef0f2075aaf2f54f7 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -842,6 +842,11 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                                     if (org.leavesmc.leaves.LeavesConfig.performance.remove.tickGuardLambda) {
                                         try {
                                             this.tickNonPassenger(entity); // Leaves - changed
+                                        // Leaves start - update suppression crash fix - for dragon dupe
+                                        } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                                            exception.provideLevel(this);
+                                            exception.consume();
+                                        // Leaves end - update suppression crash fix - for dragon dupe
                                         } catch (Throwable throwable) {
                                             if (throwable instanceof ThreadDeath) throw throwable; // Paper
                                             // Paper start - Prevent block entity and entity crashes
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 033ea42f807ab1c4373a351bd7662488a959a18c..93dc94ec1e4e93af7ceea21fb01d35ae65b40b92 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -901,6 +901,12 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 ((org.bukkit.craftbukkit.CraftWorldBorder) this.getBukkitEntity().getWorldBorder()).getHandle().tick();
             }
             // CraftBukkit end
+        // Leaves start - update suppression crash fix
+        } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+            exception.providePlayer(this);
+            exception.provideLevel(this.level());
+            exception.consume();
+        // Leaves start - update suppression crash fix
         } catch (Throwable var4) {
             CrashReport crashReport = CrashReport.forThrowable(var4, "Ticking player");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Player being ticked");
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index ee4bc2a82d577012a9431e558643bb88c571df10..14483297df08ee275d32ab8fab5f9e042ff95be8 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1364,9 +1364,19 @@ public abstract class Entity implements SyncedDataHolder, DebugValueSource, Name
                     this.walkingStepSound(pos, state);
                 }
 
+                // Leaves start - update suppression crash fix
                 if (broadcastGameEvent) {
-                    this.level().gameEvent(GameEvent.STEP, this.position(), GameEvent.Context.of(this, state));
+                    try {
+                        this.level().gameEvent(net.minecraft.world.level.gameevent.GameEvent.STEP, this.position(), net.minecraft.world.level.gameevent.GameEvent.Context.of(this, state));
+                    } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                        exception.provideBlock(level, pos, state.getBlock());
+                        if (this instanceof net.minecraft.server.level.ServerPlayer player) {
+                            exception.providePlayer(player);
+                        }
+                        exception.consume();
+                    }
                 }
+                // Leaves end - update suppression crash fix
 
                 return true;
             } else {
diff --git a/net/minecraft/world/level/block/ShulkerBoxBlock.java b/net/minecraft/world/level/block/ShulkerBoxBlock.java
index f3bc957110ef60ad5e4384b934b60dccea76d5a7..ffca65d881ee6f4bde8e579d012ee5c1a11a0c2d 100644
--- a/net/minecraft/world/level/block/ShulkerBoxBlock.java
+++ b/net/minecraft/world/level/block/ShulkerBoxBlock.java
@@ -183,7 +183,17 @@ public class ShulkerBoxBlock extends BaseEntityBlock {
 
     @Override
     protected int getAnalogOutputSignal(BlockState state, Level level, BlockPos pos, Direction direction) {
-        return AbstractContainerMenu.getRedstoneSignalFromBlockEntity(level.getBlockEntity(pos));
+        // Leaves start - update suppression crash fix
+        try {
+            return AbstractContainerMenu.getRedstoneSignalFromBlockEntity(level.getBlockEntity(pos));
+        } catch (ClassCastException ex) {
+            if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+                throw new org.leavesmc.leaves.util.UpdateSuppressionException(pos, null, this, null, ex);
+            } else {
+                throw ex;
+            }
+        }
+        // Leaves end - update suppression crash fix
     }
 
     public static Block getBlockByColor(@Nullable DyeColor color) {
diff --git a/net/minecraft/world/level/block/state/StateHolder.java b/net/minecraft/world/level/block/state/StateHolder.java
index 040919c61ed29b3eda73b5d0f8ed905011e969a4..22dae9cf15fafda4b398025d85bad3e2a5965066 100644
--- a/net/minecraft/world/level/block/state/StateHolder.java
+++ b/net/minecraft/world/level/block/state/StateHolder.java
@@ -104,7 +104,16 @@ public abstract class StateHolder<O, S> implements ca.spottedleaf.moonrise.patch
         if (ret != null) {
             return ret;
         }
-        throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
+        // Leaves start - update suppression crash fix
+        IllegalArgumentException iae = new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
+        if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+            org.leavesmc.leaves.util.UpdateSuppressionException exception = new org.leavesmc.leaves.util.UpdateSuppressionException(null, null, null, null, iae);
+            if (exception.getStackTrace()[1].getClassName().startsWith("net.minecraft")) {
+                throw exception;
+            }
+        }
+        throw iae;
+        // Leaves end - update suppression crash fix
         // Paper end - optimise blockstate property access
     }
 
diff --git a/net/minecraft/world/level/chunk/LevelChunk.java b/net/minecraft/world/level/chunk/LevelChunk.java
index 90287336da43a8eefd5f154c00fba6ee90eda211..e96a7693eb0d94888a3b1db680378374e7aebb91 100644
--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -380,7 +380,7 @@ public class LevelChunk extends ChunkAccess implements DebugValueSource, ca.spot
             if (blockState == state) {
                 return null;
             } else {
-                Block block = state.getBlock();
+                Block block = state.getBlock(); try { // Leaves start - update suppression crash fix
                 this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING).update(i, y, i2, state);
                 this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).update(i, y, i2, state);
                 this.heightmaps.get(Heightmap.Types.OCEAN_FLOOR).update(i, y, i2, state);
@@ -452,6 +452,7 @@ public class LevelChunk extends ChunkAccess implements DebugValueSource, ca.spot
                     this.markUnsaved();
                     return blockState;
                 }
+                } catch (org.leavesmc.leaves.util.UpdateSuppressionException e) { e.provideBlock(level, pos, block); throw e; } // Leaves - update suppression crash fix
             }
         }
     }
diff --git a/net/minecraft/world/level/redstone/NeighborUpdater.java b/net/minecraft/world/level/redstone/NeighborUpdater.java
index 332b33a004ab11150cca0cc2cefc26d0286648f5..8942aa2ca4796c7c36c0955141627ea905e0ec64 100644
--- a/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -60,9 +60,22 @@ public interface NeighborUpdater {
             state.handleNeighborChanged(level, pos, neighborBlock, orientation, movedByPiston);
             // Spigot start
         } catch (StackOverflowError ex) {
+            // Leaves start - update suppression crash fix
+            if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+                throw new org.leavesmc.leaves.util.UpdateSuppressionException(pos, level, neighborBlock, null, ex);
+            }
             level.lastPhysicsProblem = pos.immutable();
             // Spigot end
         } catch (Throwable var9) {
+            if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+                if (var9 instanceof org.leavesmc.leaves.util.UpdateSuppressionException ue) {
+                    ue.provideBlock(level, pos, neighborBlock);
+                    throw ue;
+                } else {
+                    throw new org.leavesmc.leaves.util.UpdateSuppressionException(pos, level, neighborBlock, null, var9);
+                }
+            }
+            // Leaves end - update suppression crash fix
             CrashReport crashReport = CrashReport.forThrowable(var9, "Exception while updating neighbours");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Block being updated");
             crashReportCategory.setDetail(
