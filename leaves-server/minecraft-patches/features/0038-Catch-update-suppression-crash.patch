From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Fri, 17 Mar 2023 15:57:08 +0800
Subject: [PATCH] Catch update suppression crash


diff --git a/net/minecraft/network/protocol/PacketUtils.java b/net/minecraft/network/protocol/PacketUtils.java
index 4535858701b2bb232b9d2feb2af6551526232ddc..03e70445dfe14c119284f7c301127075c009e915 100644
--- a/net/minecraft/network/protocol/PacketUtils.java
+++ b/net/minecraft/network/protocol/PacketUtils.java
@@ -27,7 +27,20 @@ public class PacketUtils {
                 if (processor.shouldHandleMessage(packet)) {
                     try {
                         packet.handle(processor);
+                    // Leaves start - update suppression crash fix
+                    } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                        if (processor instanceof net.minecraft.server.network.ServerGamePacketListenerImpl gamePacketListener) {
+                            exception.providePlayer(gamePacketListener.player);
+                        }
+                        exception.consume();
                     } catch (Exception var4) {
+                        if (var4.getCause() instanceof org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                            if (processor instanceof net.minecraft.server.network.ServerGamePacketListenerImpl gamePacketListener) {
+                                exception.providePlayer(gamePacketListener.player);
+                            }
+                            exception.consume();
+                        }
+                        // Leaves end - update suppression crash fix
                         if (var4 instanceof ReportedException reportedException && reportedException.getCause() instanceof OutOfMemoryError) {
                             throw makeReportedException(var4, packet, processor);
                         }
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 4cc0bb9c612986934bf44f933aa402b3787394ba..2545c7ebbe4bab45ea22d3843d42c7e55941387e 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1726,7 +1726,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             try {
                 serverLevel.tick(hasTimeLeft);
+            // Leaves start - update suppression crash fix
+            } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                exception.provideLevel(serverLevel);
+                exception.consume();
             } catch (Throwable var7) {
+                if (var7.getCause() instanceof org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                    exception.provideLevel(serverLevel);
+                    exception.consume();
+                }
+                // Leaves end - update suppression crash fix
                 CrashReport crashReport = CrashReport.forThrowable(var7, "Exception ticking world");
                 serverLevel.fillReportDetails(crashReport);
                 throw new ReportedException(crashReport);
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index ed05aaa76e1e34ca82fcc7cfb73f371a11600eee..400cb6f7fb05d4e69a7c5bfb960480eef13f15c5 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -814,6 +814,11 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                                     if (org.leavesmc.leaves.LeavesConfig.performance.remove.tickGuardLambda) {
                                         try {
                                             this.tickNonPassenger(entity); // Leaves - changed
+                                        // Leaves start - update suppression crash fix - for dragon dupe
+                                        } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                                            exception.provideLevel(this);
+                                            exception.consume();
+                                        // Leaves end - update suppression crash fix - for dragon dupe
                                         } catch (Throwable throwable) {
                                             if (throwable instanceof ThreadDeath) throw throwable; // Paper
                                             // Paper start - Prevent block entity and entity crashes
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 895cee538086e0494eb0f57c6e6b32ccd43e72e7..e355939e153c05f9434482c4713743755b280d69 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -905,6 +905,12 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 ((org.bukkit.craftbukkit.CraftWorldBorder) this.getBukkitEntity().getWorldBorder()).getHandle().tick();
             }
             // CraftBukkit end
+        // Leaves start - update suppression crash fix
+        } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+            exception.providePlayer(this);
+            exception.provideLevel(this.level());
+            exception.consume();
+        // Leaves start - update suppression crash fix
         } catch (Throwable var4) {
             CrashReport crashReport = CrashReport.forThrowable(var4, "Ticking player");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Player being ticked");
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index d06e5719e62b500432bb6fcb60d6049b8379c17d..df01a171a8073b6a7ef16248bd09b4c902227887 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1351,9 +1351,19 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     this.walkingStepSound(pos, state);
                 }
 
+                // Leaves start - update suppression crash fix
                 if (broadcastGameEvent) {
-                    this.level().gameEvent(GameEvent.STEP, this.position(), GameEvent.Context.of(this, state));
+                    try {
+                        this.level().gameEvent(net.minecraft.world.level.gameevent.GameEvent.STEP, this.position(), net.minecraft.world.level.gameevent.GameEvent.Context.of(this, state));
+                    } catch (org.leavesmc.leaves.util.UpdateSuppressionException exception) {
+                        exception.provideBlock(level, pos, state.getBlock());
+                        if (this instanceof net.minecraft.server.level.ServerPlayer player) {
+                            exception.providePlayer(player);
+                        }
+                        exception.consume();
+                    }
                 }
+                // Leaves end - update suppression crash fix
 
                 return true;
             } else {
diff --git a/net/minecraft/world/level/block/ShulkerBoxBlock.java b/net/minecraft/world/level/block/ShulkerBoxBlock.java
index 49bac7af90b0a7c490141be6357563447783c6ca..787a4226789b0e6d35ef1a36601655b0a8666b6f 100644
--- a/net/minecraft/world/level/block/ShulkerBoxBlock.java
+++ b/net/minecraft/world/level/block/ShulkerBoxBlock.java
@@ -183,7 +183,17 @@ public class ShulkerBoxBlock extends BaseEntityBlock {
 
     @Override
     protected int getAnalogOutputSignal(BlockState blockState, Level level, BlockPos pos) {
-        return AbstractContainerMenu.getRedstoneSignalFromBlockEntity(level.getBlockEntity(pos));
+        // Leaves start - update suppression crash fix
+        try {
+            return AbstractContainerMenu.getRedstoneSignalFromBlockEntity(level.getBlockEntity(pos));
+        } catch (ClassCastException ex) {
+            if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+                throw new org.leavesmc.leaves.util.UpdateSuppressionException(pos, null, this, null, ex);
+            } else {
+                throw ex;
+            }
+        }
+        // Leaves end - update suppression crash fix
     }
 
     public static Block getBlockByColor(@Nullable DyeColor color) {
diff --git a/net/minecraft/world/level/block/state/StateHolder.java b/net/minecraft/world/level/block/state/StateHolder.java
index 9b9842462b210b0407279ee8a8e9ccecf3ead005..ba9c8a677c1759e75392344df7877c5fcc9b9910 100644
--- a/net/minecraft/world/level/block/state/StateHolder.java
+++ b/net/minecraft/world/level/block/state/StateHolder.java
@@ -104,7 +104,16 @@ public abstract class StateHolder<O, S> implements ca.spottedleaf.moonrise.patch
         if (ret != null) {
             return ret;
         }
-        throw new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
+        // Leaves start - update suppression crash fix
+        IllegalArgumentException iae = new IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
+        if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+            org.leavesmc.leaves.util.UpdateSuppressionException exception = new org.leavesmc.leaves.util.UpdateSuppressionException(null, null, null, null, iae);
+            if (exception.getStackTrace()[1].getClassName().startsWith("net.minecraft")) {
+                throw exception;
+            }
+        }
+        throw iae;
+        // Leaves end - update suppression crash fix
         // Paper end - optimise blockstate property access
     }
 
diff --git a/net/minecraft/world/level/chunk/LevelChunk.java b/net/minecraft/world/level/chunk/LevelChunk.java
index f24db919989bc2e5768e18b4fda68c38d6cde7e0..0e22116fefcbdbf2049b7ec285b35fd03c723dc5 100644
--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -373,7 +373,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
             if (blockState == state) {
                 return null;
             } else {
-                Block block = state.getBlock();
+                Block block = state.getBlock(); try { // Leaves start - update suppression crash fix
                 this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING).update(i, y, i2, state);
                 this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).update(i, y, i2, state);
                 this.heightmaps.get(Heightmap.Types.OCEAN_FLOOR).update(i, y, i2, state);
@@ -445,6 +445,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
                     this.markUnsaved();
                     return blockState;
                 }
+                } catch (org.leavesmc.leaves.util.UpdateSuppressionException e) { e.provideBlock(level, pos, block); throw e; } // Leaves - update suppression crash fix
             }
         }
     }
diff --git a/net/minecraft/world/level/redstone/NeighborUpdater.java b/net/minecraft/world/level/redstone/NeighborUpdater.java
index 332b33a004ab11150cca0cc2cefc26d0286648f5..8942aa2ca4796c7c36c0955141627ea905e0ec64 100644
--- a/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -60,9 +60,22 @@ public interface NeighborUpdater {
             state.handleNeighborChanged(level, pos, neighborBlock, orientation, movedByPiston);
             // Spigot start
         } catch (StackOverflowError ex) {
+            // Leaves start - update suppression crash fix
+            if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+                throw new org.leavesmc.leaves.util.UpdateSuppressionException(pos, level, neighborBlock, null, ex);
+            }
             level.lastPhysicsProblem = pos.immutable();
             // Spigot end
         } catch (Throwable var9) {
+            if (org.leavesmc.leaves.LeavesConfig.modify.updateSuppressionCrashFix) {
+                if (var9 instanceof org.leavesmc.leaves.util.UpdateSuppressionException ue) {
+                    ue.provideBlock(level, pos, neighborBlock);
+                    throw ue;
+                } else {
+                    throw new org.leavesmc.leaves.util.UpdateSuppressionException(pos, level, neighborBlock, null, var9);
+                }
+            }
+            // Leaves end - update suppression crash fix
             CrashReport crashReport = CrashReport.forThrowable(var9, "Exception while updating neighbours");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Block being updated");
             crashReportCategory.setDetail(
