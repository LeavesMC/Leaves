From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Tue, 4 Feb 2025 19:45:19 +0800
Subject: [PATCH] Replay Mod API

This patch is Powered by ReplayMod(https://github.com/ReplayMod)

diff --git a/net/minecraft/commands/CommandSourceStack.java b/net/minecraft/commands/CommandSourceStack.java
index 6ead209287ab021b8245fa5c3b7f18ca7d9c66b3..cc0213907d1291e31261e923c74bdeaae2765e2e 100644
--- a/net/minecraft/commands/CommandSourceStack.java
+++ b/net/minecraft/commands/CommandSourceStack.java
@@ -580,7 +580,7 @@ public class CommandSourceStack implements ExecutionCommandSource<CommandSourceS
 
     @Override
     public Collection<String> getOnlinePlayerNames() {
-        return this.entity instanceof ServerPlayer sourcePlayer && !sourcePlayer.getBukkitEntity().hasPermission("paper.bypass-visibility.tab-completion") ? this.getServer().getPlayerList().getPlayers().stream().filter(serverPlayer -> sourcePlayer.getBukkitEntity().canSee(serverPlayer.getBukkitEntity())).map(serverPlayer -> serverPlayer.getGameProfile().name()).toList() : Lists.newArrayList(this.server.getPlayerNames()); // Paper - Make CommandSourceStack respect hidden players
+        return this.entity instanceof ServerPlayer sourcePlayer && !(sourcePlayer instanceof org.leavesmc.leaves.replay.ServerPhotographer) && !sourcePlayer.getBukkitEntity().hasPermission("paper.bypass-visibility.tab-completion") ? this.getServer().getPlayerList().getPlayers().stream().filter(serverPlayer -> sourcePlayer.getBukkitEntity().canSee(serverPlayer.getBukkitEntity())).map(serverPlayer -> serverPlayer.getGameProfile().name()).toList() : Lists.newArrayList(this.server.getPlayerNames()); // Paper - Make CommandSourceStack respect hidden players // Leaves - only real player
     }
 
     @Override
diff --git a/net/minecraft/commands/arguments/selector/EntitySelector.java b/net/minecraft/commands/arguments/selector/EntitySelector.java
index d438e31a082b675d7eb0eead7067a0b92363a9f9..c08f34bc17bec9f73c377b45389a77558f53d2a2 100644
--- a/net/minecraft/commands/arguments/selector/EntitySelector.java
+++ b/net/minecraft/commands/arguments/selector/EntitySelector.java
@@ -129,11 +129,12 @@ public class EntitySelector {
             return this.findPlayers(source);
         } else if (this.playerName != null) {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayerByName(this.playerName);
+            playerByName = playerByName instanceof org.leavesmc.leaves.replay.ServerPhotographer ? null : playerByName; // Leaves - skip photographer
             return playerByName == null ? List.of() : List.of(playerByName);
         } else if (this.entityUUID != null) {
             for (ServerLevel serverLevel : source.getServer().getAllLevels()) {
                 Entity entity = serverLevel.getEntity(this.entityUUID);
-                if (entity != null) {
+                if (entity != null && !(entity instanceof org.leavesmc.leaves.replay.ServerPhotographer)) {
                     if (entity.getType().isEnabled(source.enabledFeatures())) {
                         return List.of(entity);
                     }
@@ -147,7 +148,7 @@ public class EntitySelector {
             AABB absoluteAabb = this.getAbsoluteAabb(vec3);
             if (this.currentEntity) {
                 Predicate<Entity> predicate = this.getPredicate(vec3, absoluteAabb, null);
-                return source.getEntity() != null && predicate.test(source.getEntity()) ? List.of(source.getEntity()) : List.of();
+                return source.getEntity() != null && !(source.getEntity() instanceof org.leavesmc.leaves.replay.ServerPhotographer) && predicate.test(source.getEntity()) ? List.of(source.getEntity()) : List.of(); // Leaves - skip photographer
             } else {
                 Predicate<Entity> predicate = this.getPredicate(vec3, absoluteAabb, source.enabledFeatures());
                 List<Entity> list = new ObjectArrayList<>();
@@ -158,6 +159,7 @@ public class EntitySelector {
                         this.addEntities(list, serverLevel1, absoluteAabb, predicate);
                     }
                 }
+                list.removeIf(entity -> entity instanceof org.leavesmc.leaves.replay.ServerPhotographer); // Leaves - skip photographer
 
                 return this.sortAndLimit(vec3, list);
             }
@@ -193,9 +195,11 @@ public class EntitySelector {
         this.checkPermissions(source);
         if (this.playerName != null) {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayerByName(this.playerName);
+            playerByName = playerByName instanceof org.leavesmc.leaves.replay.ServerPhotographer ? null : playerByName; // Leaves - skip photographer
             return playerByName == null ? List.of() : List.of(playerByName);
         } else if (this.entityUUID != null) {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayer(this.entityUUID);
+            playerByName = playerByName instanceof org.leavesmc.leaves.replay.ServerPhotographer ? null : playerByName; // Leaves - skip photographer
             return playerByName == null ? List.of() : List.of(playerByName);
         } else {
             Vec3 vec3 = this.position.apply(source.getPosition());
@@ -207,11 +211,11 @@ public class EntitySelector {
                 int resultLimit = this.getResultLimit();
                 List<ServerPlayer> players;
                 if (this.isWorldLimited()) {
-                    players = source.getLevel().getPlayers(predicate, resultLimit);
+                    players = source.getLevel().getPlayers((player -> !(player instanceof org.leavesmc.leaves.replay.ServerPhotographer) && predicate.test(player)), resultLimit); // Leaves - skip photographer
                 } else {
                     players = new ObjectArrayList<>();
 
-                    for (ServerPlayer serverPlayer1 : source.getServer().getPlayerList().getPlayers()) {
+                    for (ServerPlayer serverPlayer1 : source.getServer().getPlayerList().realPlayers) { // Leaves - only real players
                         if (predicate.test(serverPlayer1)) {
                             players.add(serverPlayer1);
                             if (players.size() >= resultLimit) {
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 95babe9f54e44f2c0809d95e7bd7273fcd33b379..273d537bae30ef9f79c6a1eda910b84997415a3f 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1575,7 +1575,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     private ServerStatus.Players buildPlayerStatus() {
-        List<ServerPlayer> players = this.playerList.getPlayers();
+        List<ServerPlayer> players = this.playerList.realPlayers; // Leaves - only real player
         int maxPlayers = this.getMaxPlayers();
         if (this.hidesOnlinePlayers()) {
             return new ServerStatus.Players(maxPlayers, players.size(), List.of());
@@ -1807,7 +1807,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @Override
     public int getPlayerCount() {
-        return this.playerList.getPlayerCount();
+        return this.playerList.realPlayers.size(); // Leaves - only real player
     }
 
     public String[] getPlayerNames() {
@@ -2031,7 +2031,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         } else {
             int i = 0;
 
-            for (ServerPlayer serverPlayer : this.getPlayerList().getPlayers()) {
+            for (ServerPlayer serverPlayer : this.getPlayerList().realPlayers) { // Leaves - only real player
                 // Paper start - Expand PlayerGameModeChangeEvent
                 org.bukkit.event.player.PlayerGameModeChangeEvent event = serverPlayer.setGameMode(gameMode, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.DEFAULT_GAMEMODE, null);
                 if (event == null || event.isCancelled()) {
@@ -2199,7 +2199,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     if (Thread.currentThread() != this.serverThread) return; // Paper
                     // Paper start - we don't need to save everything, just advancements
                     // this.getPlayerList().saveAll();
-                    for (final ServerPlayer player : this.getPlayerList().getPlayers()) {
+                    for (final ServerPlayer player : this.getPlayerList().realPlayers) { // Leaves - only real players
                         player.getAdvancements().save();
                     }
                     // Paper end - we don't need to save everything, just advancements
@@ -2337,7 +2337,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             PlayerList playerList = this.getPlayerList();
             UserWhiteList whiteList = playerList.getWhiteList();
 
-            for (ServerPlayer serverPlayer : Lists.newArrayList(playerList.getPlayers())) {
+            for (ServerPlayer serverPlayer : Lists.newArrayList(playerList.realPlayers)) { // Leaves - only real player
                 if (!whiteList.isWhiteListed(serverPlayer.nameAndId()) && !this.getPlayerList().isOp(serverPlayer.nameAndId())) { // Paper - Fix kicking ops when whitelist is reloaded (MC-171420)
                     serverPlayer.connection.disconnect(net.kyori.adventure.text.Component.text(org.spigotmc.SpigotConfig.whitelistMessage), org.bukkit.event.player.PlayerKickEvent.Cause.WHITELIST); // Paper - use configurable message & kick event cause
                 }
diff --git a/net/minecraft/server/PlayerAdvancements.java b/net/minecraft/server/PlayerAdvancements.java
index a14401edec04964e6c596c16ba58643b835ef9c1..924829d46f789752aab52c0a51f4d0925710eadf 100644
--- a/net/minecraft/server/PlayerAdvancements.java
+++ b/net/minecraft/server/PlayerAdvancements.java
@@ -173,7 +173,7 @@ public class PlayerAdvancements {
         }
         // Leaves end - spectator don't get advancement
         // Leaves start - bot can't get advancement
-        if (player instanceof org.leavesmc.leaves.bot.ServerBot) {
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot || player instanceof org.leavesmc.leaves.replay.ServerPhotographer) { // Leaves - and photographer
             return false;
         }
         // Leaves end - bot can't get advancement
diff --git a/net/minecraft/server/ServerScoreboard.java b/net/minecraft/server/ServerScoreboard.java
index 5c9f2a8476ff260ec7f0843f7c956c71e9b0d34d..22d67e72e0bf2dbe8c7a936260bb3577c2cfa10b 100644
--- a/net/minecraft/server/ServerScoreboard.java
+++ b/net/minecraft/server/ServerScoreboard.java
@@ -244,7 +244,7 @@ public class ServerScoreboard extends Scoreboard {
     public void startTrackingObjective(Objective objective) {
         List<Packet<?>> startTrackingPackets = this.getStartTrackingPackets(objective);
 
-        for (ServerPlayer serverPlayer : this.server.getPlayerList().getPlayers()) {
+        for (ServerPlayer serverPlayer : this.server.getPlayerList().realPlayers) { // Leaves - only real players
             if (serverPlayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
             for (Packet<?> packet : startTrackingPackets) {
                 serverPlayer.connection.send(packet);
@@ -270,7 +270,7 @@ public class ServerScoreboard extends Scoreboard {
     public void stopTrackingObjective(Objective objective) {
         List<Packet<?>> stopTrackingPackets = this.getStopTrackingPackets(objective);
 
-        for (ServerPlayer serverPlayer : this.server.getPlayerList().getPlayers()) {
+        for (ServerPlayer serverPlayer : this.server.getPlayerList().realPlayers) { // Leaves - only real players
             if (serverPlayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
             for (Packet<?> packet : stopTrackingPackets) {
                 serverPlayer.connection.send(packet);
diff --git a/net/minecraft/server/commands/ListPlayersCommand.java b/net/minecraft/server/commands/ListPlayersCommand.java
index e7c778a7f292fd0749cbd5e6586ad1b93ac7f29e..024b56405bb58801b17a6adad7fec7a461d12a5c 100644
--- a/net/minecraft/server/commands/ListPlayersCommand.java
+++ b/net/minecraft/server/commands/ListPlayersCommand.java
@@ -33,7 +33,7 @@ public class ListPlayersCommand {
     private static int format(CommandSourceStack source, Function<ServerPlayer, Component> nameExtractor) {
         PlayerList playerList = source.getServer().getPlayerList();
         // CraftBukkit start
-        List<ServerPlayer> playersTemp = playerList.getPlayers();
+        List<ServerPlayer> playersTemp = playerList.realPlayers;
         if (source.getBukkitSender() instanceof org.bukkit.entity.Player) {
             org.bukkit.entity.Player sender = (org.bukkit.entity.Player) source.getBukkitSender();
             playersTemp = playersTemp.stream().filter((ep) -> sender.canSee(ep.getBukkitEntity())).collect(java.util.stream.Collectors.toList());
diff --git a/net/minecraft/server/commands/OpCommand.java b/net/minecraft/server/commands/OpCommand.java
index 2682f6debf14ed3040a78b02d820e949ca3832c5..6569b1be4fda23de9dea5e4a5373bd52b62ce514 100644
--- a/net/minecraft/server/commands/OpCommand.java
+++ b/net/minecraft/server/commands/OpCommand.java
@@ -25,7 +25,7 @@ public class OpCommand {
                             (commandContext, suggestionsBuilder) -> {
                                 PlayerList playerList = commandContext.getSource().getServer().getPlayerList();
                                 return SharedSuggestionProvider.suggest(
-                                    playerList.getPlayers()
+                                    playerList.realPlayers // Leaves - only real player
                                         .stream()
                                         .filter(serverPlayer -> !playerList.isOp(serverPlayer.nameAndId()))
                                         .map(serverPlayer -> serverPlayer.getGameProfile().name()),
diff --git a/net/minecraft/server/commands/ParticleCommand.java b/net/minecraft/server/commands/ParticleCommand.java
index 33d96239f4b72a5587dc70f9602847a870d6d6a5..a83ce2cd112fca02cf3545f8c38e5cafae2c7c0e 100644
--- a/net/minecraft/server/commands/ParticleCommand.java
+++ b/net/minecraft/server/commands/ParticleCommand.java
@@ -36,7 +36,7 @@ public class ParticleCommand {
                                 0.0F,
                                 0,
                                 false,
-                                commandContext.getSource().getServer().getPlayerList().getPlayers()
+                                commandContext.getSource().getServer().getPlayerList().realPlayers // Leaves - only real player
                             )
                         )
                         .then(
@@ -50,7 +50,7 @@ public class ParticleCommand {
                                         0.0F,
                                         0,
                                         false,
-                                        context1.getSource().getServer().getPlayerList().getPlayers()
+                                        context1.getSource().getServer().getPlayerList().realPlayers // Leaves - only real player
                                     )
                                 )
                                 .then(
@@ -68,7 +68,7 @@ public class ParticleCommand {
                                                                 FloatArgumentType.getFloat(context1, "speed"),
                                                                 IntegerArgumentType.getInteger(context1, "count"),
                                                                 false,
-                                                                context1.getSource().getServer().getPlayerList().getPlayers()
+                                                                context1.getSource().getServer().getPlayerList().realPlayers // Leaves - only real player
                                                             )
                                                         )
                                                         .then(
@@ -82,7 +82,7 @@ public class ParticleCommand {
                                                                         FloatArgumentType.getFloat(context1, "speed"),
                                                                         IntegerArgumentType.getInteger(context1, "count"),
                                                                         true,
-                                                                        context1.getSource().getServer().getPlayerList().getPlayers()
+                                                                        context1.getSource().getServer().getPlayerList().realPlayers // Leaves - only real player
                                                                     )
                                                                 )
                                                                 .then(
@@ -112,7 +112,7 @@ public class ParticleCommand {
                                                                         FloatArgumentType.getFloat(context1, "speed"),
                                                                         IntegerArgumentType.getInteger(context1, "count"),
                                                                         false,
-                                                                        context1.getSource().getServer().getPlayerList().getPlayers()
+                                                                        context1.getSource().getServer().getPlayerList().realPlayers // Leaves - only real player
                                                                     )
                                                                 )
                                                                 .then(
diff --git a/net/minecraft/server/commands/TeamMsgCommand.java b/net/minecraft/server/commands/TeamMsgCommand.java
index 134d7b1a9d5a5a47ebf4aabff110dde914cd6fe1..894dd1d048904b8a775416ea6cb3112215c567bc 100644
--- a/net/minecraft/server/commands/TeamMsgCommand.java
+++ b/net/minecraft/server/commands/TeamMsgCommand.java
@@ -40,7 +40,7 @@ public class TeamMsgCommand {
                                 } else {
                                     List<ServerPlayer> list = commandSourceStack.getServer()
                                         .getPlayerList()
-                                        .getPlayers()
+                                        .realPlayers // Leaves - only real players
                                         .stream()
                                         .filter(player -> player == entityOrException || player.getTeam() == team)
                                         .toList();
diff --git a/net/minecraft/server/commands/WhitelistCommand.java b/net/minecraft/server/commands/WhitelistCommand.java
index cfe62a56ce1b4222ed6d73fc6390b7726542a9cd..234478bca5f8b1ea768b487c943b44e022bb378e 100644
--- a/net/minecraft/server/commands/WhitelistCommand.java
+++ b/net/minecraft/server/commands/WhitelistCommand.java
@@ -44,7 +44,7 @@ public class WhitelistCommand {
                                     (commandContext, suggestionsBuilder) -> {
                                         PlayerList playerList = commandContext.getSource().getServer().getPlayerList();
                                         return SharedSuggestionProvider.suggest(
-                                            playerList.getPlayers()
+                                            playerList.realPlayers // Leaves - only real player
                                                 .stream()
                                                 .map(Player::nameAndId)
                                                 .filter(nameAndId -> !playerList.getWhiteList().isWhiteListed(nameAndId))
diff --git a/net/minecraft/server/gui/PlayerListComponent.java b/net/minecraft/server/gui/PlayerListComponent.java
index 5a8cd3e6b448a4472092690cf589bca10b142126..8f22d5faf89006153b1fff4ff0b622f8de9fb588 100644
--- a/net/minecraft/server/gui/PlayerListComponent.java
+++ b/net/minecraft/server/gui/PlayerListComponent.java
@@ -17,8 +17,8 @@ public class PlayerListComponent extends JList<String> {
         if (this.tickCount++ % 20 == 0) {
             Vector<String> list = new Vector<>();
 
-            for (int i = 0; i < this.server.getPlayerList().getPlayers().size(); i++) {
-                list.add(this.server.getPlayerList().getPlayers().get(i).getGameProfile().name());
+            for (int i = 0; i < this.server.getPlayerList().realPlayers.size(); i++) { // Leaves - only real players
+                list.add(this.server.getPlayerList().realPlayers.get(i).getGameProfile().name()); // Leaves - only real players
             }
 
             this.setListData(list);
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 980b06c70e3aa4eb2a462ebf06a4153d91e2b5dc..27606bcb957abe27641010f920deafa05ebee360 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -2767,7 +2767,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.add(serverPlayer);
                 // Leaves start - skip
-                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot) && !(serverPlayer instanceof org.leavesmc.leaves.replay.ServerPhotographer)) { // and photographer
                     ServerLevel.this.realPlayers.add(serverPlayer);
                 }
                 // Leaves end - skip
@@ -2850,7 +2850,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.remove(serverPlayer);
                 // Leaves start - skip
-                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot) && !(serverPlayer instanceof org.leavesmc.leaves.replay.ServerPhotographer)) { // and photographer
                     ServerLevel.this.realPlayers.remove(serverPlayer);
                 }
                 // Leaves end - skip
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index c52a5122e969e4c25861c7cc4e3e52f555f6220c..b2f9ec8e4febb461b582d7799a3dceaa8f8c24a1 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -522,7 +522,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         // Paper start - Expand PlayerGameModeChangeEvent
         this.loadGameTypes(input);
     }
-    private void loadGameTypes(ValueInput input) {
+    public void loadGameTypes(ValueInput input) { // Leaves - private -> public
         if (this.server.getForcedGameType() != null && this.server.getForcedGameType() != readPlayerMode(input, "playerGameType")) {
             if (new org.bukkit.event.player.PlayerGameModeChangeEvent(this.getBukkitEntity(), org.bukkit.GameMode.getByValue(this.server.getDefaultGameType().getId()), org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.DEFAULT_GAMEMODE, null).callEvent()) {
                 this.gameMode.setGameModeForPlayer(this.server.getForcedGameType(), GameType.DEFAULT_MODE);
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index 248c08b4f1dc6cf47ac311d5872ae56485e3b425..19c8b1a728c28ed6e325b0b5e3d4aec764b74f0b 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -125,6 +125,7 @@ public abstract class PlayerList {
     private int simulationDistance;
     private boolean allowCommandsForAllPlayers;
     private int sendAllPlayerInfoIn;
+    public final List<ServerPlayer> realPlayers = new java.util.concurrent.CopyOnWriteArrayList(); // Leaves - replay api
 
     // CraftBukkit start
     private org.bukkit.craftbukkit.CraftServer cserver;
@@ -148,6 +149,125 @@ public abstract class PlayerList {
 
     abstract public void loadAndSaveFiles(); // Paper - fix converting txt to json file; moved from DedicatedPlayerList constructor
 
+    // Leaves start - replay mod api
+    public void placeNewPhotographer(Connection connection, org.leavesmc.leaves.replay.ServerPhotographer player, ServerLevel worldserver) {
+        player.isRealPlayer = true; // Paper
+        player.loginTime = System.currentTimeMillis(); // Paper
+
+        ServerLevel worldserver1 = worldserver;
+
+        player.setServerLevel(worldserver1);
+        player.spawnIn(worldserver1);
+        player.gameMode.setLevel((ServerLevel) player.level());
+
+        LevelData worlddata = worldserver1.getLevelData();
+
+        player.loadGameTypes(null);
+        ServerGamePacketListenerImpl playerconnection = new ServerGamePacketListenerImpl(this.server, connection, player, CommonListenerCookie.createInitial(player.gameProfile, false));
+        GameRules gamerules = worldserver1.getGameRules();
+        boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
+        boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
+        boolean flag2 = gamerules.getBoolean(GameRules.RULE_LIMITED_CRAFTING);
+
+        playerconnection.send(new ClientboundLoginPacket(player.getId(), worlddata.isHardcore(), this.server.levelKeys(), this.getMaxPlayers(), worldserver1.getWorld().getSendViewDistance(), worldserver1.getWorld().getSimulationDistance(), flag1, !flag, flag2, player.createCommonSpawnInfo(worldserver1), this.server.enforceSecureProfile())); // Paper - replace old player chunk management
+        player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
+        playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
+        playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
+        playerconnection.send(new ClientboundSetHeldSlotPacket(player.getInventory().getSelectedSlot()));
+        RecipeManager craftingmanager = this.server.getRecipeManager();
+        playerconnection.send(new ClientboundUpdateRecipesPacket(craftingmanager.getSynchronizedItemProperties(), craftingmanager.getSynchronizedStonecutterRecipes()));
+
+        this.sendPlayerPermissionLevel(player);
+        player.getStats().markAllDirty();
+        player.getRecipeBook().sendInitialRecipeBook(player);
+        this.updateEntireScoreboard(worldserver1.getScoreboard(), player);
+        this.server.invalidateStatus();
+
+        playerconnection.teleport(player.getX(), player.getY(), player.getZ(), player.getYRot(), player.getXRot());
+        ServerStatus serverping = this.server.getStatus();
+
+        if (serverping != null) {
+            player.sendServerStatus(serverping);
+        }
+
+        this.players.add(player);
+        this.playersByName.put(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT), player); // Spigot
+        this.playersByUUID.put(player.getUUID(), player);
+
+        player.suppressTrackerForLogin = true;
+        worldserver1.addNewPlayer(player);
+        this.server.getCustomBossEvents().onPlayerConnect(player);
+        org.bukkit.craftbukkit.entity.CraftPlayer bukkitPlayer = player.getBukkitEntity();
+
+        player.containerMenu.transferTo(player.containerMenu, bukkitPlayer);
+        if (!player.connection.isAcceptingMessages()) {
+            return;
+        }
+
+        // org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerJoin(player); // Leaves - protocol
+
+        // Leaves start - bot support
+        if (org.leavesmc.leaves.LeavesConfig.modify.fakeplayer.enable) {
+            org.leavesmc.leaves.bot.ServerBot bot = this.server.getBotList().getBotByName(player.getScoreboardName());
+            if (bot != null) {
+                this.server.getBotList().removeBot(bot, org.leavesmc.leaves.event.bot.BotRemoveEvent.RemoveReason.INTERNAL, player.getBukkitEntity(), false);
+            }
+            this.server.getBotList().bots.forEach(bot1 -> {
+                bot1.sendPlayerInfo(player);
+                bot1.sendFakeDataIfNeed(player, true);
+            }); // Leaves - render bot
+        }
+        // Leaves end - bot support
+
+        final List<ServerPlayer> onlinePlayers = Lists.newArrayListWithExpectedSize(this.players.size() - 1);
+        for (int i = 0; i < this.players.size(); ++i) {
+            ServerPlayer entityplayer1 = this.players.get(i);
+
+            if (entityplayer1 == player || !bukkitPlayer.canSee(entityplayer1.getBukkitEntity())) {
+                continue;
+            }
+
+            // Leaves start - skip photographer
+            if (entityplayer1 instanceof org.leavesmc.leaves.replay.ServerPhotographer) {
+                continue;
+            }
+            // Leaves end - skip photographer
+
+            onlinePlayers.add(entityplayer1);
+        }
+        if (!onlinePlayers.isEmpty()) {
+            player.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(onlinePlayers, player));
+        }
+
+        player.sentListPacket = true;
+        player.suppressTrackerForLogin = false;
+        ((ServerLevel)player.level()).getChunkSource().chunkMap.addEntity(player);
+
+        this.sendLevelInfo(player, worldserver1);
+
+        if (player.level() == worldserver1 && !worldserver1.players().contains(player)) {
+            worldserver1.addNewPlayer(player);
+            this.server.getCustomBossEvents().onPlayerConnect(player);
+        }
+
+        worldserver1 = player.level();
+        java.util.Iterator<net.minecraft.world.effect.MobEffectInstance> iterator = player.getActiveEffects().iterator();
+        while (iterator.hasNext()) {
+            MobEffectInstance mobeffect = iterator.next();
+            playerconnection.send(new ClientboundUpdateMobEffectPacket(player.getId(), mobeffect, false));
+        }
+
+        if (player.isDeadOrDying()) {
+            net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> plains = worldserver1.registryAccess().lookupOrThrow(net.minecraft.core.registries.Registries.BIOME)
+                    .getOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
+            player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket(
+                    new net.minecraft.world.level.chunk.EmptyLevelChunk(worldserver1, player.chunkPosition(), plains),
+                    worldserver1.getLightEngine(), null, null, false)
+            );
+        }
+    }
+    // Leaves end - replay mod api
+
     public void placeNewPlayer(Connection connection, ServerPlayer player, CommonListenerCookie cookie) {
         player.isRealPlayer = true; // Paper
         player.loginTime = System.currentTimeMillis(); // Paper - Replace OfflinePlayer#getLastPlayed
@@ -215,6 +335,7 @@ public abstract class PlayerList {
 
         // player.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players)); // CraftBukkit - replaced with loop below
         this.players.add(player);
+        this.realPlayers.add(player); // Leaves - replay api
         this.playersByName.put(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT), player); // Spigot
         this.playersByUUID.put(player.getUUID(), player);
         // this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player))); // CraftBukkit - replaced with loop below
@@ -419,6 +540,7 @@ public abstract class PlayerList {
     }
 
     protected void save(ServerPlayer player) {
+        if (player instanceof org.leavesmc.leaves.replay.ServerPhotographer) return; // Leaves - skip photographer
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         player.lastSave = MinecraftServer.currentTick; // Paper - Incremental chunk and player saving
         this.playerIo.save(player);
@@ -433,6 +555,43 @@ public abstract class PlayerList {
         }
     }
 
+    // Leaves start - replay mod api
+    public void removePhotographer(org.leavesmc.leaves.replay.ServerPhotographer entityplayer) {
+        ServerLevel worldserver = entityplayer.level();
+
+        entityplayer.awardStat(Stats.LEAVE_GAME);
+
+        if (entityplayer.containerMenu != entityplayer.inventoryMenu) {
+            entityplayer.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.DISCONNECT);
+        }
+
+        if (server.isSameThread()) entityplayer.doTick();
+
+        if (this.collideRuleTeamName != null) {
+            final net.minecraft.world.scores.Scoreboard scoreBoard = this.server.getLevel(Level.OVERWORLD).getScoreboard();
+            final PlayerTeam team = scoreBoard.getPlayersTeam(this.collideRuleTeamName);
+            if (entityplayer.getTeam() == team && team != null) {
+                scoreBoard.removePlayerFromTeam(entityplayer.getScoreboardName(), team);
+            }
+        }
+
+        worldserver.removePlayerImmediately(entityplayer, Entity.RemovalReason.UNLOADED_WITH_PLAYER);
+        entityplayer.retireScheduler();
+        entityplayer.getAdvancements().stopListening();
+        this.players.remove(entityplayer);
+        this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT));
+        this.server.getCustomBossEvents().onPlayerDisconnect(entityplayer);
+        UUID uuid = entityplayer.getUUID();
+        ServerPlayer entityplayer1 = this.playersByUUID.get(uuid);
+
+        if (entityplayer1 == entityplayer) {
+            this.playersByUUID.remove(uuid);
+        }
+
+        this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
+    }
+    // Leaves stop - replay mod api
+
     public @Nullable net.kyori.adventure.text.Component remove(ServerPlayer player) { // CraftBukkit - return string // Paper - return Component
         // Paper start - Fix kick event leave message not being sent
         return this.remove(player, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? player.getBukkitEntity().displayName() : io.papermc.paper.adventure.PaperAdventure.asAdventure(player.getDisplayName())));
@@ -506,6 +665,7 @@ public abstract class PlayerList {
         player.retireScheduler(); // Paper - Folia schedulers
         player.getAdvancements().stopListening();
         this.players.remove(player);
+        this.realPlayers.remove(player); // Leaves - replay api
         this.playersByName.remove(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(player);
         UUID uuid = player.getUUID();
@@ -881,14 +1041,14 @@ public abstract class PlayerList {
     }
 
     public String[] getPlayerNamesArray() {
-        String[] strings = new String[this.players.size() + this.server.getBotList().bots.size()]; // Leaves - fakeplayer support
+        String[] strings = new String[this.realPlayers.size() + this.server.getBotList().bots.size()]; // Leaves - fakeplayer support, and skip photographer
 
-        for (int i = 0; i < this.players.size(); i++) {
-            strings[i] = this.players.get(i).getGameProfile().name();
+        for (int i = 0; i < this.realPlayers.size(); i++) { // Leaves - only real players
+            strings[i] = this.realPlayers.get(i).getGameProfile().name(); // Leaves - only real players
         }
         // Leaves start - fakeplayer support
-        for (int i = this.players.size(); i < strings.length; ++i) {
-            strings[i] = this.server.getBotList().bots.get(i - this.players.size()).getGameProfile().getName();
+        for (int i = this.realPlayers.size(); i < strings.length; ++i) { // Leaves - only real players
+            strings[i] = this.server.getBotList().bots.get(i - this.realPlayers.size()).getGameProfile().name(); // Leaves - only real players
         }
         // Leaves end - fakeplayer support
 
@@ -959,7 +1119,7 @@ public abstract class PlayerList {
 
     // Paper start - whitelist verify event / login event
     public LoginResult canBypassFullServerLogin(final NameAndId nameAndId, final LoginResult currentResult) {
-        final boolean shouldKick = this.players.size() >= this.getMaxPlayers() && !this.canBypassPlayerLimit(nameAndId);
+        final boolean shouldKick = this.realPlayers.size() >= this.getMaxPlayers() && !this.canBypassPlayerLimit(nameAndId); // Leaves - only real player
         final io.papermc.paper.event.player.PlayerServerFullCheckEvent fullCheckEvent = new io.papermc.paper.event.player.PlayerServerFullCheckEvent(
             new com.destroystokyo.paper.profile.CraftPlayerProfile(nameAndId),
             io.papermc.paper.adventure.PaperAdventure.asAdventure(currentResult.message),
