From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Tue, 4 Feb 2025 19:45:19 +0800
Subject: [PATCH] Replay Mod API

This patch is Powered by ReplayMod(https://github.com/ReplayMod)

diff --git a/net/minecraft/commands/CommandSourceStack.java b/net/minecraft/commands/CommandSourceStack.java
index 3acfb2a78845dd8081dc3c01d653034232c76e60..efe3f1849e68e5bbe2cdb3793dafc8b58c3d8415 100644
--- a/net/minecraft/commands/CommandSourceStack.java
+++ b/net/minecraft/commands/CommandSourceStack.java
@@ -580,7 +580,7 @@ public class CommandSourceStack implements ExecutionCommandSource<CommandSourceS
 
     @Override
     public Collection<String> getOnlinePlayerNames() {
-        return this.entity instanceof ServerPlayer sourcePlayer && !sourcePlayer.getBukkitEntity().hasPermission("paper.bypass-visibility.tab-completion") ? this.getServer().getPlayerList().getPlayers().stream().filter(serverPlayer -> sourcePlayer.getBukkitEntity().canSee(serverPlayer.getBukkitEntity())).map(serverPlayer -> serverPlayer.getGameProfile().getName()).toList() : Lists.newArrayList(this.server.getPlayerNames()); // Paper - Make CommandSourceStack respect hidden players
+        return this.entity instanceof ServerPlayer sourcePlayer && !(sourcePlayer instanceof org.leavesmc.leaves.replay.ServerPhotographer) && !sourcePlayer.getBukkitEntity().hasPermission("paper.bypass-visibility.tab-completion") ? this.getServer().getPlayerList().getPlayers().stream().filter(serverPlayer -> sourcePlayer.getBukkitEntity().canSee(serverPlayer.getBukkitEntity())).map(serverPlayer -> serverPlayer.getGameProfile().getName()).toList() : Lists.newArrayList(this.server.getPlayerNames()); // Paper - Make CommandSourceStack respect hidden players // Leaves - only real player
     }
 
     @Override
diff --git a/net/minecraft/commands/arguments/selector/EntitySelector.java b/net/minecraft/commands/arguments/selector/EntitySelector.java
index 514f8fbdeb776087608665c35de95294aadf5cf0..2f78ca86f46ea08fdcf4b8047d3d0b04e2e29b0a 100644
--- a/net/minecraft/commands/arguments/selector/EntitySelector.java
+++ b/net/minecraft/commands/arguments/selector/EntitySelector.java
@@ -128,11 +128,12 @@ public class EntitySelector {
             return this.findPlayers(source);
         } else if (this.playerName != null) {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayerByName(this.playerName);
+            playerByName = playerByName instanceof org.leavesmc.leaves.replay.ServerPhotographer ? null : playerByName; // Leaves - skip photographer
             return playerByName == null ? List.of() : List.of(playerByName);
         } else if (this.entityUUID != null) {
             for (ServerLevel serverLevel : source.getServer().getAllLevels()) {
                 Entity entity = serverLevel.getEntity(this.entityUUID);
-                if (entity != null) {
+                if (entity != null && !(entity instanceof org.leavesmc.leaves.replay.ServerPhotographer)) {
                     if (entity.getType().isEnabled(source.enabledFeatures())) {
                         return List.of(entity);
                     }
@@ -146,7 +147,7 @@ public class EntitySelector {
             AABB absoluteAabb = this.getAbsoluteAabb(vec3);
             if (this.currentEntity) {
                 Predicate<Entity> predicate = this.getPredicate(vec3, absoluteAabb, null);
-                return source.getEntity() != null && predicate.test(source.getEntity()) ? List.of(source.getEntity()) : List.of();
+                return source.getEntity() != null && !(source.getEntity() instanceof org.leavesmc.leaves.replay.ServerPhotographer) && predicate.test(source.getEntity()) ? List.of(source.getEntity()) : List.of(); // Leaves - skip photographer
             } else {
                 Predicate<Entity> predicate = this.getPredicate(vec3, absoluteAabb, source.enabledFeatures());
                 List<Entity> list = new ObjectArrayList<>();
@@ -157,6 +158,7 @@ public class EntitySelector {
                         this.addEntities(list, serverLevel1, absoluteAabb, predicate);
                     }
                 }
+                list.removeIf(entity -> entity instanceof org.leavesmc.leaves.replay.ServerPhotographer); // Leaves - skip photographer
 
                 return this.sortAndLimit(vec3, list);
             }
@@ -192,9 +194,11 @@ public class EntitySelector {
         this.checkPermissions(source);
         if (this.playerName != null) {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayerByName(this.playerName);
+            playerByName = playerByName instanceof org.leavesmc.leaves.replay.ServerPhotographer ? null : playerByName; // Leaves - skip photographer
             return playerByName == null ? List.of() : List.of(playerByName);
         } else if (this.entityUUID != null) {
             ServerPlayer playerByName = source.getServer().getPlayerList().getPlayer(this.entityUUID);
+            playerByName = playerByName instanceof org.leavesmc.leaves.replay.ServerPhotographer ? null : playerByName; // Leaves - skip photographer
             return playerByName == null ? List.of() : List.of(playerByName);
         } else {
             Vec3 vec3 = this.position.apply(source.getPosition());
@@ -206,12 +210,12 @@ public class EntitySelector {
                 int resultLimit = this.getResultLimit();
                 List<ServerPlayer> players;
                 if (this.isWorldLimited()) {
-                    players = source.getLevel().getPlayers(predicate, resultLimit);
+                    players = source.getLevel().getPlayers((player -> !(player instanceof org.leavesmc.leaves.replay.ServerPhotographer) && predicate.test(player)), resultLimit); // Leaves - skip photographer
                 } else {
                     players = new ObjectArrayList<>();
 
                     for (ServerPlayer serverPlayer1 : source.getServer().getPlayerList().getPlayers()) {
-                        if (predicate.test(serverPlayer1)) {
+                        if (predicate.test(serverPlayer1) && !(serverPlayer1 instanceof org.leavesmc.leaves.replay.ServerPhotographer)) { // Leaves - skip photographer
                             players.add(serverPlayer1);
                             if (players.size() >= resultLimit) {
                                 return players;
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 39898e5e2bd75eced05f0b90b3881270d144fd93..9a45eaae53ff9caac6e37f532e86748add886148 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1638,7 +1638,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     private ServerStatus.Players buildPlayerStatus() {
-        List<ServerPlayer> players = this.playerList.getPlayers();
+        List<ServerPlayer> players = this.playerList.realPlayers; // Leaves - only real player
         int maxPlayers = this.getMaxPlayers();
         if (this.hidesOnlinePlayers()) {
             return new ServerStatus.Players(maxPlayers, players.size(), List.of());
diff --git a/net/minecraft/server/PlayerAdvancements.java b/net/minecraft/server/PlayerAdvancements.java
index a14401edec04964e6c596c16ba58643b835ef9c1..924829d46f789752aab52c0a51f4d0925710eadf 100644
--- a/net/minecraft/server/PlayerAdvancements.java
+++ b/net/minecraft/server/PlayerAdvancements.java
@@ -173,7 +173,7 @@ public class PlayerAdvancements {
         }
         // Leaves end - spectator don't get advancement
         // Leaves start - bot can't get advancement
-        if (player instanceof org.leavesmc.leaves.bot.ServerBot) {
+        if (player instanceof org.leavesmc.leaves.bot.ServerBot || player instanceof org.leavesmc.leaves.replay.ServerPhotographer) { // Leaves - and photographer
             return false;
         }
         // Leaves end - bot can't get advancement
diff --git a/net/minecraft/server/commands/OpCommand.java b/net/minecraft/server/commands/OpCommand.java
index f2286b96b8f40b4588f817913c42ae7b4a92340f..dbe6c37642d35ac6ee8b428cf1e45878a5dfa9da 100644
--- a/net/minecraft/server/commands/OpCommand.java
+++ b/net/minecraft/server/commands/OpCommand.java
@@ -25,7 +25,7 @@ public class OpCommand {
                             (commandContext, suggestionsBuilder) -> {
                                 PlayerList playerList = commandContext.getSource().getServer().getPlayerList();
                                 return SharedSuggestionProvider.suggest(
-                                    playerList.getPlayers()
+                                    playerList.realPlayers // Leaves - only real player
                                         .stream()
                                         .filter(serverPlayer -> !playerList.isOp(serverPlayer.getGameProfile()))
                                         .map(serverPlayer -> serverPlayer.getGameProfile().getName()),
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index e6de7ef46d197c14495d4b55d094af34816fc063..5072dc7ac71e1640b2aad35c3c3560e0860ece94 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -2693,7 +2693,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.add(serverPlayer);
                 // Leaves start - skip
-                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot) && !(serverPlayer instanceof org.leavesmc.leaves.replay.ServerPhotographer)) { // and photographer
                     ServerLevel.this.realPlayers.add(serverPlayer);
                 }
                 // Leaves end - skip
@@ -2776,7 +2776,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             if (entity instanceof ServerPlayer serverPlayer) {
                 ServerLevel.this.players.remove(serverPlayer);
                 // Leaves start - skip
-                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot)) {
+                if (!(serverPlayer instanceof org.leavesmc.leaves.bot.ServerBot) && !(serverPlayer instanceof org.leavesmc.leaves.replay.ServerPhotographer)) { // and photographer
                     ServerLevel.this.realPlayers.remove(serverPlayer);
                 }
                 // Leaves end - skip
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index 7a0d36b9c6a633919a116fc4d47e500b2c6cbc28..7dffd2a20b8efdbf48925bae485ee4920b1ec362 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -130,6 +130,7 @@ public abstract class PlayerList {
     private boolean allowCommandsForAllPlayers;
     private static final boolean ALLOW_LOGOUTIVATOR = false;
     private int sendAllPlayerInfoIn;
+    public final List<ServerPlayer> realPlayers = new java.util.concurrent.CopyOnWriteArrayList(); // Leaves - replay api
 
     // CraftBukkit start
     private org.bukkit.craftbukkit.CraftServer cserver;
@@ -148,6 +149,125 @@ public abstract class PlayerList {
 
     abstract public void loadAndSaveFiles(); // Paper - fix converting txt to json file; moved from DedicatedPlayerList constructor
 
+    // Leaves start - replay mod api
+    public void placeNewPhotographer(Connection connection, org.leavesmc.leaves.replay.ServerPhotographer player, ServerLevel worldserver) {
+        player.isRealPlayer = true; // Paper
+        player.loginTime = System.currentTimeMillis(); // Paper
+
+        ServerLevel worldserver1 = worldserver;
+
+        player.setServerLevel(worldserver1);
+        player.spawnIn(worldserver1);
+        player.gameMode.setLevel((ServerLevel) player.level());
+
+        LevelData worlddata = worldserver1.getLevelData();
+
+        player.loadGameTypes(null);
+        ServerGamePacketListenerImpl playerconnection = new ServerGamePacketListenerImpl(this.server, connection, player, CommonListenerCookie.createInitial(player.gameProfile, false));
+        GameRules gamerules = worldserver1.getGameRules();
+        boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
+        boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
+        boolean flag2 = gamerules.getBoolean(GameRules.RULE_LIMITED_CRAFTING);
+
+        playerconnection.send(new ClientboundLoginPacket(player.getId(), worlddata.isHardcore(), this.server.levelKeys(), this.getMaxPlayers(), worldserver1.getWorld().getSendViewDistance(), worldserver1.getWorld().getSimulationDistance(), flag1, !flag, flag2, player.createCommonSpawnInfo(worldserver1), this.server.enforceSecureProfile())); // Paper - replace old player chunk management
+        player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
+        playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
+        playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
+        playerconnection.send(new ClientboundSetHeldSlotPacket(player.getInventory().getSelectedSlot()));
+        RecipeManager craftingmanager = this.server.getRecipeManager();
+        playerconnection.send(new ClientboundUpdateRecipesPacket(craftingmanager.getSynchronizedItemProperties(), craftingmanager.getSynchronizedStonecutterRecipes()));
+
+        this.sendPlayerPermissionLevel(player);
+        player.getStats().markAllDirty();
+        player.getRecipeBook().sendInitialRecipeBook(player);
+        this.updateEntireScoreboard(worldserver1.getScoreboard(), player);
+        this.server.invalidateStatus();
+
+        playerconnection.teleport(player.getX(), player.getY(), player.getZ(), player.getYRot(), player.getXRot());
+        ServerStatus serverping = this.server.getStatus();
+
+        if (serverping != null) {
+            player.sendServerStatus(serverping);
+        }
+
+        this.players.add(player);
+        this.playersByName.put(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT), player); // Spigot
+        this.playersByUUID.put(player.getUUID(), player);
+
+        player.supressTrackerForLogin = true;
+        worldserver1.addNewPlayer(player);
+        this.server.getCustomBossEvents().onPlayerConnect(player);
+        org.bukkit.craftbukkit.entity.CraftPlayer bukkitPlayer = player.getBukkitEntity();
+
+        player.containerMenu.transferTo(player.containerMenu, bukkitPlayer);
+        if (!player.connection.isAcceptingMessages()) {
+            return;
+        }
+
+        // org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handlePlayerJoin(player); // Leaves - protocol
+
+        // Leaves start - bot support
+        if (org.leavesmc.leaves.LeavesConfig.modify.fakeplayer.enable) {
+            org.leavesmc.leaves.bot.ServerBot bot = this.server.getBotList().getBotByName(player.getScoreboardName());
+            if (bot != null) {
+                this.server.getBotList().removeBot(bot, org.leavesmc.leaves.event.bot.BotRemoveEvent.RemoveReason.INTERNAL, player.getBukkitEntity(), false);
+            }
+            this.server.getBotList().bots.forEach(bot1 -> {
+                bot1.sendPlayerInfo(player);
+                bot1.sendFakeDataIfNeed(player, true);
+            }); // Leaves - render bot
+        }
+        // Leaves end - bot support
+
+        final List<ServerPlayer> onlinePlayers = Lists.newArrayListWithExpectedSize(this.players.size() - 1);
+        for (int i = 0; i < this.players.size(); ++i) {
+            ServerPlayer entityplayer1 = this.players.get(i);
+
+            if (entityplayer1 == player || !bukkitPlayer.canSee(entityplayer1.getBukkitEntity())) {
+                continue;
+            }
+
+            // Leaves start - skip photographer
+            if (entityplayer1 instanceof org.leavesmc.leaves.replay.ServerPhotographer) {
+                continue;
+            }
+            // Leaves end - skip photographer
+
+            onlinePlayers.add(entityplayer1);
+        }
+        if (!onlinePlayers.isEmpty()) {
+            player.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(onlinePlayers, player));
+        }
+
+        player.sentListPacket = true;
+        player.supressTrackerForLogin = false;
+        ((ServerLevel)player.level()).getChunkSource().chunkMap.addEntity(player);
+
+        this.sendLevelInfo(player, worldserver1);
+
+        if (player.level() == worldserver1 && !worldserver1.players().contains(player)) {
+            worldserver1.addNewPlayer(player);
+            this.server.getCustomBossEvents().onPlayerConnect(player);
+        }
+
+        worldserver1 = player.level();
+        java.util.Iterator<net.minecraft.world.effect.MobEffectInstance> iterator = player.getActiveEffects().iterator();
+        while (iterator.hasNext()) {
+            MobEffectInstance mobeffect = iterator.next();
+            playerconnection.send(new ClientboundUpdateMobEffectPacket(player.getId(), mobeffect, false));
+        }
+
+        if (player.isDeadOrDying()) {
+            net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> plains = worldserver1.registryAccess().lookupOrThrow(net.minecraft.core.registries.Registries.BIOME)
+                    .getOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
+            player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket(
+                    new net.minecraft.world.level.chunk.EmptyLevelChunk(worldserver1, player.chunkPosition(), plains),
+                    worldserver1.getLightEngine(), null, null, false)
+            );
+        }
+    }
+    // Leaves end - replay mod api
+
     public void placeNewPlayer(Connection connection, ServerPlayer player, CommonListenerCookie cookie) {
         player.isRealPlayer = true; // Paper
         player.loginTime = System.currentTimeMillis(); // Paper - Replace OfflinePlayer#getLastPlayed
@@ -310,6 +430,7 @@ public abstract class PlayerList {
 
             // player.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players)); // CraftBukkit - replaced with loop below
             this.players.add(player);
+            this.realPlayers.add(player); // Leaves - replay api
             this.playersByName.put(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT), player); // Spigot
             this.playersByUUID.put(player.getUUID(), player);
             // this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player))); // CraftBukkit - replaced with loop below
@@ -517,6 +638,43 @@ public abstract class PlayerList {
         }
     }
 
+    // Leaves start - replay mod api
+    public void removePhotographer(org.leavesmc.leaves.replay.ServerPhotographer entityplayer) {
+        ServerLevel worldserver = entityplayer.level();
+
+        entityplayer.awardStat(Stats.LEAVE_GAME);
+
+        if (entityplayer.containerMenu != entityplayer.inventoryMenu) {
+            entityplayer.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.DISCONNECT);
+        }
+
+        if (server.isSameThread()) entityplayer.doTick();
+
+        if (this.collideRuleTeamName != null) {
+            final net.minecraft.world.scores.Scoreboard scoreBoard = this.server.getLevel(Level.OVERWORLD).getScoreboard();
+            final PlayerTeam team = scoreBoard.getPlayersTeam(this.collideRuleTeamName);
+            if (entityplayer.getTeam() == team && team != null) {
+                scoreBoard.removePlayerFromTeam(entityplayer.getScoreboardName(), team);
+            }
+        }
+
+        worldserver.removePlayerImmediately(entityplayer, Entity.RemovalReason.UNLOADED_WITH_PLAYER);
+        entityplayer.retireScheduler();
+        entityplayer.getAdvancements().stopListening();
+        this.players.remove(entityplayer);
+        this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT));
+        this.server.getCustomBossEvents().onPlayerDisconnect(entityplayer);
+        UUID uuid = entityplayer.getUUID();
+        ServerPlayer entityplayer1 = this.playersByUUID.get(uuid);
+
+        if (entityplayer1 == entityplayer) {
+            this.playersByUUID.remove(uuid);
+        }
+
+        this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
+    }
+    // Leaves stop - replay mod api
+
     public @Nullable net.kyori.adventure.text.Component remove(ServerPlayer player) { // CraftBukkit - return string // Paper - return Component
         // Paper start - Fix kick event leave message not being sent
         return this.remove(player, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? player.getBukkitEntity().displayName() : io.papermc.paper.adventure.PaperAdventure.asAdventure(player.getDisplayName())));
@@ -590,6 +748,7 @@ public abstract class PlayerList {
         player.retireScheduler(); // Paper - Folia schedulers
         player.getAdvancements().stopListening();
         this.players.remove(player);
+        this.realPlayers.remove(player); // Leaves - replay api
         this.playersByName.remove(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(player);
         UUID uuid = player.getUUID();
@@ -1030,7 +1189,7 @@ public abstract class PlayerList {
 
     // Paper start - whitelist verify event / login event
     public LoginResult canBypassFullServerLogin(final GameProfile profile, final LoginResult currentResult) {
-        final boolean shouldKick = this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(profile);
+        final boolean shouldKick = this.realPlayers.size() >= this.maxPlayers && !this.canBypassPlayerLimit(profile); // Leaves - only real player
         final io.papermc.paper.event.player.PlayerServerFullCheckEvent fullCheckEvent = new io.papermc.paper.event.player.PlayerServerFullCheckEvent(
             com.destroystokyo.paper.profile.CraftPlayerProfile.asBukkitMirror(profile),
             io.papermc.paper.adventure.PaperAdventure.asAdventure(currentResult.message),
