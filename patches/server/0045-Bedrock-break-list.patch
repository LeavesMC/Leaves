From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7studio@foxmail.com>
Date: Wed, 8 May 2024 22:19:25 +0800
Subject: [PATCH] Bedrock break list


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0badf81ac6c141b8736758eef1e93af9baf66d33..98d1e4c934e25e5c0dfe844e6aa3dd236d411da0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1906,6 +1906,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         org.leavesmc.leaves.protocol.core.LeavesProtocolManager.handleTick(); // Leaves - protocol
 
+        org.leavesmc.leaves.util.BreakBedrockList.endTick(); // Leaves - break bedrock list
+
         for (int i = 0; i < this.tickables.size(); ++i) {
             ((Runnable) this.tickables.get(i)).run();
         }
diff --git a/src/main/java/net/minecraft/server/ServerScoreboard.java b/src/main/java/net/minecraft/server/ServerScoreboard.java
index 8fd4d8ffcc9e1a0fcf83730d26c3bb9bef0f73f2..ca6752f938eaeebd40e5a889cb36b4b8df3a8f01 100644
--- a/src/main/java/net/minecraft/server/ServerScoreboard.java
+++ b/src/main/java/net/minecraft/server/ServerScoreboard.java
@@ -146,6 +146,7 @@ public class ServerScoreboard extends Scoreboard {
     @Override
     public void onObjectiveAdded(Objective objective) {
         super.onObjectiveAdded(objective);
+        org.leavesmc.leaves.util.BreakBedrockList.onScoreboardAdd(objective); // Leaves - break bedrock list
         this.setDirty();
     }
 
@@ -162,6 +163,7 @@ public class ServerScoreboard extends Scoreboard {
     @Override
     public void onObjectiveRemoved(Objective objective) {
         super.onObjectiveRemoved(objective);
+        org.leavesmc.leaves.util.BreakBedrockList.onScoreboardRemove(objective); // Leaves - break bedrock list
         if (this.trackedObjectives.contains(objective)) {
             this.stopTrackingObjective(objective);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 4b51472502d08ea357da437afeb4b581979e9cff..79bb7ff91f67fa49f34f2714b3ee2bc238c40e19 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -109,6 +109,11 @@ public class PistonBaseBlock extends DirectionalBlock {
     @Override
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, LivingEntity placer, ItemStack itemStack) {
         if (!world.isClientSide) {
+            // Leaves start - break bedrock list
+            if (placer instanceof Player player) {
+                org.leavesmc.leaves.util.BreakBedrockList.onPlayerPlacePiston(world, player, pos);
+            }
+            // Leaves end - break bedrock list
             this.checkIfExtend(world, pos, state);
         }
 
@@ -294,13 +299,24 @@ public class PistonBaseBlock extends DirectionalBlock {
                             }
                         }
                         // Paper end - Fix sticky pistons and BlockPistonRetractEvent
-                        world.removeBlock(pos.relative(enumdirection), false);
+                        // Leaves start - break bedrock list
+                        BlockPos pos1 = pos.relative(enumdirection);
+                        if (world.getBlockState(pos1).getBlock() == Blocks.BEDROCK) {
+                            org.leavesmc.leaves.util.BreakBedrockList.onPistonBreakBedrock(world, pos1);
+                        }
+                        world.removeBlock(pos1, false);
+                        // Leaves end - break bedrock list
                     }
                 }
             } else {
                 // Paper start - Protect Bedrock and End Portal/Frames from being destroyed; fix headless pistons breaking blocks
                 BlockPos headPos = pos.relative(enumdirection);
                 if (io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPermanentBlockBreakExploits || world.getBlockState(headPos) == Blocks.PISTON_HEAD.defaultBlockState().setValue(FACING, enumdirection)) { // double check to make sure we're not a headless piston.
+                    // Leaves start - break bedrock list
+                    if (world.getBlockState(headPos).getBlock() == Blocks.BEDROCK) {
+                        org.leavesmc.leaves.util.BreakBedrockList.onPistonBreakBedrock(world, headPos);
+                    }
+                    // Leaves end - break bedrock list
                     world.removeBlock(headPos, false);
                 } else {
                     ((ServerLevel) world).getChunkSource().blockChanged(headPos); // ... fix client desync
diff --git a/src/main/java/org/leavesmc/leaves/util/BreakBedrockList.java b/src/main/java/org/leavesmc/leaves/util/BreakBedrockList.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb10e783e5971f3e1e222e1e3423883f3dd3d3af
--- /dev/null
+++ b/src/main/java/org/leavesmc/leaves/util/BreakBedrockList.java
@@ -0,0 +1,114 @@
+package org.leavesmc.leaves.util;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.DirectionalBlock;
+import net.minecraft.world.scores.Objective;
+import net.minecraft.world.scores.ScoreHolder;
+import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import org.jetbrains.annotations.NotNull;
+import org.leavesmc.leaves.LeavesConfig;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class BreakBedrockList {
+
+    private static final Map<Level, Map<BlockPos, Player>> pistonCache = new HashMap<>();
+    private static final List<Objective> BBL = new ArrayList<>();
+    private static final List<Objective> MBB = new ArrayList<>();
+    private static final List<Objective> LBL = new ArrayList<>();
+
+    public static void endTick() {
+        for (var map : pistonCache.values()) {
+            if (!map.isEmpty()) {
+                map.clear();
+            }
+        }
+    }
+
+    public static void onPlayerPlacePiston(Level level, Player player, BlockPos pos) {
+        if (LeavesConfig.modify.bedrockBreakList) {
+            Direction pistonFacing = level.getBlockState(pos).getValue(DirectionalBlock.FACING);
+            BlockPos bedrockPos = pos.relative(pistonFacing);
+            if (level.getBlockState(bedrockPos).getBlock() == Blocks.BEDROCK) {
+                pistonCache.computeIfAbsent(level, k -> new HashMap<>()).put(bedrockPos, player);
+            }
+        }
+    }
+
+    public static void onPistonBreakBedrock(Level level, BlockPos bedrock) {
+        if (LeavesConfig.modify.bedrockBreakList) {
+            Map<BlockPos, Player> map = pistonCache.get(level);
+
+            boolean flag = map != null && map.get(bedrock) != null;
+
+            if (flag) {
+                if (!BBL.isEmpty()) {
+                    Player player = map.get(bedrock);
+                    for (Objective objective : BBL) {
+                        level.getScoreboard().getOrCreatePlayerScore(player, objective).increment();
+                    }
+                }
+            } else {
+                if (!MBB.isEmpty()) {
+                    ScoreHolder world = ScoreHolder.forNameOnly("$" + level.dimension().location());
+                    for (Objective objective : MBB) {
+                        level.getScoreboard().getOrCreatePlayerScore(world, objective).increment();
+                        level.getScoreboard().getOrCreatePlayerScore(ScoreHolder.forNameOnly("$total"), objective).increment();
+                    }
+                }
+            }
+
+            if (!LBL.isEmpty() && !level.players().isEmpty()) {
+                Player closestPlayer = level.getNearestPlayer(bedrock.getX(), bedrock.getY(), bedrock.getZ(), 10.5, null);
+                if (closestPlayer != null) {
+                    for (Objective objective : LBL) {
+                        level.getScoreboard().getOrCreatePlayerScore(closestPlayer, objective).increment();
+                    }
+                }
+            }
+        }
+    }
+
+    public static void onScoreboardAdd(@NotNull Objective objective) {
+        if (LeavesConfig.modify.bedrockBreakList) {
+            if (objective.getCriteria() == ObjectiveCriteria.DUMMY) {
+                String name = objective.getName();
+
+                int i = name.length() - 4;
+                if (i >= 0) {
+                    String suffix = name.substring(i);
+                    switch (suffix) {
+                        case ".bbl" -> BBL.add(objective);
+                        case ".mbb" -> MBB.add(objective);
+                        case ".lbl" -> LBL.add(objective);
+                    }
+                }
+            }
+        }
+    }
+
+    public static void onScoreboardRemove(@NotNull Objective objective) {
+        if (LeavesConfig.modify.bedrockBreakList) {
+            if (objective.getCriteria() == ObjectiveCriteria.DUMMY) {
+                String name = objective.getName();
+
+                int i = name.length() - 4;
+                if (i >= 0) {
+                    String suffix = name.substring(i);
+                    switch (suffix) {
+                        case ".bbl" -> BBL.remove(objective);
+                        case ".mbb" -> MBB.remove(objective);
+                        case ".lbl" -> LBL.remove(objective);
+                    }
+                }
+            }
+        }
+    }
+}
