From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Tue, 24 Jan 2023 12:38:42 +0800
Subject: [PATCH] Return nether portal fix

This patch is powered by NetherPortalFix(https://github.com/TwelveIterationMods/NetherPortalFix)

diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 636c79ab0bab81812d879301b02eb25f3868eeef..c6905ad01218ce5491fc87d83f80b39c3e25db18 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -17,6 +17,8 @@ import java.util.OptionalInt;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -1437,6 +1439,21 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
                 PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), worldserver1.getWorld());
                 this.level().getCraftServer().getPluginManager().callEvent(changeEvent);
                 // CraftBukkit end
+                // Leaves start - nether portal fix
+                if (org.leavesmc.leaves.LeavesConfig.netherPortalFix) {
+                    final ResourceKey<Level> fromDim = worldserver1.dimension();
+                    final ResourceKey<Level> toDim = level().dimension();
+                    final ResourceKey<Level> OVERWORLD = Level.OVERWORLD;
+                    final ResourceKey<Level> THE_NETHER = Level.NETHER;
+                    if (!((fromDim != OVERWORLD || toDim != THE_NETHER) && (fromDim != THE_NETHER || toDim != OVERWORLD))) {
+                        BlockPos fromPortal = org.leavesmc.leaves.util.ReturnPortalManager.findPortalAt(this, fromDim, lastPos);
+                        BlockPos toPos = this.blockPosition();
+                        if (fromPortal != null) {
+                            org.leavesmc.leaves.util.ReturnPortalManager.storeReturnPortal(this, toDim, toPos, fromPortal);
+                        }
+                    }
+                }
+                // Leaves end - nether portal fix
                 // Paper start - Reset shield blocking on dimension change
                 if (this.isBlocking()) {
                     this.stopUsingItem();
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 6720c50a21a3a93267f3ebf21d85db2f1b676d72..d7dae3b138c30461c498ac7321a5377f62b72e1b 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -939,6 +939,24 @@ public abstract class PlayerList {
         if (fromWorld != worldserver) {
             PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(entityplayer.getBukkitEntity(), fromWorld.getWorld());
             this.server.server.getPluginManager().callEvent(event);
+            // Leaves start - nether portal fix
+            if (org.leavesmc.leaves.LeavesConfig.netherPortalFix) {
+                final ResourceKey<Level> fromDim = entityplayer.level().dimension();
+                final ResourceKey<Level> toDim = entityplayer1.level().dimension();
+                final ResourceKey<Level> OVERWORLD = Level.OVERWORLD;
+                final ResourceKey<Level> THE_NETHER = Level.NETHER;
+                if (!((fromDim != OVERWORLD || toDim != THE_NETHER) && (fromDim != THE_NETHER || toDim != OVERWORLD))) {
+                    BlockPos lastPos = entityplayer1.lastPos;
+                    if (lastPos != null) {
+                        net.minecraft.BlockUtil.FoundRectangle fromPortal = ReturnPortalManager.findPortalAt(entityplayer1, fromDim, lastPos);
+                        BlockPos toPos = entityplayer1.blockPosition();
+                        if (fromPortal != null) {
+                            ReturnPortalManager.storeReturnPortal(entityplayer1, toDim, toPos, fromPortal);
+                        }
+                    }
+                }
+            }
+            // Leaves end - nether portal fix
         }
 
         // Save player file again if they were disconnected
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 4c38bfe300fb7da9d2080784b64101f94d77f20c..4f2ce8295977bfb8e9b6e98ca5405ecbce1dd3dd 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -260,7 +260,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     protected ItemStack useItem;
     public int useItemRemaining;
     protected int fallFlyTicks;
-    private BlockPos lastPos;
+    public BlockPos lastPos; // Leaves - private -> public
     private Optional<BlockPos> lastClimbablePos;
     @Nullable
     private DamageSource lastDamageSource;
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index ddab7de1d376e9e486e2f920174397ea8804aa29..73b6e6f24852370268bdcb0b06027daa119b5091 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -172,7 +172,18 @@ public class NetherPortalBlock extends Block implements Portal {
 
     @Nullable
     private DimensionTransition getExitPortal(ServerLevel worldserver, Entity entity, BlockPos blockposition, BlockPos blockposition1, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) {
-        Optional<BlockPos> optional = worldserver.getPortalForcer().findClosestPortalPosition(blockposition1, worldborder, searchRadius);
+        // Leaves start - fix return portal
+        Optional<BlockPos> optional = Optional.empty();
+        if (org.leavesmc.leaves.LeavesConfig.netherPortalFix && entity instanceof net.minecraft.server.level.ServerPlayer player) {
+            org.leavesmc.leaves.util.ReturnPortalManager.ReturnPortal portal = org.leavesmc.leaves.util.ReturnPortalManager.findReturnPortal(player, entity.level().dimension(), entity.blockPosition());
+            if (portal != null && worldserver.getBlockState(portal.pos()).is(Blocks.NETHER_PORTAL)) {
+                optional = Optional.of(portal.pos());
+            }
+        }
+        if (optional.isEmpty()) {
+            optional = worldserver.getPortalForcer().findClosestPortalPosition(blockposition1, worldborder, searchRadius);
+        }
+        // Leaves end - fix return portal
         BlockUtil.FoundRectangle blockutil_rectangle;
         DimensionTransition.PostDimensionTransition dimensiontransition_a;
 
diff --git a/src/main/java/org/leavesmc/leaves/util/ReturnPortalManager.java b/src/main/java/org/leavesmc/leaves/util/ReturnPortalManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..67eb48e5b30d1dfa93aacbeb31f1b650b5ecb763
--- /dev/null
+++ b/src/main/java/org/leavesmc/leaves/util/ReturnPortalManager.java
@@ -0,0 +1,98 @@
+package org.leavesmc.leaves.util;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.portal.PortalForcer;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+// Powered by NetherPortalFix(https://github.com/TwelveIterationMods/NetherPortalFix)
+public class ReturnPortalManager {
+
+    private static final int MAX_PORTAL_DISTANCE_SQ = 16;
+    private static final String RETURN_PORTAL_LIST = "ReturnPortalList";
+    private static final String RETURN_PORTAL_UID = "UID";
+    private static final String FROM_DIM = "FromDim";
+    private static final String FROM_POS = "FromPos";
+    private static final String TO_POS = "ToPos";
+
+    public static BlockPos findPortalAt(Player player, ResourceKey<Level> dim, BlockPos pos) {
+        MinecraftServer server = player.level().getServer();
+        if (server != null) {
+            ServerLevel fromWorld = server.getLevel(dim);
+            if (fromWorld != null) {
+                PortalForcer portalForcer = fromWorld.getPortalForcer();
+                return portalForcer.findClosestPortalPosition(pos, false, fromWorld.getWorldBorder()).orElse(null);
+            }
+        }
+
+        return null;
+    }
+
+    public static ListTag getPlayerPortalList(Player player) {
+        CompoundTag data = player.getLeavesData();
+        ListTag list = data.getList(RETURN_PORTAL_LIST, Tag.TAG_COMPOUND);
+        data.put(RETURN_PORTAL_LIST, list);
+        return list;
+    }
+
+    @Nullable
+    public static ReturnPortal findReturnPortal(ServerPlayer player, ResourceKey<Level> fromDim, BlockPos fromPos) {
+        ListTag portalList = getPlayerPortalList(player);
+        for (Tag entry : portalList) {
+            CompoundTag portal = (CompoundTag) entry;
+            ResourceKey<Level> entryFromDim = ResourceKey.create(Registries.DIMENSION, ResourceLocation.parse(portal.getString(FROM_DIM)));
+            if (entryFromDim == fromDim) {
+                BlockPos portalTrigger = BlockPos.of(portal.getLong(FROM_POS));
+                if (portalTrigger.distSqr(fromPos) <= MAX_PORTAL_DISTANCE_SQ) {
+                    final var uid = portal.hasUUID(RETURN_PORTAL_UID) ? portal.getUUID(RETURN_PORTAL_UID) : UUID.randomUUID();
+                    final var pos = BlockPos.of(portal.getLong(TO_POS));
+                    return new ReturnPortal(uid, pos);
+                }
+            }
+        }
+
+        return null;
+    }
+
+    public static void storeReturnPortal(ServerPlayer player, ResourceKey<Level> fromDim, BlockPos fromPos, BlockPos toPos) {
+        ListTag portalList = getPlayerPortalList(player);
+        ReturnPortal returnPortal = findReturnPortal(player, fromDim, fromPos);
+        if (returnPortal != null) {
+            removeReturnPortal(player, returnPortal);
+        }
+
+        CompoundTag portalCompound = new CompoundTag();
+        portalCompound.putUUID(RETURN_PORTAL_UID, UUID.randomUUID());
+        portalCompound.putString(FROM_DIM, String.valueOf(fromDim.location()));
+        portalCompound.putLong(FROM_POS, fromPos.asLong());
+        portalCompound.putLong(TO_POS, toPos.asLong());
+        portalList.add(portalCompound);
+    }
+
+    public static void removeReturnPortal(ServerPlayer player, ReturnPortal portal) {
+        // This doesn't check if it's the right toDim, but it's probably so rare for positions to actually overlap that I don't care
+        ListTag portalList = getPlayerPortalList(player);
+        for (int i = 0; i < portalList.size(); i++) {
+            CompoundTag entry = (CompoundTag) portalList.get(i);
+            if (entry.hasUUID(RETURN_PORTAL_UID) && entry.getUUID(RETURN_PORTAL_UID).equals(portal.uid)) {
+                portalList.remove(i);
+                break;
+            }
+        }
+    }
+
+    public record ReturnPortal(UUID uid, BlockPos pos) {
+    }
+}
