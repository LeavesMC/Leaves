From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Tue, 24 Jan 2023 12:38:42 +0800
Subject: [PATCH] Return nether portal fix

This patch is powered by NetherPortalFix(https://github.com/TwelveIterationMods/NetherPortalFix)

diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 362ec0d4de4f77511651b28d47b8bdac626f935b..6e084edb04d5bbcd5b25ccd820b3950ea89408d4 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -187,6 +187,7 @@ import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.event.player.PlayerToggleSneakEvent;
 import org.bukkit.inventory.MainHand;
 import top.leavesmc.leaves.bot.ServerBot;
+import top.leavesmc.leaves.util.ReturnPortalManager;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -1293,6 +1294,24 @@ public class ServerPlayer extends Player {
                 PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), worldserver1.getWorld());
                 this.level().getCraftServer().getPluginManager().callEvent(changeEvent);
                 // CraftBukkit end
+                // Leaves start - nether portal fix
+                if (top.leavesmc.leaves.LeavesConfig.netherPortalFix) {
+                    final ResourceKey<Level> fromDim = worldserver1.dimension();
+                    final ResourceKey<Level> toDim = level().dimension();
+                    final ResourceKey<Level> OVERWORLD = Level.OVERWORLD;
+                    final ResourceKey<Level> THE_NETHER = Level.NETHER;
+                    if (!((fromDim != OVERWORLD || toDim != THE_NETHER) && (fromDim != THE_NETHER || toDim != OVERWORLD))) {
+                        BlockPos lastPos = this.lastPos;
+                        if (lastPos != null) {
+                            BlockUtil.FoundRectangle fromPortal = ReturnPortalManager.findPortalAt(this, fromDim, lastPos);
+                            BlockPos toPos = this.blockPosition();
+                            if (fromPortal != null) {
+                                ReturnPortalManager.storeReturnPortal(this, toDim, toPos, fromPortal);
+                            }
+                        }
+                    }
+                }
+                // Leaves end - nether portal fix
             }
             // Paper start - Reset shield blocking on dimension change
             if (this.isBlocking()) {
@@ -1345,6 +1364,30 @@ public class ServerPlayer extends Player {
     protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) { // CraftBukkit
         Optional<BlockUtil.FoundRectangle> optional = super.getExitPortal(worldserver, blockposition, flag, worldborder, searchRadius, canCreatePortal, createRadius); // CraftBukkit
 
+        // Leaves start - nether portal fix
+        if (top.leavesmc.leaves.LeavesConfig.netherPortalFix) {
+            BlockPos fromPos = blockPosition();
+            final ResourceKey<Level> fromDim = level().dimension();
+            final ResourceKey<Level> toDim = level().dimension();
+            final ResourceKey<Level> OVERWORLD = Level.OVERWORLD;
+            final ResourceKey<Level> THE_NETHER = Level.NETHER;
+            boolean isTeleportBetweenNetherAndOverworld = (fromDim == OVERWORLD && toDim == THE_NETHER)
+                || (fromDim == THE_NETHER && toDim == OVERWORLD);
+            if (isInsidePortal && isTeleportBetweenNetherAndOverworld) {
+                ReturnPortalManager.ReturnPortal returnPortal = ReturnPortalManager.findReturnPortal(this, fromDim, fromPos);
+                if (returnPortal != null) {
+                    MinecraftServer server = getServer();
+                    if (server != null) {
+                        Level toLevel = server.getLevel(toDim);
+                        if (toLevel != null) {
+                            return Optional.of(returnPortal.rectangle());
+                        }
+                    }
+                }
+            }
+        }
+        // Leaves end - nether portal fix
+
         if (optional.isPresent() || !canCreatePortal) { // CraftBukkit
             return optional;
         } else {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 82751434c31fe8825f32921f498fd0156da15454..03c278836208a65b77030b629f2b7678ded29b03 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -122,6 +122,7 @@ import org.bukkit.event.player.PlayerSpawnChangeEvent;
 // CraftBukkit end
 
 import top.leavesmc.leaves.bot.ServerBot;
+import top.leavesmc.leaves.util.ReturnPortalManager; // Leaves - return portal fix
 
 public abstract class PlayerList {
 
@@ -1004,6 +1005,24 @@ public abstract class PlayerList {
         if (fromWorld != location.getWorld()) {
             PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(entityplayer.getBukkitEntity(), fromWorld);
             this.server.server.getPluginManager().callEvent(event);
+            // Leaves start - nether portal fix
+            if (top.leavesmc.leaves.LeavesConfig.netherPortalFix) {
+                final ResourceKey<Level> fromDim = entityplayer.level().dimension();
+                final ResourceKey<Level> toDim = entityplayer1.level().dimension();
+                final ResourceKey<Level> OVERWORLD = Level.OVERWORLD;
+                final ResourceKey<Level> THE_NETHER = Level.NETHER;
+                if (!((fromDim != OVERWORLD || toDim != THE_NETHER) && (fromDim != THE_NETHER || toDim != OVERWORLD))) {
+                    BlockPos lastPos = entityplayer1.lastPos;
+                    if (lastPos != null) {
+                        net.minecraft.BlockUtil.FoundRectangle fromPortal = ReturnPortalManager.findPortalAt(entityplayer1, fromDim, lastPos);
+                        BlockPos toPos = entityplayer1.blockPosition();
+                        if (fromPortal != null) {
+                            ReturnPortalManager.storeReturnPortal(entityplayer1, toDim, toPos, fromPortal);
+                        }
+                    }
+                }
+            }
+            // Leaves end - nether portal fix
         }
 
         // Save player file again if they were disconnected
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 15c8e9214b7df1cf1e9252a17b7acfc080e547a3..ffa9ada2e803bc77f8cae4be81ac4b5c2eee0b7f 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -241,7 +241,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     protected ItemStack useItem;
     public int useItemRemaining;
     protected int fallFlyTicks;
-    private BlockPos lastPos;
+    public BlockPos lastPos; // Leaves - private -> public
     private Optional<BlockPos> lastClimbablePos;
     @Nullable
     private DamageSource lastDamageSource;
diff --git a/src/main/java/top/leavesmc/leaves/util/ReturnPortalManager.java b/src/main/java/top/leavesmc/leaves/util/ReturnPortalManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..24f887cbe608eea3beb7dc69cabdca7f32a66a9d
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/util/ReturnPortalManager.java
@@ -0,0 +1,105 @@
+package top.leavesmc.leaves.util;
+
+import net.minecraft.BlockUtil;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.portal.PortalForcer;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+// Powered by NetherPortalFix(https://github.com/TwelveIterationMods/NetherPortalFix)
+public class ReturnPortalManager {
+
+    private static final int MAX_PORTAL_DISTANCE_SQ = 16;
+    private static final String RETURN_PORTAL_LIST = "ReturnPortalList";
+    private static final String RETURN_PORTAL_UID = "UID";
+    private static final String FROM_DIM = "FromDim";
+    private static final String FROM_POS = "FromPos";
+    private static final String TO_MIN_CORNER = "ToMinCorner";
+    private static final String TO_AXIS_1_SIZE = "ToAxis1Size";
+    private static final String TO_AXIS_2_SIZE = "ToAxis2Size";
+
+    public static BlockUtil.FoundRectangle findPortalAt(Player player, ResourceKey<Level> dim, BlockPos pos) {
+        MinecraftServer server = player.level().getServer();
+        if (server != null) {
+            ServerLevel fromWorld = server.getLevel(dim);
+            if (fromWorld != null) {
+                PortalForcer portalForcer = fromWorld.getPortalForcer();
+                return portalForcer.findPortalAround(pos, false, fromWorld.getWorldBorder()).orElse(null);
+            }
+        }
+
+        return null;
+    }
+
+    public static ListTag getPlayerPortalList(Player player) {
+        CompoundTag data = player.getLeavesData();
+        ListTag list = data.getList(RETURN_PORTAL_LIST, Tag.TAG_COMPOUND);
+        data.put(RETURN_PORTAL_LIST, list);
+        return list;
+    }
+
+    @Nullable
+    public static ReturnPortal findReturnPortal(ServerPlayer player, ResourceKey<Level> fromDim, BlockPos fromPos) {
+        ListTag portalList = getPlayerPortalList(player);
+        for (Tag entry : portalList) {
+            CompoundTag portal = (CompoundTag) entry;
+            ResourceKey<Level> entryFromDim = ResourceKey.create(Registries.DIMENSION, new ResourceLocation(portal.getString(FROM_DIM)));
+            if (entryFromDim == fromDim) {
+                BlockPos portalTrigger = BlockPos.of(portal.getLong(FROM_POS));
+                if (portalTrigger.distSqr(fromPos) <= MAX_PORTAL_DISTANCE_SQ) {
+                    UUID uid = portal.hasUUID(RETURN_PORTAL_UID) ? portal.getUUID(RETURN_PORTAL_UID) : UUID.randomUUID();
+                    BlockPos minCorner = BlockPos.of(portal.getLong(TO_MIN_CORNER));
+                    int axis1Size = portal.getInt(TO_AXIS_1_SIZE);
+                    int axis2Size = portal.getInt(TO_AXIS_2_SIZE);
+                    return new ReturnPortal(uid, new BlockUtil.FoundRectangle(minCorner, axis1Size, axis2Size));
+                }
+            }
+        }
+
+        return null;
+    }
+
+    public static void storeReturnPortal(ServerPlayer player, ResourceKey<Level> fromDim, BlockPos fromPos, BlockUtil.FoundRectangle toPortal) {
+        ListTag portalList = getPlayerPortalList(player);
+        ReturnPortal returnPortal = findReturnPortal(player, fromDim, fromPos);
+        if (returnPortal != null) {
+            removeReturnPortal(player, returnPortal);
+        }
+
+        CompoundTag portalCompound = new CompoundTag();
+        portalCompound.putUUID(RETURN_PORTAL_UID, UUID.randomUUID());
+        portalCompound.putString(FROM_DIM, String.valueOf(fromDim.location()));
+        portalCompound.putLong(FROM_POS, fromPos.asLong());
+        portalCompound.putLong(TO_MIN_CORNER, toPortal.minCorner.asLong());
+        portalCompound.putInt(TO_AXIS_1_SIZE, toPortal.axis1Size);
+        portalCompound.putInt(TO_AXIS_2_SIZE, toPortal.axis2Size);
+        portalList.add(portalCompound);
+    }
+
+    public static void removeReturnPortal(ServerPlayer player, ReturnPortal portal) {
+        // This doesn't check if it's the right toDim, but it's probably so rare for positions to actually overlap that I don't care
+        ListTag portalList = getPlayerPortalList(player);
+        for (int i = 0; i < portalList.size(); i++) {
+            CompoundTag entry = (CompoundTag) portalList.get(i);
+            if (entry.hasUUID(RETURN_PORTAL_UID) && entry.getUUID(RETURN_PORTAL_UID).equals(portal.uid())) {
+                portalList.remove(i);
+                break;
+            }
+        }
+    }
+
+    public record ReturnPortal(UUID uid, BlockUtil.FoundRectangle rectangle) {
+    }
+}
