From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sun, 2 Jul 2023 09:25:00 +0800
Subject: [PATCH] Elytra aeronautics no chunk load


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index c32002aca09ec20aadfe71c2626672e75255a31a..b460bef510213f10a913c162d9a167146c6b019d 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -150,7 +150,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
     // Paper end - use distance map to optimise tracker
 
-    void addPlayerToDistanceMaps(ServerPlayer player) {
+    public void addPlayerToDistanceMaps(ServerPlayer player) { // Leaves - package -> public
         int chunkX = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.getX());
         int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.getZ());
         // Note: players need to be explicitly added to distance maps before they can be updated
@@ -166,7 +166,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper end - use distance map to optimise entity tracker
     }
 
-    void removePlayerFromDistanceMaps(ServerPlayer player) {
+    public void removePlayerFromDistanceMaps(ServerPlayer player) { // Leaves - package -> public
         int chunkX = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.getX());
         int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.getZ());
         // Note: players need to be explicitly added to distance maps before they can be updated
@@ -963,7 +963,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     private boolean skipPlayer(ServerPlayer player) {
-        return player.isSpectator() && !this.level.getGameRules().getBoolean(GameRules.RULE_SPECTATORSGENERATECHUNKS);
+        return (player.isSpectator() && !this.level.getGameRules().getBoolean(GameRules.RULE_SPECTATORSGENERATECHUNKS))
+            || (top.leavesmc.leaves.LeavesConfig.elytraAeronauticsNoChunk && player.elytraAeronauticsNoChunk); // Leaves - Elytra aeronautics
     }
 
     void updatePlayerStatus(ServerPlayer player, boolean added) {
@@ -1000,6 +1001,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     public void move(ServerPlayer player) {
+        if (player.elytraAeronauticsNoChunk) return; // Leaves - no chunk
         // Paper - delay this logic for the entity tracker tick, no need to duplicate it
 
         SectionPos sectionposition = player.getLastSectionPos();
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 8f2bb7df5c0925b2ef700aebfcbdc539a4dddfe1..08d66f20294b7f4ef0f3f6c5ef799348ea3d9ce5 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -545,7 +545,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
 
                 // Paper start - Prevent moving into unloaded chunks
-                if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && (
+                if (this.player.level().paperConfig().chunks.preventMovingIntoUnloadedChunks && !player.elytraAeronauticsNoChunk && ( // Leaves - no chunk load
                     !worldserver.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position()))) ||
                         !worldserver.areChunksLoadedForMove(entity.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(entity.position())))
                     )) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1a606bbcb1c3f2f72fcc2c7ad1a6d50ec8a26efb..875b4cf7243681062b6f4081f6b6e9db07e8c1a3 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1102,7 +1102,13 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
                     return;
                 }
             }
-
+            // Leaves start - elytra aeronautics
+            if (top.leavesmc.leaves.LeavesConfig.elytraAeronauticsNoChunk && this instanceof Player player) {
+                if (movementType == MoverType.PLAYER && player.isFallFlying()) {
+                    top.leavesmc.leaves.util.ElytraAeronauticsHelper.flightBehaviour(player, movement);
+                }
+            }
+            // Leaves end - elytra aeronautics
             this.level().getProfiler().push("move");
             if (this.stuckSpeedMultiplier.lengthSqr() > 1.0E-7D) {
                 movement = movement.multiply(this.stuckSpeedMultiplier);
@@ -2037,6 +2043,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         this.yo = y;
         this.zo = d4;
         this.setPos(d3, y, d4);
+        if (this instanceof Player player && player.elytraAeronauticsNoChunk) return; // Leaves - elytra aeronautics
         if (this.valid) this.level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 94c61e011b757ded6bc2029cc60d0f6891c8fc9e..c53c9e62763bde9d291c469c71a0a4db55e3a793 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -182,6 +182,8 @@ public abstract class Player extends LivingEntity {
     public float hurtDir; // Paper - protected -> public
     public boolean affectsSpawning = true; // Paper - Affects Spawning API
     public net.kyori.adventure.util.TriState flyingFallDamage = net.kyori.adventure.util.TriState.NOT_SET; // Paper - flying fall damage
+    // Paper end
+    public boolean elytraAeronauticsNoChunk = false; // Leaves - Elytra aeronautics
 
     // CraftBukkit start
     public boolean fauxSleeping;
diff --git a/src/main/java/top/leavesmc/leaves/util/ElytraAeronauticsHelper.java b/src/main/java/top/leavesmc/leaves/util/ElytraAeronauticsHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc25e2f960a2936e656541c0fe13745e62451179
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/util/ElytraAeronauticsHelper.java
@@ -0,0 +1,39 @@
+package top.leavesmc.leaves.util;
+
+import net.minecraft.core.SectionPos;
+import net.minecraft.network.chat.Component;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.phys.Vec3;
+import top.leavesmc.leaves.LeavesConfig;
+
+public class ElytraAeronauticsHelper {
+
+    public static void flightBehaviour(Player player, Vec3 velocity) {
+        if (LeavesConfig.elytraAeronauticsNoChunk) {
+            if ((LeavesConfig.elytraAeronauticsNoChunkSpeed <= 0.0D || velocity.horizontalDistanceSqr() >= LeavesConfig.elytraAeronauticsNoChunkSpeed)
+                && (LeavesConfig.elytraAeronauticsNoChunkHeight <= 0.0D || player.getY() >= LeavesConfig.elytraAeronauticsNoChunkHeight)) {
+                if (!player.elytraAeronauticsNoChunk) {
+                    player.elytraAeronauticsNoChunk = true;
+                    ServerPlayer serverPlayer = (ServerPlayer) player;
+                    if (LeavesConfig.elytraAeronauticsNoChunkMes) {
+                        serverPlayer.sendSystemMessage(Component.literal(LeavesConfig.elytraAeronauticsNoChunkStartMes), true);
+                    }
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.removePlayerFromDistanceMaps(serverPlayer);
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.getDistanceManager().removePlayer(serverPlayer.getLastSectionPos(), serverPlayer);
+                }
+            } else {
+                if (player.elytraAeronauticsNoChunk) {
+                    player.elytraAeronauticsNoChunk = false;
+                    ServerPlayer serverPlayer = (ServerPlayer) player;
+                    if (LeavesConfig.elytraAeronauticsNoChunkMes) {
+                        serverPlayer.sendSystemMessage(Component.literal(LeavesConfig.elytraAeronauticsNoChunkEndMes), true);
+                    }
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.addPlayerToDistanceMaps(serverPlayer);
+                    ((ServerLevel) serverPlayer.level()).chunkSource.chunkMap.getDistanceManager().addPlayer(SectionPos.of(serverPlayer), serverPlayer);
+                }
+            }
+        }
+    }
+}
