From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Thu, 3 Aug 2023 14:21:47 +0800
Subject: [PATCH] Force peaceful mode switch


diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 45cac95d44509ec8fcc46177a47c307398d756b4..337caea07f43388ec1fb16fcc8a527c40e7fb0bb 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -76,6 +76,12 @@ public class ServerChunkCache extends ChunkSource {
 
     private final LevelChunk[] lastLoadedChunks = new LevelChunk[4 * 4];
 
+    // Leaves start - peaceful mode switch
+    public int peacefulModeSwitchTick = -1;
+    public int peacefulModeSwitchCount = -1;
+    private final List<Class<? extends Entity>> peacefulModeSwitchEntityTypes = List.of(net.minecraft.world.entity.boss.wither.WitherBoss.class, net.minecraft.world.entity.monster.Shulker.class, net.minecraft.world.entity.monster.warden.Warden.class);
+    // Leaves end - peaceful mode switch
+
     private static int getChunkCacheKey(int x, int z) {
         return x & 3 | ((z & 3) << 2);
     }
@@ -514,6 +520,22 @@ public class ServerChunkCache extends ChunkSource {
                 this.level.resetIceAndSnowTick();
             }
             // Leaves end - reset ice & snow tick random
+
+            // Leaves start - peaceful mode switch
+            if (peacefulModeSwitchTick > 0) {
+                if (this.level.getLevelData().getGameTime() % peacefulModeSwitchTick == 0) {
+                    peacefulModeSwitchCount = 0;
+                    this.level.getAllEntities().forEach(entity -> {
+                        if (peacefulModeSwitchEntityTypes.contains(entity.getClass())) {
+                            peacefulModeSwitchCount++;
+                        }
+                    });
+                }
+            } else {
+                peacefulModeSwitchCount = -1;
+            }
+            // Leaves end - peaceful mode switch
+
             int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
             boolean flag1 = level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && worlddata.getGameTime() % level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
 
@@ -603,6 +625,16 @@ public class ServerChunkCache extends ChunkSource {
                 Collections.shuffle(shuffled);
                 iterator1 = shuffled.iterator();
             }
+
+            // Leaves start - peaceful mode switch
+            boolean peacefulModeSwitch = false;
+            if (lastSpawnState != null && peacefulModeSwitchCount != -1) {
+                if (peacefulModeSwitchCount >= NaturalSpawner.globalLimitForCategory(level, net.minecraft.world.entity.MobCategory.MONSTER, lastSpawnState.getSpawnableChunkCount())) {
+                    peacefulModeSwitch = true;
+                }
+            }
+            // Leaves end - peaceful mode switch
+
             try {
             // Paper end - optimise chunk tick iteration
             while (iterator1.hasNext()) {
@@ -635,7 +667,7 @@ public class ServerChunkCache extends ChunkSource {
                 if (tick && chunk1.chunkStatus.isOrAfter(net.minecraft.server.level.FullChunkStatus.ENTITY_TICKING)) { // Paper - optimise chunk tick iteration
                     chunk1.incrementInhabitedTime(j);
                     if (spawn && flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair)) { // Spigot // Paper - optimise chunk tick iteration
-                        NaturalSpawner.spawnForChunk(this.level, chunk1, spawnercreature_d, this.spawnFriendlies, this.spawnEnemies, flag1);
+                        NaturalSpawner.spawnForChunk(this.level, chunk1, spawnercreature_d, this.spawnFriendlies, this.spawnEnemies, flag1, peacefulModeSwitch); // Leaves - peaceful mode switch
                     }
 
                     if (true || this.level.shouldTickBlocksAt(chunkcoordintpair.toLong())) { // Paper - optimise chunk tick iteration
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 7eec9dc8237ff04c53b573c3cc87e6cdbfdda7ed..2aafb872578d266f2826e5bddebc9b4ab9b5050b 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -133,6 +133,12 @@ public final class NaturalSpawner {
     }
 
     public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn) {
+        // Leaves start - peaceful mode switch
+        spawnForChunk(world, chunk, info, spawnAnimals, spawnMonsters, rareSpawn, false);
+    }
+
+    public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn, boolean peacefulModeSwitch) {
+        // Leaves end - peaceful mode switch
         world.getProfiler().push("spawner");
         MobCategory[] aenumcreaturetype = NaturalSpawner.SPAWNING_CATEGORIES;
         int i = aenumcreaturetype.length;
@@ -141,6 +147,11 @@ public final class NaturalSpawner {
 
         for (int j = 0; j < i; ++j) {
             MobCategory enumcreaturetype = aenumcreaturetype[j];
+            // Leaves start - peaceful mode switch
+            if (enumcreaturetype == MobCategory.MONSTER && peacefulModeSwitch) {
+                continue;
+            }
+            // Leaves end - peaceful mode switch
             // CraftBukkit start - Use per-world spawn limits
             boolean spawnThisTick = true;
             int limit = enumcreaturetype.getMaxInstancesPerChunk();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 0e670de77a7f9926e295e1dd63d909bed1a959ca..ad07b41b8b2a595464e8dfe65de8dadca15cc6db 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2299,6 +2299,18 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return CraftFeatureFlag.getFromNMS(this.getHandle().enabledFeatures()).stream().map(FeatureFlag.class::cast).collect(Collectors.toUnmodifiableSet());
     }
 
+    // Leaves start - unsupported settings
+    @Override
+    public void setPeacefulModeSwitchTick(int tick) {
+        this.getHandle().chunkSource.peacefulModeSwitchTick = tick;
+    }
+
+    @Override
+    public int getPeacefulModeSwitchTick() {
+        return this.getHandle().chunkSource.peacefulModeSwitchTick;
+    }
+    // Leaves end - unsupported settings
+
     public void storeBukkitValues(CompoundTag c) {
         if (!this.persistentDataContainer.isEmpty()) {
             c.put("BukkitValues", this.persistentDataContainer.toTagCompound());
diff --git a/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java b/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java
index 8027a27b253db02570c2f28ebb200001b76a1fc3..da1f7ce2db23c509c70f673c8bb1c46af2ed7279 100644
--- a/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java
+++ b/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java
@@ -12,6 +12,7 @@ import org.bukkit.permissions.PermissionDefault;
 import org.bukkit.plugin.PluginManager;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.command.subcommands.PeacefulModeSwitchCommand;
 import top.leavesmc.leaves.command.subcommands.UpdateCommand;
 
 import java.util.ArrayList;
@@ -33,6 +34,7 @@ public final class LeavesCommand extends Command {
     private static final Map<String, LeavesSubcommand> SUBCOMMANDS = Util.make(() -> {
         final Map<Set<String>, LeavesSubcommand> commands = new HashMap<>();
         commands.put(Set.of("update"), new UpdateCommand());
+        commands.put(Set.of("peaceful"), new PeacefulModeSwitchCommand());
 
         return commands.entrySet().stream()
             .flatMap(entry -> entry.getKey().stream().map(s -> Map.entry(s, entry.getValue())))
diff --git a/src/main/java/top/leavesmc/leaves/command/subcommands/PeacefulModeSwitchCommand.java b/src/main/java/top/leavesmc/leaves/command/subcommands/PeacefulModeSwitchCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..417689ab712ce21ee05fa05ffec35b9ff163e324
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/command/subcommands/PeacefulModeSwitchCommand.java
@@ -0,0 +1,87 @@
+package top.leavesmc.leaves.command.subcommands;
+
+import io.papermc.paper.command.CommandUtil;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.JoinConfiguration;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.MobCategory;
+import net.minecraft.world.level.NaturalSpawner;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.Player;
+import top.leavesmc.leaves.command.LeavesSubcommand;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public class PeacefulModeSwitchCommand implements LeavesSubcommand {
+
+    @Override
+    public boolean execute(CommandSender sender, String subCommand, String[] args) {
+        World world;
+        if (args.length == 0) {
+            if (sender instanceof Player player) {
+                world = player.getWorld();
+            } else {
+                sender.sendMessage(Component.text("Must specify a world! ex: '/leaves peaceful world'", NamedTextColor.RED));
+                return true;
+            }
+        } else {
+            final String input = args[0];
+            final World inputWorld = Bukkit.getWorld(input);
+            if (inputWorld == null) {
+                sender.sendMessage(Component.text("'" + input + "' is not a valid world!", NamedTextColor.RED));
+                return true;
+            } else {
+                world = inputWorld;
+            }
+        }
+
+        final ServerLevel level = ((CraftWorld) world).getHandle();
+        int chunks = 0;
+        if (level.chunkSource.getLastSpawnState() != null) {
+            chunks = level.chunkSource.getLastSpawnState().getSpawnableChunkCount();
+        }
+
+        sender.sendMessage(Component.join(JoinConfiguration.noSeparators(),
+            Component.text("Peaceful Mode Switch for world: "),
+            Component.text(world.getName(), NamedTextColor.AQUA)
+        ));
+
+        sender.sendMessage(Component.join(JoinConfiguration.noSeparators(),
+            Component.text("Refuses per "),
+            Component.text(level.chunkSource.peacefulModeSwitchTick, level.chunkSource.peacefulModeSwitchTick > 0 ? NamedTextColor.AQUA : NamedTextColor.GRAY),
+            Component.text(" tick")
+        ));
+
+        int count = level.chunkSource.peacefulModeSwitchCount;
+        int limit = NaturalSpawner.globalLimitForCategory(level, MobCategory.MONSTER, chunks);
+        NamedTextColor color = count >= limit ? NamedTextColor.AQUA : NamedTextColor.GRAY;
+
+        sender.sendMessage(Component.join(JoinConfiguration.noSeparators(),
+            Component.text("Now count "),
+            Component.text(count, color),
+            Component.text("/", color),
+            Component.text(limit, color)
+        ));
+
+        return true;
+    }
+
+    @Override
+    public List<String> tabComplete(final CommandSender sender, final String subCommand, final String[] args) {
+        return CommandUtil.getListMatchingLast(sender, args, this.suggestPeacefulModeSwitch(args));
+    }
+
+    private List<String> suggestPeacefulModeSwitch(final String[] args) {
+        if (args.length == 1) {
+            return new ArrayList<>(Bukkit.getWorlds().stream().map(World::getName).toList());
+        }
+
+        return Collections.emptyList();
+    }
+}
