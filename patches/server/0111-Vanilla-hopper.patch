From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Fri, 26 Jan 2024 01:36:34 +0800
Subject: [PATCH] Vanilla hopper

This is a temporary solution designed to attempt to restore the vanilla behavior of the funnel while preserving optimizations as much as possible. It should ultimately be replaced by the optimization solution provided by lithium.

diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index af3846dbb29d4738d0cce20c85d2f40c7ccf4f70..1a2a7e100ad56d00e98844f4fa7f44cede6fa1d8 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -305,36 +305,49 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         ItemStack movedItem = origItemStack;
         final int originalItemCount = origItemStack.getCount();
         final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
-        container.setChanged(); // original logic always marks source inv as changed even if no move happens.
-        movedItem.setCount(movedItemCount);
-
-        if (!skipPullModeEventFire) {
-            movedItem = callPullMoveEvent(hopper, container, movedItem);
-            if (movedItem == null) { // cancelled
-                origItemStack.setCount(originalItemCount);
-                // Drastically improve performance by returning true.
-                // No plugin could of relied on the behavior of false as the other call
-                // site for IMIE did not exhibit the same behavior
+        // Leaves start - fix vanilla
+        if (org.leavesmc.leaves.LeavesConfig.fix.vanillaHopper && movedItem.getCount() <= movedItemCount) {
+            movedItem = origItemStack.copy();
+            final ItemStack remainingItem = addItem(container, hopper,  container.removeItem(i, movedItemCount), null);
+            if (remainingItem.isEmpty()) {
+                container.setChanged();
                 return true;
             }
-        }
 
-        final ItemStack remainingItem = addItem(container, hopper, movedItem, null);
-        final int remainingItemCount = remainingItem.getCount();
-        if (remainingItemCount != movedItemCount) {
-            origItemStack = origItemStack.copy(true);
-            origItemStack.setCount(originalItemCount);
-            if (!origItemStack.isEmpty()) {
-                origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
+            container.setItem(i, movedItem);
+        } else {
+            container.setChanged(); // original logic always marks source inv as changed even if no move happens.
+            movedItem.setCount(movedItemCount);
+
+            if (!skipPullModeEventFire) {
+                movedItem = callPullMoveEvent(hopper, container, movedItem);
+                if (movedItem == null) { // cancelled
+                    origItemStack.setCount(originalItemCount);
+                    // Drastically improve performance by returning true.
+                    // No plugin could of relied on the behavior of false as the other call
+                    // site for IMIE did not exhibit the same behavior
+                    return true;
+                }
             }
 
-            ignoreTileUpdates = true;
-            container.setItem(i, origItemStack);
-            ignoreTileUpdates = false;
-            container.setChanged();
-            return true;
+            final ItemStack remainingItem = addItem(container, hopper, movedItem, null);
+            final int remainingItemCount = remainingItem.getCount();
+            if (remainingItemCount != movedItemCount) {
+                origItemStack = origItemStack.copy(true);
+                origItemStack.setCount(originalItemCount);
+                if (!origItemStack.isEmpty()) {
+                    origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
+                }
+
+                ignoreTileUpdates = true;
+                container.setItem(i, origItemStack);
+                ignoreTileUpdates = false;
+                container.setChanged();
+                return true;
+            }
+            origItemStack.setCount(originalItemCount);
         }
-        origItemStack.setCount(originalItemCount);
+        // Leaves end - fix vanilla
 
         if (level.paperConfig().hopper.cooldownWhenFull && !org.leavesmc.leaves.LeavesConfig.modify.mcTechnicalMode) { // Leaves
             cooldownHopper(hopper);
@@ -605,7 +618,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
             return false;
         } else {
-            boolean flag = hopper.isGridAligned() && iblockdata.isCollisionShapeFullBlock(world, blockposition) && !iblockdata.is(BlockTags.DOES_NOT_BLOCK_HOPPERS);
+            boolean flag = hopper.isGridAligned() && (org.leavesmc.leaves.LeavesConfig.modify.oldMC.oldHopperSuckInBehavior || iblockdata.isCollisionShapeFullBlock(world, blockposition)) && !iblockdata.is(BlockTags.DOES_NOT_BLOCK_HOPPERS);
 
             if (!flag) {
                 Iterator iterator = HopperBlockEntity.getItemsAtAndAbove(world, hopper).iterator();
