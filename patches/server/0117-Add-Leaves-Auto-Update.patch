From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7studio@foxmail.com>
Date: Sun, 6 Aug 2023 09:57:53 +0800
Subject: [PATCH] Add Leaves Auto Update


diff --git a/src/main/java/top/leavesmc/leaves/LeavesConfig.java b/src/main/java/top/leavesmc/leaves/LeavesConfig.java
index 952f9798aa2818eaac9b9f60acb2808f58e92e86..445e2bad15a3509f7f48f2c43657a4bdf0fea1b2 100644
--- a/src/main/java/top/leavesmc/leaves/LeavesConfig.java
+++ b/src/main/java/top/leavesmc/leaves/LeavesConfig.java
@@ -16,6 +16,7 @@ import top.leavesmc.leaves.bot.agent.Actions;
 import top.leavesmc.leaves.command.NoBlockUpdateCommand;
 import top.leavesmc.leaves.profile.LeavesMinecraftSessionService;
 import top.leavesmc.leaves.protocol.syncmatica.SyncmaticaProtocol;
+import top.leavesmc.leaves.util.LeavesUpdateHelper;
 import top.leavesmc.leaves.util.MathUtils;
 import top.leavesmc.leaves.protocol.CarpetServerProtocol.CarpetRule;
 import top.leavesmc.leaves.protocol.CarpetServerProtocol.CarpetRules;
@@ -819,6 +820,7 @@ public final class LeavesConfig {
     private static void autoUpdate() {
         autoUpdate = getBoolean("settings.misc.auto-update.enable", autoUpdate);
         autoUpdateTime = getList("settings.misc.auto-update.time", autoUpdateTime);
+        LeavesUpdateHelper.init();
         if (autoUpdate) {
             LeavesLogger.LOGGER.warning("Auto-Update is not completely safe. Enabling it may cause data security problems!");
         }
diff --git a/src/main/java/top/leavesmc/leaves/util/LeavesUpdateHelper.java b/src/main/java/top/leavesmc/leaves/util/LeavesUpdateHelper.java
index 7476f6c5bf8c4572878159a74507193e3c4a6207..98d89ee4791e09540d175770ec3ea7a91aed9806 100644
--- a/src/main/java/top/leavesmc/leaves/util/LeavesUpdateHelper.java
+++ b/src/main/java/top/leavesmc/leaves/util/LeavesUpdateHelper.java
@@ -7,8 +7,11 @@ import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
 import net.minecraft.Util;
+import net.minecraft.world.level.gameevent.vibrations.VibrationSystem;
 import org.bukkit.Bukkit;
+import org.checkerframework.checker.units.qual.C;
 import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.LeavesConfig;
 import top.leavesmc.leaves.LeavesLogger;
 
 import java.io.BufferedReader;
@@ -26,6 +29,12 @@ import java.nio.channels.ReadableByteChannel;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.MessageDigest;
+import java.time.Duration;
+import java.time.LocalTime;
+import java.util.*;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReentrantLock;
 
 import static java.nio.file.StandardOpenOption.CREATE;
@@ -40,7 +49,10 @@ public class LeavesUpdateHelper {
     private final static ReentrantLock updateLock = new ReentrantLock();
     private static boolean updateTaskStarted = false;
 
-    public static void initAutoUpdate() {
+    private static int latestBuild = 0;
+    private static final ScheduledExecutorService autoUpdateExecutor = Executors.newScheduledThreadPool(1);
+
+    public static void init() {
         File workingDirFile = new File(autoUpdateDir);
         if (!workingDirFile.exists()) {
             workingDirFile.mkdir();
@@ -59,6 +71,24 @@ public class LeavesUpdateHelper {
         if (!leavesUpdateDir.exists()) {
             leavesUpdateDir.mkdir();
         }
+
+        if (LeavesConfig.autoUpdate) {
+            LocalTime currentTime = LocalTime.now();
+            long dailyTaskPeriod = 24 * 60 * 60 * 1000;
+
+            for (String time : LeavesConfig.autoUpdateTime) {
+                try {
+                    LocalTime taskTime = LocalTime.of(Integer.parseInt(time.split(":")[0]), Integer.parseInt(time.split(":")[1]));
+                    Duration task = Duration.between(currentTime, taskTime);
+                    if (task.isNegative()) {
+                        task = task.plusDays(1);
+                    }
+                    autoUpdateExecutor.scheduleAtFixedRate(LeavesUpdateHelper::tryUpdateLeaves, task.toMillis(), dailyTaskPeriod, TimeUnit.MILLISECONDS);
+                } catch (Exception ignored){
+                    LeavesLogger.LOGGER.warning("Illegal auto-update time ignored: " + time);
+                }
+            }
+        }
     }
 
     public static void tryUpdateLeaves() {
@@ -66,12 +96,7 @@ public class LeavesUpdateHelper {
         try {
             if (!updateTaskStarted) {
                 updateTaskStarted = true;
-                new Thread(new Runnable() {
-                    @Override
-                    public void run() {
-                        downloadLeaves();
-                    }
-                }).start();
+                new Thread(LeavesUpdateHelper::downloadLeaves).start();
             }
         } finally {
             updateLock.unlock();
@@ -83,7 +108,7 @@ public class LeavesUpdateHelper {
         String version = Bukkit.getVersion();
 
         if (version.startsWith("null")) {
-            LeavesLogger.LOGGER.info("IDE?");
+            LeavesLogger.LOGGER.info("IDE? Can not update!");
             updateTaskStarted = false;
             return;
         }
@@ -94,6 +119,12 @@ public class LeavesUpdateHelper {
         LeavesBuildInfo buildInfo = getLatestBuildInfo(minecraftVersion, gitHash);
 
         if (buildInfo != LeavesBuildInfo.NULL) {
+            if (buildInfo.alreadyUpdate) {
+                LeavesLogger.LOGGER.warning("Already update, please restart your server.");
+                updateTaskStarted = false;
+                return;
+            }
+
             if (!buildInfo.needUpdate) {
                 LeavesLogger.LOGGER.warning("You are running the latest version, stopping update.");
                 updateTaskStarted = false;
@@ -134,7 +165,7 @@ public class LeavesUpdateHelper {
                 }
 
                 LeavesLogger.LOGGER.info("Download " + buildInfo.fileName + " completed.");
-                if (!isFileValid(outFile, buildInfo.sha256)) {
+                if (isFileValid(outFile, buildInfo.sha256)) {
                     LeavesLogger.LOGGER.warning("Hash check failed for downloaded file " + buildInfo.fileName);
                     Files.deleteIfExists(outFile);
                     updateTaskStarted = false;
@@ -183,7 +214,7 @@ public class LeavesUpdateHelper {
     private static String toHexString(byte @NotNull [] bytes) {
         StringBuilder builder = new StringBuilder();
         for (byte b : bytes) {
-            builder.append(String.format("%02x", b));
+            builder.append(Integer.toHexString(b & 0xFF));
         }
         return builder.toString();
     }
@@ -197,11 +228,20 @@ public class LeavesUpdateHelper {
                 JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
                 String channel = obj.get("channel").getAsString();
 
-                if (channel.equals("default")) {
+                if ("default".equals(channel)) {
                     int build = obj.get("build").getAsInt();
 
                     JsonArray changes =  obj.get("changes").getAsJsonArray();
                     boolean needUpdate = true;
+                    boolean alreadyUpdate = false;
+
+                    if (build > latestBuild) {
+                        latestBuild = build;
+                    } else {
+                        needUpdate = false;
+                        alreadyUpdate = true;
+                    }
+
                     for (JsonElement change : changes) {
                         if (change.getAsJsonObject().get("commit").getAsString().startsWith(gitHash)) {
                             needUpdate = false;
@@ -214,7 +254,7 @@ public class LeavesUpdateHelper {
                     String sha256 = downloadInfo.get("sha256").getAsString();
                     String githubUrl = downloadInfo.get("url").getAsString();
                     String cdnUrl = downloadInfo.get("cdn_url").getAsString();
-                    return new LeavesBuildInfo(build, name, sha256, needUpdate, cdnUrl, githubUrl);
+                    return new LeavesBuildInfo(build, name, sha256, needUpdate, alreadyUpdate, cdnUrl, githubUrl);
                 } else {
                     return LeavesBuildInfo.NULL;
                 }
@@ -228,7 +268,7 @@ public class LeavesUpdateHelper {
         }
     }
 
-    private record LeavesBuildInfo(int build, String fileName, String sha256, boolean needUpdate, String cdnUrl, String githubUrl) {
-        public static LeavesBuildInfo NULL = new LeavesBuildInfo(-1, null, null, false, null, null);
+    private record LeavesBuildInfo(int build, String fileName, String sha256, boolean needUpdate, boolean alreadyUpdate, String cdnUrl, String githubUrl) {
+        public static LeavesBuildInfo NULL = new LeavesBuildInfo(-1, null, null, false, false, null, null);
     }
 }
