From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sat, 5 Aug 2023 19:22:02 +0800
Subject: [PATCH] Photographer API


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 75c4b20c1637f4b2e1a77450d30a21b4d2db5af0..afea70c6406ec2e628d647ce5e7ac80e931d7c46 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -260,6 +260,7 @@ import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import top.leavesmc.leaves.entity.CraftBotManager;
+import top.leavesmc.leaves.entity.CraftPhotographerManager;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -306,6 +307,7 @@ public final class CraftServer implements Server {
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final CraftPotionBrewer potionBrewer = new CraftPotionBrewer(); // Paper
     private final CraftBotManager botManager = new CraftBotManager();
+    private final CraftPhotographerManager photographerManager = new CraftPhotographerManager();
 
     // Paper start - Folia region threading API
     private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
@@ -3125,4 +3127,11 @@ public final class CraftServer implements Server {
         return botManager;
     }
     // Leaves end - Bot API
+
+    // Leaves start - replay mod api
+    @Override
+    public CraftPhotographerManager getPhotographerManager() {
+        return photographerManager;
+    }
+    // Leaves end - replay mod api
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 81670f76c4d7ccec6f9e95465687c83b37c544bd..d6d1a867872c6c8968829825daa820662bc544ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -195,6 +195,8 @@ import top.leavesmc.leaves.bot.ServerBot;
 import top.leavesmc.leaves.entity.CraftBot;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import top.leavesmc.leaves.entity.CraftPhotographer;
+import top.leavesmc.leaves.replay.ServerPhotographer;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -231,6 +233,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
                 // Leaves start - add CraftBot
                 if (entity instanceof ServerPlayer) {
                     if (entity instanceof ServerBot) { return new CraftBot(server, (ServerBot) entity); }
+                    if (entity instanceof ServerPhotographer) { return new CraftPhotographer(server, (ServerPhotographer) entity); }
                     else { return new CraftPlayer(server, (ServerPlayer) entity); }
                 }
                 // Leaves end - add CraftBot
diff --git a/src/main/java/top/leavesmc/leaves/entity/CraftPhotographer.java b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographer.java
new file mode 100644
index 0000000000000000000000000000000000000000..598d930640c408f6247dc1c9a0f647603b0a1f14
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographer.java
@@ -0,0 +1,52 @@
+package top.leavesmc.leaves.entity;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.replay.PhotographerUtil;
+import top.leavesmc.leaves.replay.ServerPhotographer;
+
+import java.util.UUID;
+
+public class CraftPhotographer extends CraftPlayer implements Photographer {
+
+    public CraftPhotographer(CraftServer server, ServerPhotographer entity) {
+        super(server, entity);
+    }
+
+    @Override
+    public void stopRecording() {
+        Bukkit.getPhotographerManager().removePhotographer(getUUID());
+    }
+
+    @Override
+    public void teleportTo(Location location) {
+        this.teleport(location);
+    }
+
+    @Override
+    public @NotNull String getId() {
+        return getHandle().createState.id;
+    }
+
+    @Override
+    public @NotNull UUID getUUID() {
+        return PhotographerUtil.getPhotographerUUID(getHandle().createState);
+    }
+
+    @Override
+    public ServerPhotographer getHandle() {
+        return (ServerPhotographer) entity;
+    }
+
+    public void setHandle(final ServerPhotographer entity) {
+        super.setHandle(entity);
+    }
+
+    @Override
+    public String toString() {
+        return "CraftPhotographer{" + "name=" + getName() + '}';
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/entity/CraftPhotographerManager.java b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographerManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..cd1db5a1a6382446bb0187096146d2abeb02353a
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographerManager.java
@@ -0,0 +1,74 @@
+package top.leavesmc.leaves.entity;
+
+import com.google.common.collect.Lists;
+import org.bukkit.Location;
+import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import top.leavesmc.leaves.bot.ServerBot;
+import top.leavesmc.leaves.replay.BukkitRecorderOption;
+import top.leavesmc.leaves.replay.RecorderOption;
+import top.leavesmc.leaves.replay.ServerPhotographer;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.UUID;
+
+public class CraftPhotographerManager implements PhotographerManager{
+    private final Collection<Photographer> photographerViews = Collections.unmodifiableList(Lists.transform(ServerPhotographer.getPhotographers(),ServerPhotographer::getBukkitPlayer));
+
+    @Override
+    public @Nullable Photographer getPhotographer(@NotNull UUID uuid) {
+        return ServerPhotographer.getPhotographer(uuid).getBukkitPlayer();
+    }
+
+    @Override
+    public @Nullable Photographer getPhotographer(@NotNull String id) {
+        return ServerPhotographer.getPhotographer(id).getBukkitPlayer();
+    }
+
+    @Override
+    public @Nullable Photographer createPhotographer(@NotNull String id, @NotNull Location location) {
+        ServerPhotographer photographer = new ServerPhotographer.PhotographerCreateState(location, id).createSync(RecorderOption.createDefaultOption());
+        if (photographer != null) {
+            return photographer.getBukkitPlayer();
+        }
+        return null;
+    }
+
+    @Override
+    public @Nullable Photographer createPhotographer(@NotNull String id, @NotNull Location location, @NotNull BukkitRecorderOption recorderOption) {
+        ServerPhotographer photographer = new ServerPhotographer.PhotographerCreateState(location, id).createSync(RecorderOption.createFromBukkit(recorderOption));
+        if (photographer != null) {
+            return photographer.getBukkitPlayer();
+        }
+        return null;
+    }
+
+    @Override
+    public void removePhotographer(@NotNull String id) {
+        ServerPhotographer photographer = ServerPhotographer.getPhotographer(id);
+        if (photographer != null) {
+            photographer.remove(true);
+        }
+    }
+
+    @Override
+    public void removePhotographer(@NotNull UUID uuid) {
+        ServerPhotographer photographer = ServerPhotographer.getPhotographer(uuid);
+        if (photographer != null) {
+            photographer.remove(true);
+        }
+    }
+
+    @Override
+    public void removeAllPhotographers() {
+        for(ServerPhotographer photographer:ServerPhotographer.getPhotographers()){
+            photographer.remove(true);
+        }
+    }
+    @Override
+    public Collection<Photographer> getPhotographers() {
+        return photographerViews;
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/replay/PhotographerCommand.java b/src/main/java/top/leavesmc/leaves/replay/PhotographerCommand.java
index 24d4aae46ce00a9c50d9ed58efc0aecc1731ad38..a53d776c4e12ba013de26cc6e80864ebd92c4076 100644
--- a/src/main/java/top/leavesmc/leaves/replay/PhotographerCommand.java
+++ b/src/main/java/top/leavesmc/leaves/replay/PhotographerCommand.java
@@ -1,5 +1,8 @@
 package top.leavesmc.leaves.replay;
 
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
@@ -7,6 +10,8 @@ import org.bukkit.World;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
+import org.bukkit.craftbukkit.entity.CraftAbstractHorse;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 
@@ -18,7 +23,7 @@ public class PhotographerCommand extends Command {
     public PhotographerCommand(String name) {
         super(name);
         this.description = "Photographer Command";
-        this.usageMessage = "/photographer [create | remove]";
+        this.usageMessage = "/photographer [create | remove | teleport]";
         this.setPermission("bukkit.command.photographer");
     }
 
@@ -29,11 +34,12 @@ public class PhotographerCommand extends Command {
         if (args.length <= 1) {
             list.add("create");
             list.add("remove");
+            list.add("teleport");
         }
 
         if (args.length == 2) {
             switch (args[0]) {
-                case "create", "remove" -> list.add("<PhotographerName>");
+                case "create", "remove", "teleport" -> list.add("<PhotographerId>");
             }
         }
 
@@ -52,6 +58,7 @@ public class PhotographerCommand extends Command {
         switch (args[0]) {
             case "create" -> this.onCreate(sender, args);
             case "remove" -> this.onRemove(sender, args);
+            case "teleport" -> this.onTeleport(sender, args);
 
             default -> {
                 sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
@@ -64,16 +71,16 @@ public class PhotographerCommand extends Command {
 
     private void onCreate(CommandSender sender, String @NotNull [] args) {
         if (args.length < 2) {
-            sender.sendMessage(ChatColor.RED + "Use /photographer create <name> to create a photographer");
+            sender.sendMessage(ChatColor.RED + "Use /photographer create <id> to create a photographer");
             return;
         }
 
         if (canCreate(sender, args[1])) {
             if (sender instanceof Player player) {
-                new ServerPhotographer.PhotographerCreateState(player.getLocation(), args[1]).createSync();
+                new ServerPhotographer.PhotographerCreateState(player.getLocation(), args[1]).createSync(RecorderOption.createDefaultOption());
             } else if (sender instanceof ConsoleCommandSender) {
                 if (args.length < 5) {
-                    sender.sendMessage(ChatColor.RED + "Use /photographer create <name> <bukkit_world_name> <x> <y> <z> to create a photographer");
+                    sender.sendMessage(ChatColor.RED + "Use /photographer create <id> <bukkit_world_name> <x> <y> <z> to create a photographer");
                     return;
                 }
 
@@ -84,7 +91,7 @@ public class PhotographerCommand extends Command {
                     double z = Double.parseDouble(args[5]);
 
                     if (world != null) {
-                        new ServerPhotographer.PhotographerCreateState(new Location(world, x, y, z), args[1]).createSync();
+                        new ServerPhotographer.PhotographerCreateState(new Location(world, x, y, z), args[1]).createSync(RecorderOption.createDefaultOption());
                     }
                 } catch (Exception e) {
                     e.printStackTrace();
@@ -106,9 +113,26 @@ public class PhotographerCommand extends Command {
 
         return true;
     }
+
     private void onRemove(CommandSender sender, String @NotNull [] args) {
         if (args.length < 2) {
-            sender.sendMessage(ChatColor.RED + "Use /photographer remove <name> to remove a photographer");
+            sender.sendMessage(ChatColor.RED + "Use /photographer remove <id> to remove a photographer");
+            return;
+        }
+
+        ServerPhotographer photographer = ServerPhotographer.getPhotographer(args[1]);
+
+        if (photographer  == null) {
+            sender.sendMessage(ChatColor.RED + "This photographer is not in server");
+            return;
+        }
+
+        ServerPhotographer.getPhotographer(args[1]).remove(true);
+    }
+
+    private void onTeleport(CommandSender sender, String @NotNull [] args) {
+        if (args.length < 5) {
+            sender.sendMessage(ChatColor.RED + "Use /photographer teleport <id> <x> <y> <z> to teleport a photographer");
             return;
         }
 
@@ -119,6 +143,6 @@ public class PhotographerCommand extends Command {
             return;
         }
 
-        photographer.remove(true);
+        ServerPhotographer.getPhotographer(args[1]).teleportTo(((CraftPlayer) sender).getHandle().serverLevel(), Double.parseDouble(args[2]), Double.parseDouble(args[3]), Double.parseDouble(args[4]), 0, 0);
     }
 }
diff --git a/src/main/java/top/leavesmc/leaves/replay/RecorderOption.java b/src/main/java/top/leavesmc/leaves/replay/RecorderOption.java
index fdf46f1a7e3a1cf500ca5df0fd984205f52eae86..4bfa3b160c58cd2fd25c10c704863f17da39aa6e 100644
--- a/src/main/java/top/leavesmc/leaves/replay/RecorderOption.java
+++ b/src/main/java/top/leavesmc/leaves/replay/RecorderOption.java
@@ -21,6 +21,21 @@ public class RecorderOption {
         return new RecorderOption();
     }
 
+    @NotNull
+    public static RecorderOption createFromBukkit(@NotNull BukkitRecorderOption bukkitRecorderOption) {
+        RecorderOption recorderOption = new RecorderOption();
+        recorderOption.recordDistance = bukkitRecorderOption.recordDistance;
+        recorderOption.ignoreItem = bukkitRecorderOption.ignoreItem;
+        recorderOption.ignoreChat = bukkitRecorderOption.ignoreChat;
+        recorderOption.forceDayTime = bukkitRecorderOption.forceDayTime;
+        recorderOption.forceWeather = switch (bukkitRecorderOption.forceWeather) {
+            case RAIN -> RecordWeather.RAIN;
+            case CLEAR -> RecordWeather.CLEAR;
+            case THUNDER -> RecordWeather.THUNDER;
+        };
+        return recorderOption;
+    }
+
     public enum RecordWeather {
         CLEAR(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0), new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, 0), new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, 0)),
         RAIN(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0), new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, 1), new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, 0)),
diff --git a/src/main/java/top/leavesmc/leaves/replay/ServerPhotographer.java b/src/main/java/top/leavesmc/leaves/replay/ServerPhotographer.java
index 70b2bdd897c4c3033db6fb277094f0b76c415ae3..42a4b85fd748f25ab0cdc7f859431083030391bb 100644
--- a/src/main/java/top/leavesmc/leaves/replay/ServerPhotographer.java
+++ b/src/main/java/top/leavesmc/leaves/replay/ServerPhotographer.java
@@ -12,6 +12,7 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
 import org.bukkit.plugin.Plugin;
+import org.checkerframework.checker.units.qual.N;
 import org.jetbrains.annotations.NotNull;
 import top.leavesmc.leaves.LeavesLogger;
 import top.leavesmc.leaves.bot.ServerBot;
@@ -47,7 +48,7 @@ public class ServerPhotographer extends ServerPlayer {
         return photographers;
     }
 
-    public static ServerPhotographer createPhotographer(@NotNull PhotographerCreateState state) throws IOException {
+    public static ServerPhotographer createPhotographer(@NotNull PhotographerCreateState state, @NotNull RecorderOption option) throws IOException {
         if (!isCreateLegal(state.id)) {
             return null;
         }
@@ -58,7 +59,7 @@ public class ServerPhotographer extends ServerPlayer {
         GameProfile profile = new GameProfile(UUID.randomUUID(), state.id);
 
         ServerPhotographer photographer = new ServerPhotographer(server, world, profile);
-        photographer.recorder = new Recorder(photographer, RecorderOption.createDefaultOption(), new File("replay", state.id + "-cache")); // TODO 更改缓存位置
+        photographer.recorder = new Recorder(photographer, option, new File("replay", state.id + "-cache")); // TODO 更改缓存位置
         photographer.createState = state;
 
         photographer.recorder.start();
@@ -98,6 +99,8 @@ public class ServerPhotographer extends ServerPlayer {
         this.recorder.stop();
         this.server.getPlayerList().removePhotographer(this);
 
+        LeavesLogger.LOGGER.info("Photographer " + createState.id + " removed");
+
         if (!recorder.isSaved()) {
             final File saveFile = new File("replay", createState.id + ".mcpr");
             CompletableFuture<Void> future = recorder.saveRecording(saveFile);
@@ -121,7 +124,7 @@ public class ServerPhotographer extends ServerPlayer {
     public static ServerPhotographer getPhotographer(UUID uuid) {
         ServerPhotographer photographer = null;
         for (ServerPhotographer p : photographers) {
-            if (p.uuid == uuid) {
+            if (PhotographerUtil.getPhotographerUUID(p.createState).equals(uuid)) {
                 photographer = p;
                 break;
             }
@@ -149,27 +152,13 @@ public class ServerPhotographer extends ServerPlayer {
             this.id = id;
         }
 
-        public ServerPhotographer createSync() {
+        public ServerPhotographer createSync(RecorderOption option) {
             try {
-                return createPhotographer(this);
+                return createPhotographer(this, option);
             } catch (IOException e) {
                 e.printStackTrace();
             }
             return null;
         }
-
-        public void createAsync(Consumer<ServerPhotographer> consumer) {
-            Bukkit.getScheduler().runTaskAsynchronously(MINECRAFT_PLUGIN, () ->
-                Bukkit.getScheduler().runTask(MINECRAFT_PLUGIN, () -> {
-                    try {
-                        ServerPhotographer serverPhotographer = createPhotographer(this);
-                        if (serverPhotographer != null && consumer != null) {
-                            consumer.accept(serverPhotographer);
-                        }
-                    } catch (IOException e) {
-                        e.printStackTrace();
-                    }
-                }));
-        }
     }
 }
