From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CerealAxis <2741798712@qq.com>
Date: Mon, 10 Jun 2024 11:33:37 +0800
Subject: [PATCH] Leaf AsteorBar Protocol


diff --git a/src/main/java/org/leavesmc/leaves/LeavesConfig.java b/src/main/java/org/leavesmc/leaves/LeavesConfig.java
index c4aed859d31547e3e56c85855f157813fe00e17f..6d2724dd12b16cee5df4635b8ab6576358ab3098 100644
--- a/src/main/java/org/leavesmc/leaves/LeavesConfig.java
+++ b/src/main/java/org/leavesmc/leaves/LeavesConfig.java
@@ -769,6 +769,9 @@ public final class LeavesConfig {
     @GlobalConfig(name = "chatImage-protocol", category = "protocol")
     public static boolean chatImageProtocol = false;
 
+    @GlobalConfig(name = "asteorbar-protocol", category = "protocol")
+    public static boolean AsteorBarProtocal = false;
+
     // Leaves end - protocol
 
     // Leaves start - misc
diff --git a/src/main/java/org/leavesmc/leaves/protocol/AsteorBarProtocol.java b/src/main/java/org/leavesmc/leaves/protocol/AsteorBarProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..ebcc707a6e1b52ad7e71b39399ef497965478e6e
--- /dev/null
+++ b/src/main/java/org/leavesmc/leaves/protocol/AsteorBarProtocol.java
@@ -0,0 +1,103 @@
+package org.leavesmc.leaves.protocol;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.food.FoodData;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.leavesmc.leaves.LeavesConfig;
+import org.leavesmc.leaves.protocol.core.LeavesProtocol;
+import org.leavesmc.leaves.protocol.core.ProtocolHandler;
+import org.leavesmc.leaves.protocol.core.ProtocolUtils;
+
+import java.util.*;
+
+@LeavesProtocol(namespace = "asteorbar")
+public class AsteorBarProtocol {
+
+    public static final String PROTOCOL_ID = "asteorbar";
+
+    private static final ResourceLocation NETWORK_KEY = id("network");
+
+    private static final Map<UUID, Float> previousSaturationLevels = new HashMap<>();
+    private static final Map<UUID, Float> previousExhaustionLevels = new HashMap<>();
+
+    private static final float THRESHOLD = 0.01F;
+
+    private static final Set<ServerPlayer> players = new HashSet<>();
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+
+    @ProtocolHandler.PlayerJoin
+    public static void onPlayerLoggedIn(@NotNull ServerPlayer player) {
+        if (LeavesConfig.AsteorBarProtocal) {
+            resetPlayerData(player);
+        }
+    }
+
+    @ProtocolHandler.PlayerLeave
+    public static void onPlayerLoggedOut(@NotNull ServerPlayer player) {
+        if (LeavesConfig.AsteorBarProtocal) {
+            players.remove(player);
+            resetPlayerData(player);
+        }
+    }
+
+    @ProtocolHandler.MinecraftRegister(ignoreId = true)
+    public static void onPlayerSubscribed(@NotNull ServerPlayer player) {
+        if (LeavesConfig.AsteorBarProtocal) {
+            players.add(player);
+        }
+    }
+
+    @ProtocolHandler.Ticker
+    public static void tick() {
+        if (LeavesConfig.AsteorBarProtocal) {
+            for (ServerPlayer player : players) {
+                FoodData data = player.getFoodData();
+
+                float saturation = data.getSaturationLevel();
+                Float previousSaturation = previousSaturationLevels.get(player.getUUID());
+                if (previousSaturation == null || saturation != previousSaturation) {
+                    ProtocolUtils.sendPayloadPacket(player, NETWORK_KEY, buf -> {
+                        buf.writeByte(1);
+                        buf.writeFloat(saturation);
+                    });
+                    previousSaturationLevels.put(player.getUUID(), saturation);
+                }
+
+                float exhaustion = data.getExhaustionLevel();
+                Float previousExhaustion = previousExhaustionLevels.get(player.getUUID());
+                if (previousExhaustion == null || Math.abs(exhaustion - previousExhaustion) >= THRESHOLD) {
+                    ProtocolUtils.sendPayloadPacket(player, NETWORK_KEY, buf -> {
+                        buf.writeByte(0);
+                        buf.writeFloat(exhaustion);
+                    });
+                    previousExhaustionLevels.put(player.getUUID(), exhaustion);
+                }
+            }
+        }
+    }
+
+    @ProtocolHandler.ReloadServer
+    public static void onServerReload() {
+        if (LeavesConfig.AsteorBarProtocal) {
+            disableAllPlayer();
+        }
+    }
+
+    public static void disableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedOut(player);
+        }
+    }
+
+    private static void resetPlayerData(@NotNull ServerPlayer player) {
+        previousExhaustionLevels.remove(player.getUUID());
+        previousSaturationLevels.remove(player.getUUID());
+    }
+}
