From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sun, 13 Aug 2023 17:22:08 +0800
Subject: [PATCH] Leaves tick command


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d47e29850462356e843591deba7e8a83f59faba0..5f61f4861254fb05f069f8e95a3e84c4109fe5c2 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -194,6 +194,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
 import co.aikar.timings.MinecraftTimings; // Paper
+import top.leavesmc.leaves.util.TickStatus; // Leaves - tick command
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
 
@@ -1099,6 +1100,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Spigot End
 
     public static volatile RuntimeException chunkSystemCrash; // Paper - rewrite chunk system
+    public static TickStatus tickStatus = TickStatus.NORMAL; // Leaves - tick command
 
     protected void runServer() {
         try {
@@ -1147,21 +1149,24 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     this.lastOverloadWarning = this.nextTickTime;
                 }
 
-                ++MinecraftServer.currentTickLong; // Paper
-                if ( ++MinecraftServer.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0 )
-                {
-                    final long diff = curTime - tickSection;
-                    java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
-                    tps1.add(currentTps, diff);
-                    tps5.add(currentTps, diff);
-                    tps15.add(currentTps, diff);
-                    // Backwards compat with bad plugins
-                    this.recentTps[0] = tps1.getAverage();
-                    this.recentTps[1] = tps5.getAverage();
-                    this.recentTps[2] = tps15.getAverage();
-                    // Paper end
-                    tickSection = curTime;
+                // Leaves start - tick command
+                if (tickStatus != TickStatus.FREEZE) {
+                    ++MinecraftServer.currentTickLong; // Paper
+                    if (++MinecraftServer.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0) {
+                        final long diff = curTime - tickSection;
+                        java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
+                        tps1.add(currentTps, diff);
+                        tps5.add(currentTps, diff);
+                        tps15.add(currentTps, diff);
+                        // Backwards compat with bad plugins
+                        this.recentTps[0] = tps1.getAverage();
+                        this.recentTps[1] = tps5.getAverage();
+                        this.recentTps[2] = tps15.getAverage();
+                        // Paper end
+                        tickSection = curTime;
+                    }
                 }
+                // Leaves end - tick command
                 // Spigot end
 
                 if (this.debugCommandProfilerDelayStart) {
@@ -1174,11 +1179,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.nextTickTime += 50L;
                 this.startMetricsRecordingTick();
                 this.profiler.push("tick");
-                this.tickServer(this::haveTime);
+                // Leaves start - tick command
+                if (tickStatus == TickStatus.FREEZE) {
+                    this.tickFreeze();
+                } else {
+                    this.tickServer(this::haveTime);
+                }
+                // Leaves end - tick command
                 this.profiler.popPush("nextTickWait");
                 this.mayHaveDelayedTasks = true;
                 this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
-                this.waitUntilNextTick();
+                // Leaves start - tick command
+                if (tickStatus == TickStatus.WARP) {
+                    this.nextTickTime = Util.getMillis();
+                } else {
+                    this.waitUntilNextTick();
+                }
+                // Leaves end - tick command
                 this.profiler.pop();
                 this.endMetricsRecordingTick();
                 this.isReady = true;
@@ -1235,6 +1252,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     }
 
+    // Leaves start - tick command - freeze
+    private void tickFreeze() {
+        this.getConnection().tick();
+        top.leavesmc.leaves.protocol.bladeren.MsptSyncProtocol.tick(this);
+        this.runAllTasks();
+        while (!this.processQueue.isEmpty()) {
+            this.processQueue.remove().run();
+        }
+        org.spigotmc.WatchdogThread.tick();
+    }
+    // Leaves end - tick command - freeze
+
     private static CrashReport constructOrExtractCrashReport(Throwable throwable) {
         ReportedException reportedexception = null;
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 9966d7e1f542a2a9602381869c2c671d33a60c5a..c9a89a93a816f500cdfb52d8ee153c8d4a98df1e 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2741,7 +2741,7 @@ public class ServerPlayer extends Player {
     }
 
     public boolean allowOperation() {
-        return (instaBreakCountPerTick == 0 || placeBlockCountPerTick == 0) && (instaBreakCountPerTick <= 1 && placeBlockCountPerTick <= 2);
+        return MinecraftServer.tickStatus == top.leavesmc.leaves.util.TickStatus.FREEZE || (instaBreakCountPerTick == 0 || placeBlockCountPerTick == 0) && (instaBreakCountPerTick <= 1 && placeBlockCountPerTick <= 2); // Leaves - tick command
     }
     // Leaves end - player operation limiter
     // CraftBukkit end
diff --git a/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java b/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java
index da1f7ce2db23c509c70f673c8bb1c46af2ed7279..0259a1472bba36b5bb903e559a99f791e8a9317a 100644
--- a/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java
+++ b/src/main/java/top/leavesmc/leaves/command/LeavesCommand.java
@@ -13,6 +13,7 @@ import org.bukkit.plugin.PluginManager;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.NotNull;
 import top.leavesmc.leaves.command.subcommands.PeacefulModeSwitchCommand;
+import top.leavesmc.leaves.command.subcommands.TickCommand;
 import top.leavesmc.leaves.command.subcommands.UpdateCommand;
 
 import java.util.ArrayList;
@@ -35,6 +36,7 @@ public final class LeavesCommand extends Command {
         final Map<Set<String>, LeavesSubcommand> commands = new HashMap<>();
         commands.put(Set.of("update"), new UpdateCommand());
         commands.put(Set.of("peaceful"), new PeacefulModeSwitchCommand());
+        commands.put(Set.of("tick"), new TickCommand());
 
         return commands.entrySet().stream()
             .flatMap(entry -> entry.getKey().stream().map(s -> Map.entry(s, entry.getValue())))
diff --git a/src/main/java/top/leavesmc/leaves/command/subcommands/TickCommand.java b/src/main/java/top/leavesmc/leaves/command/subcommands/TickCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..162c3c005130bfa07c7b924015356430b1e1ac2a
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/command/subcommands/TickCommand.java
@@ -0,0 +1,82 @@
+package top.leavesmc.leaves.command.subcommands;
+
+import io.papermc.paper.command.CommandUtil;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.JoinConfiguration;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.CommandSender;
+import top.leavesmc.leaves.LeavesConfig;
+import top.leavesmc.leaves.command.LeavesSubcommand;
+import top.leavesmc.leaves.util.TickStatus;
+
+import java.util.Collections;
+import java.util.List;
+
+public class TickCommand implements LeavesSubcommand {
+
+    @Override
+    public boolean execute(CommandSender sender, String subCommand, String[] args) {
+        if (!LeavesConfig.tickCommand) {
+            return true;
+        }
+
+        if (args.length < 1) {
+            sender.sendMessage(Component.join(JoinConfiguration.noSeparators(),
+                Component.text("Tick Status: ", NamedTextColor.GRAY),
+                this.getStatus().getMessage()
+            ));
+            return true;
+        }
+
+        TickStatus oldStatus = this.getStatus();
+
+        switch (args[0]) {
+            case "warp" -> {
+                MinecraftServer.tickStatus = TickStatus.WARP;
+                sender.sendMessage(this.getStatusChangeMessage(oldStatus));
+            }
+
+            case "freeze" -> {
+                MinecraftServer.tickStatus = TickStatus.FREEZE;
+                sender.sendMessage(this.getStatusChangeMessage(oldStatus));
+            }
+
+            case "normal" -> {
+                MinecraftServer.tickStatus = TickStatus.NORMAL;
+                sender.sendMessage(this.getStatusChangeMessage(oldStatus));
+            }
+        }
+        return true;
+    }
+
+    public Component getStatusChangeMessage(TickStatus old) {
+        return Component.join(JoinConfiguration.noSeparators(),
+            Component.text("Tick Status: ", NamedTextColor.GRAY),
+            old.getMessage(),
+            Component.text(" -> ", NamedTextColor.GRAY),
+            this.getStatus().getMessage()
+        );
+    }
+
+    public TickStatus getStatus() {
+        return MinecraftServer.tickStatus;
+    }
+
+    @Override
+    public List<String> tabComplete(final CommandSender sender, final String subCommand, final String[] args) {
+        if (!LeavesConfig.tickCommand) {
+            return Collections.emptyList();
+        }
+
+        if (args.length == 1) {
+            return CommandUtil.getListMatchingLast(sender, args, "normal", "warp", "freeze");
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean tabCompletes() {
+        return LeavesConfig.tickCommand;
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java
index 5c206ecc6aba1ef632467f85ea83f909486ced29..6f53317f392963e5041ce816841141b4c3f08e47 100644
--- a/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java
+++ b/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java
@@ -10,6 +10,7 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import top.leavesmc.leaves.LeavesConfig;
 import top.leavesmc.leaves.util.ProtocolUtils;
+import top.leavesmc.leaves.util.TickStatus;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -63,6 +64,11 @@ public class MsptSyncProtocol {
                 buf.writeDouble(mspt);
                 buf.writeDouble(tps);
                 players.forEach(player -> ProtocolUtils.sendPayloadPacket(player, MSPT_SYNC, buf));
+            } else if (MinecraftServer.tickStatus == TickStatus.FREEZE) {
+                FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                buf.writeDouble(0);
+                buf.writeDouble(0);
+                players.forEach(player -> ProtocolUtils.sendPayloadPacket(player, MSPT_SYNC, buf));
             }
         }
     }
diff --git a/src/main/java/top/leavesmc/leaves/util/TickStatus.java b/src/main/java/top/leavesmc/leaves/util/TickStatus.java
new file mode 100644
index 0000000000000000000000000000000000000000..460307c6d477704417dbfe38364afbc5efe8c767
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/util/TickStatus.java
@@ -0,0 +1,20 @@
+package top.leavesmc.leaves.util;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+
+public enum TickStatus {
+    NORMAL(Component.text("normal", NamedTextColor.GRAY)),
+    WARP(Component.text("warp", NamedTextColor.GREEN)),
+    FREEZE(Component.text("freeze", NamedTextColor.AQUA));
+
+    private final Component message;
+
+    private TickStatus(Component message) {
+        this.message = message;
+    }
+
+    public Component getMessage() {
+        return message;
+    }
+}
